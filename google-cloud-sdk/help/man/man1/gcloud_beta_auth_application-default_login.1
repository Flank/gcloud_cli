
.TH "GCLOUD_BETA_AUTH_APPLICATION\-DEFAULT_LOGIN" 1



.SH "NAME"
.HP
gcloud beta auth application\-default login \- acquire new user credentials to use for Application Default Credentials



.SH "SYNOPSIS"
.HP
\f5gcloud beta auth application\-default login\fR [\fB\-\-client\-id\-file\fR=\fICLIENT_ID_FILE\fR] [\fB\-\-no\-launch\-browser\fR] [\fB\-\-scopes\fR=\fISCOPES\fR,[\fISCOPES\fR,...]] [\fIGCLOUD_WIDE_FLAG\ ...\fR]



.SH "DESCRIPTION"

\fB(BETA)\fR Note: Consider using a service account and the complementary
\f5gcloud auth activate\-service\-account\fR to authorize access to Google Cloud
Platform. For details on authorizing with a service account, see
https://cloud.google.com/sdk/docs/authorizing#authorizing_with_a_service_account.

Obtains user access credentials via a web flow and puts them in the well\-known
location for Application Default Credentials to use them as a proxy for a
service account.

This command is useful when you are developing code that would normally use a
service account but need to run the code in a local development environment
where it's easier to provide user credentials. The credentials will apply to all
API calls that make use of the Application Default Credentials client library.
Moreover, the \f5GOOGLE_APPLICATION_CREDENTIALS\fR environment variable which is
set depending on the code's environment cannot be set once this command is run.
To manually set this variable, refer to instructions at
https://developers.google.com/identity/protocols/application\-default\-credentials#calling.

API enablement and quotas are managed by the master Application Default
Credentials project. In the case of errors related to the API not being enabled
or quota limitations, use the \f5\-\-client\-id\-file\fR flag. You can create
the client\-id\-file at https://console.cloud.google.com/apis/credentials.

This command has no effect on the user account(s) set up by the \f5gcloud auth
login\fR command.

Any credentials previously generated by \f5gcloud auth application\-default
login\fR will be overwritten.



.SH "FLAGS"

.RS 2m
.TP 2m
\fB\-\-client\-id\-file\fR=\fICLIENT_ID_FILE\fR
A file containing your own client id to use to login.

.TP 2m
\fB\-\-launch\-browser\fR
Launch a browser for authorization. If not enabled or DISPLAY variable is not
set, prints a URL to standard output to be copied. Enabled by default, use
\fB\-\-no\-launch\-browser\fR to disable.

.TP 2m
\fB\-\-scopes\fR=\fISCOPES\fR,[\fISCOPES\fR,...]
The names of the scopes to authorize for. By default
https://www.googleapis.com/auth/userinfo.email,
https://www.googleapis.com/auth/cloud\-platform scopes are used. The list of
possible scopes can be found at:
https://developers.google.com/identity/protocols/googlescopes.


.RE
.sp

.SH "GCLOUD WIDE FLAGS"

These flags are available to all commands: \-\-account, \-\-billing\-project,
\-\-configuration, \-\-flags\-file, \-\-flatten, \-\-format, \-\-help,
\-\-impersonate\-service\-account, \-\-log\-http, \-\-project, \-\-quiet,
\-\-trace\-token, \-\-user\-output\-enabled, \-\-verbosity. Run \fB$ gcloud
help\fR for details.



.SH "EXAMPLES"

If you want your local application to temporarily use your own user credentials
for API access, run:

.RS 2m
$ gcloud beta auth application\-default login
.RE

If you'd like to login by passing in a file containing your own client id, run:

.RS 2m
$ gcloud beta auth application\-default login \e
    \-\-client\-id\-file=clientid.json
.RE



.SH "NOTES"

This command is currently in BETA and may change without notice. This variant is
also available:

.RS 2m
$ gcloud auth application\-default login
.RE

