
.TH "GCLOUD_ALPHA_BUILDS_DEPLOY_CONFIGURE_GKE" 1



.SH "NAME"
.HP
gcloud alpha builds deploy configure gke \- configure automated build and deployment to a target Google Kubernetes Engine cluster



.SH "SYNOPSIS"
.HP
\f5gcloud alpha builds deploy configure gke\fR \fB\-\-cluster\fR=\fICLUSTER\fR \fB\-\-location\fR=\fILOCATION\fR \fB\-\-repo\-name\fR=\fIREPO_NAME\fR \fB\-\-repo\-type\fR=\fIREPO_TYPE\fR (\fB\-\-branch\-pattern\fR=\fIREGEX\fR\ |\ \fB\-\-tag\-pattern\fR=\fIREGEX\fR\ |\ [\fB\-\-pull\-request\-pattern\fR=\fIREGEX\fR\ \fB\-\-pull\-request\-preview\fR\ :\ \fB\-\-comment\-control\fR\ \fB\-\-preview\-expiry\fR=\fIPREVIEW_EXPIRY\fR;\ default=3]) [\fB\-\-app\-name\fR=\fIAPP_NAME\fR] [\fB\-\-config\fR=\fICONFIG\fR] [\fB\-\-dockerfile\fR=\fIDOCKERFILE\fR] [\fB\-\-expose\fR=\fIEXPOSE\fR] [\fB\-\-gcs\-config\-staging\-dir\fR=\fIGCS_CONFIG_STAGING_DIR\fR] [\fB\-\-namespace\fR=\fINAMESPACE\fR] [\fB\-\-repo\-owner\fR=\fIREPO_OWNER\fR] [\fB\-\-timeout\fR=\fITIMEOUT\fR] [\fIGCLOUD_WIDE_FLAG\ ...\fR]



.SH "DESCRIPTION"

\fB(ALPHA)\fR Configure automated build and deployment from a repository. This
can be triggered by a Git branch or tag push.



.SH "REQUIRED FLAGS"

.RS 2m
.TP 2m
\fB\-\-cluster\fR=\fICLUSTER\fR
Name of the target cluster to deploy to.

.TP 2m
\fB\-\-location\fR=\fILOCATION\fR
Region or zone of the target cluster to deploy to.

.TP 2m
\fB\-\-repo\-name\fR=\fIREPO_NAME\fR
Name of the repository.

.TP 2m
\fB\-\-repo\-type\fR=\fIREPO_TYPE\fR
Type of repository.

\f5\-\-repo\-owner\fR must be provided if one of the following choices is
selected:

\f5github\fR \- A GitHub (Cloud Build GitHub App) repository connected to Cloud
Build triggers. The deployed image will have the format
\'gcr.io/[PROJECT_ID]/github.com/[REPO_OWNER]/[REPO_NAME]:$COMMIT_SHA'.

\f5bitbucket_mirrored\fR \- A Bitbucket repository connected to Cloud Source
Repositories. The deployed image will have the format
\'gcr.io/[PROJECT_ID]/bitbucket.org/[REPO_OWNER]/[REPO_NAME]:$COMMIT_SHA'.

\f5github_mirrored\fR \- A GitHub repository connected to Cloud Source
Repositories. The deployed image will have the format
\'gcr.io/[PROJECT_ID]/github.com/[REPO_OWNER]/[REPO_NAME]:$COMMIT_SHA'.

\f5\-\-repo\-owner\fR must not be provided if the following is selected:

\f5csr\fR \- A repository on Cloud Source Repositories. The deployed image will
have the format 'gcr.io/[PROJECT_ID]/[REPO_NAME]:$COMMIT_SHA'.

Connect repositories at
https://console.cloud.google.com/cloud\-build/triggers/connect.

\fIREPO_TYPE\fR must be one of: \fBgithub\fR, \fBbitbucket_mirrored\fR,
\fBgithub_mirrored\fR, \fBcsr\fR.

.TP 2m

Exactly one of these must be specified:

.RS 2m
.TP 2m
\fB\-\-branch\-pattern\fR=\fIREGEX\fR
A regular expression specifying which Git branches to match.

This pattern is used as a regex search for any incoming pushes. For example,
\-\-branch\-pattern=foo will match "foo", "foobar", and "barfoo". Events on a
branch that does not match will be ignored.

The syntax of the regular expressions accepted is the syntax accepted by RE2 and
described at https://github.com/google/re2/wiki/Syntax.

.TP 2m
\fB\-\-tag\-pattern\fR=\fIREGEX\fR
A regular expression specifying which Git tags to match.

This pattern is used as a regex search for any incoming pushes. For example,
\-\-tag\-pattern=foo will match "foo", "foobar", and "barfoo". Events on a tag
that does not match will be ignored.

The syntax of the regular expressions accepted is the syntax accepted by RE2 and
described at https://github.com/google/re2/wiki/Syntax.

.TP 2m

Pull request preview deployment settings

.RS 2m
.TP 2m
\fB\-\-pull\-request\-pattern\fR=\fIREGEX\fR
A regular expression specifying which base Git branch to match for pull request
events.

This pattern is used as a regex search for the base branch (the branch you are
trying to merge into) for pull request updates. For example,
\-\-pull\-request\-pattern=foo will match "foo", "foobar", and "barfoo".

The syntax of the regular expressions accepted is the syntax accepted by RE2 and
described at https://github.com/google/re2/wiki/Syntax. This flag must be
specified if any of the other arguments in this group are specified.

.TP 2m
\fB\-\-pull\-request\-preview\fR
Enables previewing your application for each pull request.

This configures your application to deploy to a target cluster when a pull
request is created or updated against a branch specified by the
\f5\-\-pull\-request\-pattern\fR argument. The application will be deployed to
the namespace 'preview\-[REPO_NAME]\-[PR_NUMBER]'. This namespace will be
deleted after a number of days specified by the \f5\-\-preview\-expiry\fR
argument.

The deployed preview application will still exist even after the pull request is
merged or closed. The preview application will eventually get cleaned up by a
Cloud Scheduler job after the namespace expires. You can also delete the
namespace manually. This flag must be specified if any of the other arguments in
this group are specified.

.TP 2m
\fB\-\-comment\-control\fR
Require a repo collaborator to add '/gcbrun' as a comment in the pull request in
order to run the build.

.TP 2m
\fB\-\-preview\-expiry\fR=\fIPREVIEW_EXPIRY\fR; default=3
Number of days before a pull request preview deployment's namespace is
considered to be expired. An expired namespace will eventually be deleted.
Defaults to 3 days.


.RE
.RE
.RE
.sp

.SH "OPTIONAL FLAGS"

.RS 2m
.TP 2m
\fB\-\-app\-name\fR=\fIAPP_NAME\fR
If specified, the following label is added to the Kubernetes manifests:
\'app.kubernetes.io/name: APP_NAME'. Defaults to the repository name provided by
\f5\-\-repo\-name\fR.

.TP 2m
\fB\-\-config\fR=\fICONFIG\fR
Path to the Kubernetes YAML, or directory containing multiple Kubernetes YAML
files, used to deploy the container image. The path is relative to the
repository root. The files must reference the provided container image or tag.

If this field is not set, a default Deployment config and Horizontal Pod
Autoscaler config are used to deploy the image.

.TP 2m
\fB\-\-dockerfile\fR=\fIDOCKERFILE\fR
Path to the Dockerfile to build from, relative to the repository.

Defaults to './Dockerfile'.

.TP 2m
\fB\-\-expose\fR=\fIEXPOSE\fR
Port that the deployed application listens on. If set, a Kubernetes Service of
type 'LoadBalancer' is created with a single TCP port mapping that exposes this
port.

.TP 2m
\fB\-\-gcs\-config\-staging\-dir\fR=\fIGCS_CONFIG_STAGING_DIR\fR
Path to the Google Cloud Storage subdirectory into which to copy the configs
(suggested base and expanded Kubernetes YAML files) that are used to stage and
deploy your app. If the bucket in this path doesn't exist, Cloud Build creates
it.

If this field is not set, the configs are written to
\f5gs://[PROJECT_ID]_cloudbuild/deploy/config\fR.

.TP 2m
\fB\-\-namespace\fR=\fINAMESPACE\fR
Namespace of the target cluster to deploy to. If this field is not set, the
\'default' namespace is used.

.TP 2m
\fB\-\-repo\-owner\fR=\fIREPO_OWNER\fR
Owner of the repository.

.TP 2m
\fB\-\-timeout\fR=\fITIMEOUT\fR
Maximum time a build is run before it times out. For example, "2h15m5s" is two
hours, fifteen minutes, and five seconds. If you do not specify a unit, seconds
is assumed. Overrides the default builds/timeout property value for this command
invocation.


.RE
.sp

.SH "GCLOUD WIDE FLAGS"

These flags are available to all commands: \-\-account, \-\-billing\-project,
\-\-configuration, \-\-flags\-file, \-\-flatten, \-\-format, \-\-help,
\-\-impersonate\-service\-account, \-\-log\-http, \-\-project, \-\-quiet,
\-\-trace\-token, \-\-user\-output\-enabled, \-\-verbosity.

Run \fB$ gcloud help\fR for details.



.SH "NOTES"

This command is currently in ALPHA and may change without notice. If this
command fails with API permission errors despite specifying the right project,
you may be trying to access an API with an invitation\-only early access
allowlist.

