
.TH "GCLOUD_ALPHA_COMPUTE_INSTANCES_OPS\-AGENTS_POLICIES_CREATE" 1



.SH "NAME"
.HP
gcloud alpha compute instances ops\-agents policies create \- create a Google Cloud's operations suite agents (Ops\ Agents) policy



.SH "SYNOPSIS"
.HP
\f5gcloud alpha compute instances ops\-agents policies create\fR \fIPOLICY_ID\fR \fB\-\-agent\-rules\fR=\fItype\fR=\fITYPE\fR,\fIversion\fR=\fIVERSION\fR,\fIpackage\-state\fR=\fIPACKAGE\-STATE\fR,\fIenable\-autoupgrade\fR=\fIENABLE\-AUTOUPGRADE\fR;[...] \fB\-\-os\-types\fR=\fIshort\-name\fR=\fISHORT\-NAME\fR,\fIversion\fR=\fIVERSION\fR;[...] [\fB\-\-description\fR=\fIDESCRIPTION\fR] [\fB\-\-group\-labels\fR=[\fILABEL_NAME\fR=\fILABEL_VALUE\fR,\fILABEL_NAME\fR=\fILABEL_VALUE\fR,...;...]] [\fB\-\-instances\fR=[\fIzones\fR/\fIZONE_NAME\fR/\fIinstances\fR/\fIINSTANCE_NAME\fR,...]] [\fB\-\-zones\fR=[\fIZONE_NAME\fR,...]] [\fIGCLOUD_WIDE_FLAG\ ...\fR]



.SH "DESCRIPTION"

\fB(ALPHA)\fR \fBgcloud alpha compute instances ops\-agents policies create\fR
creates a policy that facilitates agent management across Compute Engine
instances based on user specified instance filters. This policy installs,
specifies versioning, enables autoupgrade, and removes Ops Agents.

The command returns the content of the created policy or an error indicating why
the creation fails. The created policy takes effect asynchronously. It can take
10\-15 minutes for the VMs to enforce the newly created policy.



.SH "POSITIONAL ARGUMENTS"

.RS 2m
.TP 2m
\fIPOLICY_ID\fR
ID of the policy.

This ID must start with \f5\fIops\-agents\-\fR\fR, contain only lowercase
letters, numbers, and hyphens, end with a number or a letter, be between 1\-63
characters, and be unique within the project. The goal of the prefix
\f5\fIops\-agents\-\fR\fR is to easily distinguish these Ops Agents specific
policies from other generic policies and lower the chance of naming conflicts.


.RE
.sp

.SH "REQUIRED FLAGS"

.RS 2m
.TP 2m
\fB\-\-agent\-rules\fR=\fItype\fR=\fITYPE\fR,\fIversion\fR=\fIVERSION\fR,\fIpackage\-state\fR=\fIPACKAGE\-STATE\fR,\fIenable\-autoupgrade\fR=\fIENABLE\-AUTOUPGRADE\fR;[...]
A non\-empty list of agent rules to be enforced by the policy.

This flag must be quoted. Items in the list are separated by ";". Each item in
the list is a <key, value> map that represents a logging or metrics agent. The
allowed values of the key are as follows.

.RS 2m
.TP 2m
\fBtype\fR
Type of agent to manage.

\fBRequired\fR. Allowed values: \f5\fIlogging\fR\fR, \f5\fImetrics\fR\fR and
\f5\fIops\-agent\fR\fR. Use \f5\fIlogging\fR\fR for the Logging Agent
(https://cloud.google.com/logging/docs/agent). Use \f5\fImetrics\fR\fR for the
Monitoring Agent (https://cloud.google.com/monitoring/agent). Use
\f5\fIops\-agent\fR\fR for the Ops Agent
(https://cloud.google.com/stackdriver/docs/solutions/ops\-agent). The Ops Agent
has both a logging module and a metrics module already. So other types of agents
are not allowed when there is an agent with type \f5\fIops\-agent\fR\fR. See
https://cloud.google.com/stackdriver/docs/solutions/ops\-agent#which_agent for
which agent to use.

.TP 2m
\fBversion\fR
Version of the agent to install.

Optional. Default to \f5\fIversion=current\-major\fR\fR. The allowed values and
formats are as follows.

.RS 2m
.TP 2m
\fBversion=latest\fR

With this setting, the latest version of the agent is installed at the time when
the policy is applied to an instance.

If multiple instances are created at different times but they all fall into the
instance filter rules of an existing policy, they may end up with different
versions of the agent, depending on what the latest version of the agent is at
the policy application time (in this case the instance creation time). One way
to avoid this is to set \f5\fIenable\-autoupgrade=true\fR\fR. This guarantees
that the installed agents on all instances that are managed by this policy are
always up to date and conform to the same version.

While this \f5\fIversion=latest\fR\fR setting makes it easier to keep the agent
version up to date, this setting does come with a potential risk. When a new
major version is released, the policy may install the latest version of the
agent from that new major release, which may introduce breaking changes. For
production environments, consider using the \f5version=MAJOR_VERSION.*.*\fR
setting below for safer agent deployments.

.TP 2m
\f5version=MAJOR_VERSION.*.*\fR

With this setting, the latest version of agent from a specific major version is
installed at the time when the policy is applied to an instance.

If multiple instances are created at different times but they all fall into the
instance filter rules of an existing policy, they may end up with different
versions of the agent, depending on what the latest version of the agent is at
the policy application time (in this case the instance creation time). One way
to avoid this is to set \f5\fIenable\-autoupgrade=true\fR\fR. This guarantees
that the installed agents on all instances that are managed by this policy are
always up to date within that major version and conform to the same version.

When a new major release is out, this setting ensures that only the latest
version from the specified major version is installed, which avoids accidentally
introducing breaking changes. This is recommended for production environments to
ensure safer agent deployments.

.TP 2m
\fBversion=current\-major\fR

With this setting, the version field is automatically set to
\f5version=MAJOR_VERSION.*.*\fR, where \f5\fIMAJOR_VERSION\fR\fR is the current
latest major version released. Refer to the \f5version=MAJOR_VERSION.*.*\fR
section for the expected behavior.

.TP 2m
\fBversion=MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION\fR

With this setting, the specified exact version of agent is installed at the time
when the policy is applied to an instance. \f5\fIenable\-autoupgrade\fR\fR must
be false for this setting.

This setting is not recommended since it prevents the policy from installing new
versions of the agent that include bug fixes and other improvements.

One limitation of this setting is that if the agent gets manually uninstalled
from the instances after the policy gets applied, the policy can only ensure
that the agent is re\-installed. It is not able to restore the expected exact
version of the agent.

.TP 2m
\f5version=5.5.2\-BUILD_NUMBER\fR

Allowed for the metrics agent (\f5\fItype=metrics\fR\fR) only.

With this setting, the specified exact build number of the deprecated 5.5.2
metrics agent is installed at the time when the policy is applied to an
instance. enable\-autoupgrade must be false for this setting.

This setting is deprecated and will be decommissioned along with the 5.5.2
metrics agent on Apr 28, 2021
(https://cloud.google.com/stackdriver/docs/deprecations/mon\-agent). It is not
recommended since it prevents the policy from installing new versions of the
agent that include bug fixes and other improvements.

One limitation of this setting is that if the agent gets manually uninstalled
from the instances after the policy gets applied, the policy can only ensure
that the agent is re\-installed. It is not able to restore the expected exact
version of the agent.

.RE
.sp
.TP 2m
\fBpackage\-state\fR
Desired package state of the agent.

Optional. Default to \f5\fIpackage\-state=installed\fR\fR. The allowed values
are as follows.

.RS 2m
.TP 2m
\fBpackage\-state=installed\fR

With this setting, the policy will ensure the agent package is installed on the
instances and the agent service is running.

.TP 2m
\fBpackage\-state=removed\fR

With this setting, the policy will ensure the agent package is removed from the
instances, which stops the service from running.

.RE
.sp
.TP 2m
\fBenable\-autoupgrade\fR
Whether to enable autoupgrade of the agent.

Optional. Default to \f5\fIenable\-autoupgrade=true\fR\fR. Allowed values:
\f5\fItrue\fR\fR or \f5\fIfalse\fR\fR. This has to be \f5\fIfalse\fR\fR if the
agent version is set to a specific patch version in the format of
\f5\fIversion=MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION\fR\fR.

.RE
.sp
.TP 2m
\fB\-\-os\-types\fR=\fIshort\-name\fR=\fISHORT\-NAME\fR,\fIversion\fR=\fIVERSION\fR;[...]
A non\-empty list of OS types to filter instances that the policy applies to.

For Alpha, exactly one OS type needs to be specified. The support for multiple
OS types will be added later for more flexibility. Each OS type contains the
following fields.

.RS 2m
.TP 2m
\fBshort\-name\fR
Short name of the OS.

\fBRequired\fR. Allowed values: \f5\fIcentos\fR\fR, \f5\fIdebian\fR\fR,
\f5\fIrhel\fR\fR, \f5\fIsles\fR\fR, \f5\fIsles_sap\fR\fR, \f5\fIubuntu\fR\fR.
This is typically the \f5\fIID\fR\fR value in the \f5\fI/etc/os\-release\fR\fR
file in the OS.

To inspect the exact OS short name of an instance, run:

.RS 2m
$ gcloud beta compute instances os\-inventory describe INSTANCE_NAME
.RE

.TP 2m
\fBversion\fR
Version of the OS.

\fBRequired\fR. This is typically the \f5\fIVERSION_ID\fR\fR value in the
\f5\fI/etc/os\-release\fR\fR file in the OS.

To inspect the exact OS version of an instance, run:

.RS 2m
$ gcloud beta compute instances os\-inventory describe INSTANCE_NAME
.RE

Sample values:

.RS 2m
OS Short Name      OS Version
centos             8
centos             7
debian             10
debian             9
rhel               8.*
rhel               7.*
sles               12.*
sles               15.*
sles_sap           12.*
sles_sap           15.*
ubuntu             16.04
ubuntu             18.04
ubuntu             19.10
ubuntu             20.04
.RE

\f5*\fR can be used to match a prefix of the version: \f5<VERSION_PREFIX>*\fR
matches any version that starts with \f5\fI<VERSION_PREFIX>\fR\fR.


.RE
.RE
.sp

.SH "OPTIONAL FLAGS"

.RS 2m
.TP 2m
\fB\-\-description\fR=\fIDESCRIPTION\fR
Description of the policy.

.TP 2m
\fB\-\-group\-labels\fR=[\fILABEL_NAME\fR=\fILABEL_VALUE\fR,\fILABEL_NAME\fR=\fILABEL_VALUE\fR,...;...]
A list of label maps to filter instances that the policy applies to.

Optional. The \f5\fI\-\-group\-labels\fR\fR flag needs to be quoted. Each label
map item in the list are separated by \f5;\fR. To manage instance labels, refer
to the \f5link:gcloud/beta/compute/instances/add\-labels[gcloud beta compute
instances add\-labels]\fR and the
\f5link:gcloud/beta/compute/instances/remove\-labels[gcloud beta compute
instances remove\-labels]\fR commands.

Each label map item in the \f5\fI\-\-group\-labels\fR\fR list is a map in the
format of \f5\fILABEL_NAME=LABEL_VALUE,LABEL_NAME=LABEL_VALUE,...\fR\fR. An
instance has to match all of the \f5\fILABEL_NAME=LABEL_VALUE\fR\fR criteria
inside a label map to be considered a match for that label map. But the instance
only needs to match one label map in the \f5\fI\-\-group\-labels\fR\fR list.

For example,
\f5\fI\-\-group\-labels="env=prod,product=myapp;env=staging,product=myapp"\fR\fR
implies the matching criteria is:

\fB(env=prod AND product=myapp) OR (env=staging AND product=myapp)\fR

.TP 2m
\fB\-\-instances\fR=[\fIzones\fR/\fIZONE_NAME\fR/\fIinstances\fR/\fIINSTANCE_NAME\fR,...]
A list of fully\-qualified names to filter instances that the policy applies to.

Each item in the list must be in the format of
\f5zones/ZONE_NAME/instances/INSTANCE_NAME\fR. The policy can also target
instances that are not yet created.

To list all existing instances, run:

.RS 2m
$ gcloud compute instances list
.RE

The \f5\fI\-\-instances\fR\fR flag is recommended for use during development and
testing. In production environments, it's more common to select instances via a
combination of \f5\fI\-\-zones\fR\fR and \f5\fI\-\-group\-labels\fR\fR.

.TP 2m
\fB\-\-zones\fR=[\fIZONE_NAME\fR,...]
A list of zones to filter instances to apply the policy.

To list available zones, run:

.RS 2m
$ gcloud compute zones list
.RE

The use of the \f5\fI\-\-zones\fR\fR and \f5\fI\-\-group\-labels\fR\fR flags is
recommended for production environments. For testing and development, it's more
common to select instances directly via the \f5\fI\-\-instances\fR\fR flag.


.RE
.sp

.SH "GCLOUD WIDE FLAGS"

These flags are available to all commands: \-\-account, \-\-billing\-project,
\-\-configuration, \-\-flags\-file, \-\-flatten, \-\-format, \-\-help,
\-\-impersonate\-service\-account, \-\-log\-http, \-\-project, \-\-quiet,
\-\-trace\-token, \-\-user\-output\-enabled, \-\-verbosity.

Run \fB$ gcloud help\fR for details.



.SH "EXAMPLES"

To create a policy named \f5\fIops\-agents\-test\-policy\fR\fR that targets a
single CentOS 7 VM instance named
\f5\fIzones/us\-central1\-a/instances/test\-instance\fR\fR for testing or
development and installs both Logging and Monitoring Agents on that VM instance,
run:

.RS 2m
$ gcloud alpha compute instances ops\-agents policies create \e
    ops\-agents\-test\-policy \e
    \-\-agent\-rules="type=logging;type=metrics" \e
    \-\-description="A test policy." \e
    \-\-os\-types=short\-name=centos,version=7 \e
    \-\-instances=zones/us\-central1\-a/instances/test\-instance
.RE

To create a policy named \f5\fIops\-agents\-prod\-policy\fR\fR that targets all
CentOS 7 VMs in zone \f5\fIus\-central1\-a\fR\fR with either
\f5\fIenv=prod,product=myapp\fR\fR or \f5\fIenv=staging,product=myapp\fR\fR
labels and makes sure the logging agent and metrics agent versions are pinned to
specific major versions for staging and production, run:

.RS 2m
$ gcloud alpha compute instances ops\-agents policies create \e
    ops\-agents\-prod\-policy \e
    \-\-agent\-rules="type=logging,version=1.*.*;type=metrics,version=6\e
.*.*" \-\-description="A prod policy." \e
    \-\-os\-types=short\-name=centos,version=7 \-\-zones=us\-central1\-a \e
    \-\-group\-labels="env=prod,product=myapp;env=staging,product=myapp\e
"
.RE

To create a policy named \f5\fIops\-agents\-prod\-policy\fR\fR that targets all
CentOS 7 VMs in zone \f5\fIus\-central1\-a\fR\fR with either
\f5\fIenv=prod,product=myapp\fR\fR or \f5\fIenv=staging,product=myapp\fR\fR
labels and makes sure the ops\-agent version is pinned to specific major
versions for staging and production, run:

.RS 2m
$ gcloud alpha compute instances ops\-agents policies create \e
    ops\-agents\-prod\-policy \e
    \-\-agent\-rules="type=ops\-agent,version=1.*.*" \e
    \-\-description="A prod policy." \e
    \-\-os\-types=short\-name=centos,version=7 \-\-zones=us\-central1\-a \e
    \-\-group\-labels="env=prod,product=myapp;env=staging,product=myapp\e
"
.RE



.SH "NOTES"

This command is currently in ALPHA and may change without notice. If this
command fails with API permission errors despite specifying the right project,
you may be trying to access an API with an invitation\-only early access
allowlist.

