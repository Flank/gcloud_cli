
.TH "GCLOUD_ALPHA_SERVICES_PEERED\-DNS\-DOMAINS_DELETE" 1



.SH "NAME"
.HP
gcloud alpha services peered\-dns\-domains delete \- delete a peered DNS domain for a private service connection



.SH "SYNOPSIS"
.HP
\f5gcloud alpha services peered\-dns\-domains delete\fR \fINAME\fR \fB\-\-network\fR=\fINETWORK\fR [\fB\-\-async\fR] [\fB\-\-service\fR=\fISERVICE\fR;\ default="servicenetworking.googleapis.com"] [\fIGCLOUD_WIDE_FLAG\ ...\fR]



.SH "DESCRIPTION"

\fB(ALPHA)\fR This command deletes a peered DNS domain from a private service
connection.



.SH "POSITIONAL ARGUMENTS"

.RS 2m
.TP 2m
\fINAME\fR
The name of the peered DNS domain to delete.


.RE
.sp

.SH "REQUIRED FLAGS"

.RS 2m
.TP 2m
\fB\-\-network\fR=\fINETWORK\fR
The network in the consumer project peered with the service.


.RE
.sp

.SH "OPTIONAL FLAGS"

.RS 2m
.TP 2m
\fB\-\-async\fR
Return immediately, without waiting for the operation in progress to complete.

.TP 2m
\fB\-\-service\fR=\fISERVICE\fR; default="servicenetworking.googleapis.com"
The name of the service to delete a peered DNS domain for.


.RE
.sp

.SH "GCLOUD WIDE FLAGS"

These flags are available to all commands: \-\-account, \-\-billing\-project,
\-\-configuration, \-\-flags\-file, \-\-flatten, \-\-format, \-\-help,
\-\-impersonate\-service\-account, \-\-log\-http, \-\-project, \-\-quiet,
\-\-trace\-token, \-\-user\-output\-enabled, \-\-verbosity.

Run \fB$ gcloud help\fR for details.



.SH "EXAMPLES"

To delete a peered DNS domain called \f5example\-com\fR from a private service
connection between service \f5peering\-service\fR and the consumer network
\f5my\-network\fR in the current project, run:

.RS 2m
$ gcloud alpha services peered\-dns\-domains delete example\-com \e
    \-\-network=my\-network \e
    \-\-service=peering\-service
.RE

To run the same command asynchronously (non\-blocking), run:

.RS 2m
$ gcloud alpha services peered\-dns\-domains delete example\-com \e
    \-\-network=my\-network \e
    \-\-service=peering\-service \-\-async
.RE



.SH "NOTES"

This command is currently in ALPHA and may change without notice. If this
command fails with API permission errors despite specifying the right project,
you may be trying to access an API with an invitation\-only early access
allowlist.

