
.TH "GCLOUD_ALPHA_COMPUTE_PACKET\-MIRRORINGS_CREATE" 1



.SH "NAME"
.HP
gcloud alpha compute packet\-mirrorings create \- create a Google Compute Engine packet mirroring policy



.SH "SYNOPSIS"
.HP
\f5gcloud alpha compute packet\-mirrorings create\fR \fINAME\fR \fB\-\-collector\-ilb\fR=\fICOLLECTOR_ILB\fR \fB\-\-network\fR=\fINETWORK\fR [\fB\-\-async\fR] [\fB\-\-description\fR=\fIDESCRIPTION\fR] [\fB\-\-no\-enable\fR] [\fB\-\-filter\-cidr\-ranges\fR=[\fICIDR_RANGE\fR,...]] [\fB\-\-filter\-direction\fR=\fIDIRECTION\fR] [\fB\-\-filter\-protocols\fR=[\fIPROTOCOL\fR,...]] [\fB\-\-mirrored\-instances\fR=[\fIINSTANCE\fR,...]] [\fB\-\-mirrored\-subnets\fR=[\fISUBNET\fR,...]] [\fB\-\-mirrored\-tags\fR=[\fITAG\fR,...]] [\fB\-\-region\fR=\fIREGION\fR] [\fIGCLOUD_WIDE_FLAG\ ...\fR]



.SH "DESCRIPTION"

\fB(ALPHA)\fR Create a Compute Engine packet mirroring policy.



.SH "POSITIONAL ARGUMENTS"

.RS 2m
.TP 2m
\fINAME\fR
Name of the packet mirroring to create.


.RE
.sp

.SH "REQUIRED FLAGS"

.RS 2m
.TP 2m
\fB\-\-collector\-ilb\fR=\fICOLLECTOR_ILB\fR
Forwarding rule configured as collector. This must be a regional forwarding rule
(in the same region) with load balancing scheme INTERNAL and
isMirroringCollector set to true.

You can provide this as the full URL to the forwarding rule, partial URL, or
name. For example, the following are valid values:
.RS 2m
.IP "\(em" 2m
https://compute.googleapis.com/compute/v1/projects/myproject/
regions/us\-central1/forwardingRules/fr\-1
.IP "\(em" 2m
projects/myproject/regions/us\-central1/forwardingRules/fr\-1
.IP "\(em" 2m
fr\-1
.RE
.RE
.sp

.RS 2m
.TP 2m
\fB\-\-network\fR=\fINETWORK\fR
Network for this packet mirroring. Only the packets in this network will be
mirrored. It is mandatory that all mirrored VMs have a network interface
controller (NIC) in the given network. All mirrored subnetworks should belong to
the given network.

You can provide this as the full URL to the network, partial URL, or name. For
example, the following are valid values:
.RS 2m
.IP "\(em" 2m
https://compute.googleapis.com/compute/v1/projects/myproject/
global/networks/network\-1
.IP "\(em" 2m
projects/myproject/global/networks/network\-1
.IP "\(em" 2m
network\-1
.RE
.RE
.sp



.SH "OPTIONAL FLAGS"

.RS 2m
.TP 2m
\fB\-\-async\fR
Return immediately, without waiting for the operation in progress to complete.

.TP 2m
\fB\-\-description\fR=\fIDESCRIPTION\fR
Optional, textual description for the packet mirroring.

.TP 2m
\fB\-\-enable\fR
Enable or disable the packet\-mirroring. Enabled by default, use
\fB\-\-no\-enable\fR to disable.

.TP 2m
\fB\-\-filter\-cidr\-ranges\fR=[\fICIDR_RANGE\fR,...]
List of IP CIDR ranges that apply as filters on the source or destination IP in
the IP header for packet mirroring traffic. All traffic between the VM and the
IPs listed here will be mirrored using this configuration. This can be a Public
IP as well. If unspecified, the config applies to all traffic.

.TP 2m
\fB\-\-filter\-direction\fR=\fIDIRECTION\fR
DIRECTION must be one of INGRESS, EGRESS, BOTH. For INGRESS, only ingress
traffic is mirrored. For EGRESS, only egress traffic is mirrored. For BOTH (or
in case the filter\-direction option is not specified), both directions are
mirrored. This is the default option. \fIDIRECTION\fR must be one of:
\fBboth\fR, \fBegress\fR, \fBingress\fR.

.TP 2m
\fB\-\-filter\-protocols\fR=[\fIPROTOCOL\fR,...]
List of IP protocols that apply as filters for packet mirroring traffic. If
unspecified, the packet mirroring applies to all traffic. \fIPROTOCOL\fR must be
one of: \fBtcp\fR, \fBudp\fR, \fBicmp\fR.

.TP 2m
\fB\-\-mirrored\-instances\fR=[\fIINSTANCE\fR,...]
List of instances to be mirrored. You can provide this as the full or valid
partial URL to the instance. For example, the following are valid values:
.RS 2m
.IP "\(em" 2m
https://compute.googleapis.com/compute/v1/projects/myproject/
zones/us\-central1\-a/instances/instance\-
.IP "\(em" 2m
projects/myproject/zones/us\-central1\-a/instances/instance\-1
.RE
.RE
.sp

.RS 2m
.TP 2m
\fB\-\-mirrored\-subnets\fR=[\fISUBNET\fR,...]
List of subnets to be mirrored. You can provide this as the full URL to the
subnet, partial URL, or name. For example, the following are valid values:
.RS 2m
.IP "\(em" 2m
https://compute.googleapis.com/compute/v1/projects/myproject/
regions/us\-central1/subnetworks/subnet\-1
.IP "\(em" 2m
projects/myproject/regions/us\-central1/subnetworks/subnet\-1
.IP "\(em" 2m
subnet\-1
.RE
.RE
.sp

.RS 2m
.TP 2m
\fB\-\-mirrored\-tags\fR=[\fITAG\fR,...]
List of virtual machine instance tags to be mirrored.

To read more about configuring network tags, read this guide:
https://cloud.google.com/vpc/docs/add\-remove\-network\-tags

The virtual machines with the provided tags must live in zones contained in the
same region as this packet mirroring.

.TP 2m
\fB\-\-region\fR=\fIREGION\fR
Region of the packet mirroring to create. Overrides the default
\fBcompute/region\fR property value for this command invocation.


.RE
.sp

.SH "GCLOUD WIDE FLAGS"

These flags are available to all commands: \-\-account, \-\-billing\-project,
\-\-configuration, \-\-flags\-file, \-\-flatten, \-\-format, \-\-help,
\-\-impersonate\-service\-account, \-\-log\-http, \-\-project, \-\-quiet,
\-\-trace\-token, \-\-user\-output\-enabled, \-\-verbosity.

Run \fB$ gcloud help\fR for details.



.SH "EXAMPLES"

Mirror all tcp traffic to/from all instances in subnet my\-subnet in
us\-central1, and send the mirrored traffic to the collector\-fr Forwarding
Rule.

.RS 2m
$ gcloud alpha compute packet\-mirrorings create my\-pm
  \-\-network my\-network \-\-region us\-central1
  \-\-mirrored\-subnets my\-subnet \-\-collector\-ilb collector\-fr
  \-\-filter\-protocols tcp
.RE

Mirror all traffic between instances with tag t1 and external server with IP
11.22.33.44 in us\-central1, and send the mirrored traffic to the collector\-fr
Forwarding Rule.

.RS 2m
$ gcloud alpha compute packet\-mirrorings create my\-pm
  \-\-network my\-network \-\-region us\-central1
  \-\-mirrored\-tags t1 \-\-collector\-ilb collector\-fr
  \-\-filter\-cidr\-ranges 11.22.33.44/32
.RE



.SH "NOTES"

This command is currently in ALPHA and may change without notice. If this
command fails with API permission errors despite specifying the right project,
you may be trying to access an API with an invitation\-only early access
allowlist. These variants are also available:

.RS 2m
$ gcloud compute packet\-mirrorings create
$ gcloud beta compute packet\-mirrorings create
.RE

