
.TH "GCLOUD_ALPHA_GAME_SERVERS_DEPLOYMENTS_SET\-ROLLOUT\-TARGET" 1



.SH "NAME"
.HP
gcloud alpha game servers deployments set\-rollout\-target \- set rollout target for the ongoing Deployment rollout in the specified clusters



.SH "SYNOPSIS"
.HP
\f5gcloud alpha game servers deployments set\-rollout\-target\fR (\fIDEPLOYMENT\fR\ :\ \fB\-\-location\fR=\fILOCATION\fR) \fB\-\-selector\fR=\fISELECTOR\fR [\fB\-\-async\fR] [\fIGCLOUD_WIDE_FLAG\ ...\fR]



.SH "DESCRIPTION"

\fB(ALPHA)\fR Set rollout target for the ongoing Deployment rollout in the
specified clusters.

A Deployment rollout updates game servers with a new image. The new image is
specified through the spec field of game server template. It is a string field
and follows the format of the spec field in Agones GameServer custom resource.
Please see https://agones.dev for more details.

The new game server template can be specified either through creating a new
Deployment resource or through the start\-rollout verb on an existing Deployment
resource (\f5gcloud game servers deployments start\-rollout\fR).

Once the new game server template is specified, you can start the rollout by
changing the percentage of game servers that run the new image through the
set\-rollout\-target verb (\f5gcloud game servers deployments
set\-rollout\-target\fR). The set\-rollout\-target verb specifies labels for
clusters that should get the new image. It also specifies what percentage of
game servers in each of the specified clusters should run the new image.

Finally, you can finish the rollout using the commit verb (\f5gcloud game
servers deployments commit\fR). This will set the rollout percentage to 100 in
all clusters whose labels were previously specified by calling the
set\-rollout\-target verb.

If you need to revert a rollout, you can use the revert\-rollout verb (\f5gcloud
game servers deployments revert\-rollout\fR) which deletes game servers running
the new image.



.SH "POSITIONAL ARGUMENTS"

.RS 2m
.TP 2m

Deployment resource \- Cloud Game Server Deployment to set rollout target for.
The arguments in this group can be used to specify the attributes of this
resource. (NOTE) Some attributes are not given arguments in this group but can
be set in other ways. To set the [project] attribute: provide the argument
[deployment] on the command line with a fully specified name; set the property
[core/project]; provide the argument [\-\-project] on the command line. This
must be specified.

.RS 2m
.TP 2m
\fIDEPLOYMENT\fR
ID of the deployment or fully qualified identifier for the deployment. This
positional must be specified if any of the other arguments in this group are
specified.

.TP 2m
\fB\-\-location\fR=\fILOCATION\fR
Google Cloud location.


.RE
.RE
.sp

.SH "REQUIRED FLAGS"

.RS 2m
.TP 2m
\fB\-\-selector\fR=\fISELECTOR\fR
Map representing the percentage of game servers running the new game server
template in clusters selected by their labels. This flag can be repeated.

.RS 2m
.TP 2m
\fBcluster\-labels\fR
Key value pairs of labels to use for selecting clusters that should run the new
game server template.

.TP 2m
\fBpercent\fR
Percentage of game servers running the new game server template in the selected
clusters. The percentage is applied to game server clusters which match any of
the specified labels. The specified percentage cannot be lower than its current
value. Default is 100.


.RE
.RE
.sp

.SH "OPTIONAL FLAGS"

.RS 2m
.TP 2m
\fB\-\-async\fR
Return immediately, without waiting for the operation in progress to complete.


.RE
.sp

.SH "GCLOUD WIDE FLAGS"

These flags are available to all commands: \-\-account, \-\-billing\-project,
\-\-configuration, \-\-flags\-file, \-\-flatten, \-\-format, \-\-help,
\-\-impersonate\-service\-account, \-\-log\-http, \-\-project, \-\-quiet,
\-\-trace\-token, \-\-user\-output\-enabled, \-\-verbosity. Run \fB$ gcloud
help\fR for details.



.SH "API REFERENCE"

This command uses the \fBgameservices/v1alpha\fR API. The full documentation for
this API can be found at: https://cloud.google.com/solutions/gaming/



.SH "EXAMPLES"

To set a rollout target with one selector for one cluster label key/value pair:

.RS 2m
$ gcloud alpha game servers deployments set\-rollout\-target \e
    example\-deployment \e
    \-\-selector=cluster\-labels=label_a=value1,percent=10
.RE

To set a rollout target with multiple selectors, repeat the \-\-selector flag:

.RS 2m
$ gcloud alpha game servers deployments set\-rollout\-target \e
    example\-deployment \e
    \-\-selector=cluster\-labels=label_a=value1,percent=10 \e
    \-\-selector=cluster\-labels=label_b=value2,percent=20
.RE

To set a rollout target for with one selector multiple cluster label key/value
pairs, you can use this syntax:

.RS 2m
$ gcloud alpha game servers deployments set\-rollout\-target \e
    example\-deployment \e
    \-\-selector=cluster\-labels=^:^"label_a=value1:label_b=value2",\e
percent=20
.RE

Alternatively, you can specify the labels in a YAML file using the
\f5\-\-flags\-file\fR flag:

.RS 2m
$ gcloud alpha game servers deployments set\-rollout\-target \e
    example\-deployment \-\-flags\-file="flags.yaml"
.RE

Contents of flags.yaml:

.RS 2m
\- \-\-selector:
    cluster\-labels:
        label_a: value1
        label_b: value2
    percent: 10
\- \-\-selector:
    cluster\-labels:
        label_c: value3
        label_d: value4
    percent: 20
.RE



.SH "NOTES"

This command is currently in ALPHA and may change without notice. If this
command fails with API permission errors despite specifying the right project,
you may be trying to access an API with an invitation\-only early access
whitelist.

