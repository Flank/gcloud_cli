NAME
    gcloud alpha compute backend-services create - create a backend service

SYNOPSIS
    gcloud alpha compute backend-services create BACKEND_SERVICE_NAME
        [--affinity-cookie-ttl=AFFINITY_COOKIE_TTL]
        [--no-cache-key-include-host] [--no-cache-key-include-protocol]
        [--no-cache-key-include-query-string] [--cache-mode=CACHE_MODE]
        [--client-ttl=CLIENT_TTL] [--connection-drain-on-failover]
        [--connection-draining-timeout=CONNECTION_DRAINING_TIMEOUT]
        [--custom-request-header=CUSTOM_REQUEST_HEADER]
        [--custom-response-header=CUSTOM_RESPONSE_HEADER]
        [--default-ttl=DEFAULT_TTL] [--description=DESCRIPTION]
        [--drop-traffic-if-unhealthy] [--[no-]enable-cdn]
        [--[no-]enable-logging] [--failover-ratio=FAILOVER_RATIO]
        [--health-checks=HEALTH_CHECK,[...]]
        [--http-health-checks=HTTP_HEALTH_CHECK,[...]]
        [--https-health-checks=HTTPS_HEALTH_CHECK,[...]]
        [--iap=disabled|enabled,[oauth2-client-id=OAUTH2-CLIENT-ID,
          oauth2-client-secret=OAUTH2-CLIENT-SECRET]]
        [--load-balancing-scheme=LOAD_BALANCING_SCHEME; default="EXTERNAL"]
        [--logging-sample-rate=LOGGING_SAMPLE_RATE] [--max-ttl=MAX_TTL]
        [--network=NETWORK] [--port-name=PORT_NAME] [--protocol=PROTOCOL]
        [--session-affinity=SESSION_AFFINITY]
        [--signed-url-cache-max-age=SIGNED_URL_CACHE_MAX_AGE]
        [--subsetting-policy=SUBSETTING_POLICY; default="NONE"]
        [--timeout=TIMEOUT; default="30s"]
        [--cache-key-query-string-blacklist=[QUERY_STRING,...]
          | --cache-key-query-string-whitelist=QUERY_STRING,[...]]
        [--global | --region=REGION]
        [--global-health-checks | --health-checks-region=HEALTH_CHECKS_REGION]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    (ALPHA) gcloud alpha compute backend-services create creates a backend
    service. A backend service defines how Cloud Load Balancing distributes
    traffic. The backend service configuration contains a set of values, such
    as the protocol used to connect to backends, various distribution and
    session settings, health checks, and timeouts. These settings provide
    fine-grained control over how your load balancer behaves. Most of the
    settings have default values that allow for easy configuration if you need
    to get started quickly.

    After you create a backend service, you add backends by using gcloud
    compute backend-services add-backend.

    For more information about the available settings, see
    https://cloud.google.com/load-balancing/docs/backend-service.

POSITIONAL ARGUMENTS
     BACKEND_SERVICE_NAME
        Name of the backend service to create.

FLAGS
     --affinity-cookie-ttl=AFFINITY_COOKIE_TTL
        If session-affinity is set to "generated_cookie", this flag sets the
        TTL, in seconds, of the resulting cookie. A setting of 0 indicates that
        the cookie should be transient. See $ gcloud topic datetimes for
        information on duration formats.

     --cache-key-include-host
        Enable including host in cache key. If enabled, requests to different
        hosts will be cached separately. Can only be applied for global
        resources. Enabled by default, use --no-cache-key-include-host to
        disable.

     --cache-key-include-protocol
        Enable including protocol in cache key. If enabled, http and https
        requests will be cached separately. Can only be applied for global
        resources. Enabled by default, use --no-cache-key-include-protocol to
        disable.

     --cache-key-include-query-string
        Enable including query string in cache key. If enabled, the query
        string parameters will be included according to
        --cache-key-query-string-whitelist and
        --cache-key-query-string-blacklist. If neither is set, the entire query
        string will be included. If disabled, then the entire query string will
        be excluded. Can only be applied for global resources. Enabled by
        default, use --no-cache-key-include-query-string to disable.

     --cache-mode=CACHE_MODE
        Specifies the cache setting for all responses from this backend.
        CACHE_MODE must be one of:

         CACHE_ALL_STATIC
            Automatically cache static content, including common image formats,
            media (video and audio), web assets (JavaScript and CSS). Requests
            and responses that are marked as uncacheable, as well as dynamic
            content (including HTML), aren't cached.
         FORCE_CACHE_ALL
            Cache all content, ignoring any "private", "no-store" or "no-cache"
            directives in Cache-Control response headers. Warning: this may
            result in Cloud CDN caching private, per-user (user identifiable)
            content. You should only enable this on backends that are not
            serving private or dynamic content, such as storage buckets.
         USE_ORIGIN_HEADERS
            Require the origin to set valid caching headers to cache content.
            Responses without these headers aren't cached at Google's edge, and
            require a full trip to the origin on every request, potentially
            impacting performance and increasing load on the origin server.

     --client-ttl=CLIENT_TTL
        Specifies a separate client (for example, browser client) TTL, separate
        from the TTL for Cloud CDN's edge caches.

        This allows you to set a shorter TTL for browsers/clients, and to have
        those clients revalidate content against Cloud CDN on a more regular
        basis, without requiring revalidation at the origin.

        The value of clientTtl cannot be set to a value greater than that of
        maxTtl, but can be equal.

        Any cacheable response has its max-age/s-maxage directives and/or
        Expires header adjusted down to the client TTL value if necessary.

        The maximum allowed value is 86400s (1 day).

        Omit this field to use the value of defaultTtl as the clientTtl.

        When creating a new backend with CACHE_ALL_STATIC and the field is
        unset, or when switching to that mode and the field is unset, a default
        value of 3600 is used.

        When the cache mode is set to "USE_ORIGIN_HEADERS", you must omit this
        field.

     --connection-drain-on-failover
        Connection drain is enabled by default and on failover or failback
        connections will be drained. If connection drain is disabled, the
        existing connection state will be cleared immediately on a best effort
        basis on failover or failback, all connections will then be served by
        the active pool of instances. Not compatible with the --global flag,
        load balancing scheme must be INTERNAL, and the protocol must be TCP.

     --connection-draining-timeout=CONNECTION_DRAINING_TIMEOUT
        Connection draining timeout to be used during removal of VMs from
        instance groups. This guarantees that for the specified time all
        existing connections to a VM will remain untouched, but no new
        connections will be accepted. Set timeout to zero to disable connection
        draining. Enable feature by specifying a timeout of up to one hour. If
        the flag is omitted API default value (0s) will be used. See $ gcloud
        topic datetimes for information on duration formats.

     --custom-request-header=CUSTOM_REQUEST_HEADER
        Specifies a HTTP Header to be added by your load balancer. This flag
        can be repeated to specify multiple headers. For example:

            $ gcloud alpha compute backend-services create NAME             \
                --custom-request-header "header-name: value"             \
                --custom-request-header "another-header:"

     --custom-response-header=CUSTOM_RESPONSE_HEADER
        Custom headers that the external HTTP(S) load balancer adds to proxied
        responses. For the list of headers, see Creating custom headers
        (https://cloud.google.com/load-balancing/docs/custom-headers).

        Variables are not case-sensitive.

     --default-ttl=DEFAULT_TTL
        Specifies the default TTL for cached content served by this origin for
        responses that do not have an existing valid TTL (max-age or
        s-max-age).

        The default value is 3600s for cache modes that allow a default TTL to
        be defined.

        The value of defaultTtl cannot be set to a value greater than that of
        maxTtl, but can be equal.

        When the cacheMode is set to FORCE_CACHE_ALL, the defaultTtl overwrites
        the TTL set in all responses.

        A TTL of "0" means Always revalidate.

        The maximum allowed value is 31,622,400s (1 year). Infrequently
        accessed objects may be evicted from the cache before the defined TTL.

        When creating a new backend with CACHE_ALL_STATIC or FORCE_CACHE_ALL
        and the field is unset, or when updating an existing backend to use
        these modes and the field is unset, a default value of 3600 is used.
        When the cache mode is set to "USE_ORIGIN_HEADERS", you must omit this
        field.

     --description=DESCRIPTION
        An optional, textual description for the backend service.

     --drop-traffic-if-unhealthy
        Enable dropping of traffic if there are no healthy VMs detected in both
        the primary and backup instance groups. Not compatible with the
        --global flag and load balancing scheme must be INTERNAL.

     --[no-]enable-cdn
        Enable or disable Cloud CDN for the backend service. Only available for
        backend services with --load-balancing-scheme=EXTERNAL that use a
        --protocol of HTTP, HTTPS, or HTTP2. Cloud CDN caches HTTP responses at
        the edge of Google's network. Cloud CDN is disabled by default. Use
        --enable-cdn to enable and --no-enable-cdn to disable.

     --[no-]enable-logging
        The logging options for the load balancer traffic served by this
        backend service. If logging is enabled, logs will be exported to
        Stackdriver. Enabled by default. Use --enable-logging to enable and
        --no-enable-logging to disable.

     --failover-ratio=FAILOVER_RATIO
        If the ratio of the healthy VMs in the primary backend is at or below
        this number, traffic arriving at the load-balanced IP will be directed
        to the failover backend(s). Not compatible with the --global flag.

     --health-checks=HEALTH_CHECK,[...]
        Specifies a list of health check objects for checking the health of the
        backend service. Currently at most one health check can be specified.
        Health checks need not be for the same protocol as that of the backend
        service.

     --http-health-checks=HTTP_HEALTH_CHECK,[...]
        Specifies a list of legacy HTTP health check objects for checking the
        health of the backend service.

        Legacy health checks are not recommended for backend services. It is
        possible to use a legacy health check on a backend service for a
        HTTP(S) load balancer if that backend service uses instance groups. For
        more information, refer to this guide:
        https://cloud.google.com/load-balancing/docs/health-check-concepts#lb_guide.

     --https-health-checks=HTTPS_HEALTH_CHECK,[...]
        Specifies a list of legacy HTTPS health check objects for checking the
        health of the backend service.

        Legacy health checks are not recommended for backend services. It is
        possible to use a legacy health check on a backend service for a
        HTTP(S) load balancer if that backend service uses instance groups. For
        more information, refer to this guide:
        https://cloud.google.com/load-balancing/docs/health-check-concepts#lb_guide.

     --iap=disabled|enabled,[oauth2-client-id=OAUTH2-CLIENT-ID,oauth2-client-secret=OAUTH2-CLIENT-SECRET]
        Configure Identity Aware Proxy (IAP) for external HTTP(S) load
        balancing. You can configure IAP to be enabled or disabled (default).
        If enabled, you can provide values for oauth2-client-id and
        oauth2-client-secret. For example,
        --iap=enabled,oauth2-client-id=foo,oauth2-client-secret=bar turns IAP
        on, and --iap=disabled turns it off. For more information, see
        https://cloud.google.com/iap/.

     --load-balancing-scheme=LOAD_BALANCING_SCHEME; default="EXTERNAL"
        Specifies the load balancer type. Choose EXTERNAL for load balancers
        that receive traffic from external clients. Choose INTERNAL for
        Internal TCP/UDP Load Balancing. Choose INTERNAL_MANAGED for Internal
        HTTP(S) Load Balancing. Choose INTERNAL_SELF_MANAGED for Traffic
        Director. For more information, refer to this guide:
        https://cloud.google.com/load-balancing/docs/choosing-load-balancer.
        LOAD_BALANCING_SCHEME must be one of: INTERNAL, EXTERNAL,
        INTERNAL_SELF_MANAGED, INTERNAL_MANAGED.

     --logging-sample-rate=LOGGING_SAMPLE_RATE
        This field can only be specified if logging is enabled for the backend
        service. The value of the field must be a float in the range [0, 1].
        This configures the sampling rate of requests to the load balancer
        where 1.0 means all logged requests are reported and 0.0 means no
        logged requests are reported. The default value is 1.0.

     --max-ttl=MAX_TTL
        Specifies the maximum allowed TTL for cached content served by this
        origin.

        The default value is 86400 for cache modes that support a max TTL.

        Cache directives that attempt to set a max-age or s-maxage higher than
        this, or an Expires header more than maxTtl seconds in the future, are
        capped at the value of maxTtl, as if it were the value of an s-maxage
        Cache-Control directive.

        A TTL of "0" means Always revalidate.

        The maximum allowed value is 31,622,400s (1 year). Infrequently
        accessed objects may be evicted from the cache before the defined TTL.

        When creating a new backend with CACHE_ALL_STATIC and the field is
        unset, or when updating an existing backend to use these modes and the
        field is unset, a default value of 86400 is used. When the cache mode
        is set to "USE_ORIGIN_HEADERS" or "FORCE_CACHE_ALL", you must omit this
        field.

     --network=NETWORK
        Network that this backend service applies to. It can only be set if the
        load-balancing-scheme is INTERNAL.

     --port-name=PORT_NAME
        The name of a service that has been added to an instance group in this
        backend. Instance group services map a name to a port number which is
        used by the load balancing service. Only one port-name may be added to
        a backend service, and that name must exist as a service on all
        instance groups that are a part of this backend service. The port
        number associated with the name may differ between instances. If you do
        not specify this flag, your instance groups must have a service named
        http configured. See also gcloud compute instance-groups
        set-named-ports --help. The port-name parameter cannot be set if the
        load-balancing-scheme is INTERNAL.

     --protocol=PROTOCOL
        Protocol for incoming requests.

        If the load-balancing-scheme is INTERNAL (internal TCP/UDP load
        balancers), the protocol must be one of: TCP, UDP, ALL.

        If the load-balancing-scheme is INTERNAL_SELF_MANAGED (Traffic
        Director), the protocol must be one of: HTTP, HTTPS, HTTP2, GRPC.

        If the load-balancing-scheme is INTERNAL_MANAGED (internal HTTP(S) load
        balancers), the protocol must be one of: HTTP, HTTPS, HTTP2.

        If the load-balancing-scheme is EXTERNAL (HTTP(S), SSL proxy, or TCP
        proxy load balancers), the protocol must be one of: HTTP, HTTPS, HTTP2,
        SSL, TCP.

     --session-affinity=SESSION_AFFINITY
        The type of session affinity to use. Supports both TCP and UDP.
        SESSION_AFFINITY must be one of:

         CLIENT_IP
            Route requests to instances based on the hash of the client's IP
            address.
         CLIENT_IP_NO_DESTINATION
            Directs a particular client's request to the same backend VM based
            on a hash created on the client's IP address only. This is used in
            L4 ILB as Next-Hop scenarios. It differs from the Client-IP option
            in that Client-IP uses a hash based on both client-IP's address and
            destination address.
         CLIENT_IP_PORT_PROTO
            (Applicable if --load-balancing-scheme is INTERNAL) Connections
            from the same client IP with the same IP protocol and port will go
            to the same backend VM while that VM remains healthy.
         CLIENT_IP_PROTO
            (Applicable if --load-balancing-scheme is INTERNAL) Connections
            from the same client IP with the same IP protocol will go to the
            same backend VM while that VM remains healthy.
         GENERATED_COOKIE
            (Applicable if --load-balancing-scheme is INTERNAL_MANAGED,
            INTERNAL_SELF_MANAGED, or EXTERNAL) If the --load-balancing-scheme
            is EXTERNAL, routes requests to backend VMs or endpoints in a NEG,
            based on the contents of the GCLB cookie set by the load balancer.
            Only applicable when --protocol is HTTP, HTTPS, or HTTP2. If the
            --load-balancing-scheme is INTERNAL_MANAGED or
            INTERNAL_SELF_MANAGED, routes requests to backend VMs or endpoints
            in a NEG, based on the contents of the GCILB cookie set by the
            proxy. (If no cookie is present, the proxy chooses a backend VM or
            endpoint and sends a Set-Cookie response for future requests.) If
            the --load-balancing-scheme is INTERNAL_SELF_MANAGED, routes
            requests to backend VMs or endpoints in a NEG, based on the
            contents of a cookie set by Traffic Director.
         HEADER_FIELD
            (Applicable if --load-balancing-scheme is INTERNAL_MANAGED or
            INTERNAL_SELF_MANAGED) Route requests to backend VMs or endpoints
            in a NEG based on the value of the HTTP header named in the
            --custom-request-header flag. This session affinity is only valid
            if the load balancing locality policy is either RING_HASH or MAGLEV
            and the backend service's consistent hash specifies the name of the
            HTTP header.
         HTTP_COOKIE
            (Applicable if --load-balancing-scheme is INTERNAL_MANAGED or
            INTERNAL_SELF_MANAGED) Route requests to backend VMs or endpoints
            in a NEG, based on an HTTP cookie named in the HTTP_COOKIE flag
            (with the optional --affinity-cookie-ttl flag). If the client has
            not provided the cookie, the proxy generates the cookie and returns
            it to the client in a Set-Cookie header. This session affinity is
            only valid if the load balancing locality policy is either
            RING_HASH or MAGLEV and the backend service's consistent hash
            specifies the HTTP cookie.
         NONE
            Session affinity is disabled.

     --signed-url-cache-max-age=SIGNED_URL_CACHE_MAX_AGE
        The amount of time up to which the response to a signed URL request
        will be cached in the CDN. After this time period, the Signed URL will
        be revalidated before being served. Cloud CDN will internally act as
        though all responses from this backend had a Cache-Control: public,
        max-age=[TTL] header, regardless of any existing Cache-Control header.
        The actual headers served in responses will not be altered. If
        unspecified, the default value is 3600s.

        For example, specifying 12h will cause the responses to signed URL
        requests to be cached in the CDN up to 12 hours. See $ gcloud topic
        datetimes for information on duration formats.

        This flag only affects signed URL requests.

     --subsetting-policy=SUBSETTING_POLICY; default="NONE"
        Enum that specifies the algorithm used. Default value is NONE which
        implies no subsetting is enabled. For Layer 4 Internal Load Balancing,
        only the algorithm CONSISTENT_HASH_SUBSETTING can be specified.
        SUBSETTING_POLICY must be one of: NONE, CONSISTENT_HASH_SUBSETTING.

     --timeout=TIMEOUT; default="30s"
        Applicable to all load balancers except internal TCP/UDP load
        balancers. For internal TCP/UDP load balancers (load-balancing-scheme
        INTERNAL), timeout is ignored.

        If the protocol is HTTP, HTTPS, or HTTP2, timeout is a request/response
        timeout for HTTP(S) traffic, meaning the amount of time that the load
        balancer waits for a backend to return a full response to a request. If
        WebSockets traffic is supported, the timeout parameter sets the maximum
        amount of time that a WebSocket can be open (idle or not).

        For example, for HTTP, HTTPS, or HTTP2 traffic, specifying a timeout of
        10s means that backends have 10 seconds to respond to the load
        balancer's requests. The load balancer retries the HTTP GET request one
        time if the backend closes the connection or times out before sending
        response headers to the load balancer. If the backend sends response
        headers or if the request sent to the backend is not an HTTP GET
        request, the load balancer does not retry. If the backend does not
        reply at all, the load balancer returns a 502 Bad Gateway error to the
        client.

        If the protocol is SSL or TCP, timeout is an idle timeout.

     At most one of these may be specified:

       --cache-key-query-string-blacklist=[QUERY_STRING,...]
          Specifies a comma separated list of query string parameters to
          exclude in cache keys. All other parameters will be included. Either
          specify --cache-key-query-string-whitelist or
          --cache-key-query-string-blacklist, not both. '&' and '=' will be
          percent encoded and not treated as delimiters. Can only be applied
          for global resources.

       --cache-key-query-string-whitelist=QUERY_STRING,[...]
          Specifies a comma separated list of query string parameters to
          include in cache keys. All other parameters will be excluded. Either
          specify --cache-key-query-string-whitelist or
          --cache-key-query-string-blacklist, not both. '&' and '=' will be
          percent encoded and not treated as delimiters. Can only be applied
          for global resources.

     At most one of these may be specified:

       --global
          If set, the backend service is global.

       --region=REGION
          Region of the backend service to create. Overrides the default
          compute/region property value for this command invocation.

     At most one of these may be specified:

       --global-health-checks
          If set, the health checks are global.

       --health-checks-region=HEALTH_CHECKS_REGION
          Region of the health checks to operate on. If not specified, you may
          be prompted to select a region.

          To avoid prompting when this flag is omitted, you can set the
          compute/region property:

              $ gcloud config set compute/region REGION

          A list of regions can be fetched by running:

              $ gcloud compute regions list

          To unset the property, run:

              $ gcloud config unset compute/region

          Alternatively, the region can be stored in the environment variable
          CLOUDSDK_COMPUTE_REGION.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --account, --billing-project,
    --configuration, --flags-file, --flatten, --format, --help,
    --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

NOTES
    This command is currently in ALPHA and may change without notice. If this
    command fails with API permission errors despite specifying the right
    project, you may be trying to access an API with an invitation-only early
    access allowlist. These variants are also available:

        $ gcloud compute backend-services create
        $ gcloud beta compute backend-services create

