NAME
    gcloud auth application-default login - acquire new user credentials to use
        for Application Default Credentials

SYNOPSIS
    gcloud auth application-default login [--add-quota-project]
        [--client-id-file=CLIENT_ID_FILE] [--no-launch-browser]
        [--scopes=SCOPES,[SCOPES,...]] [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    Obtains user access credentials via a web flow and puts them in the
    well-known location for Application Default Credentials (ADC).

    This command is useful when you are developing code that would normally use
    a service account but need to run the code in a local development
    environment where it's easier to provide user credentials. The credentials
    will apply to all API calls that make use of the Application Default
    Credentials client library. Do not set the GOOGLE_APPLICATION_CREDENTIALS
    environment variable if you want to use the credentials generated by this
    command in your local development. This command tries to find a quota
    project from gcloud's context and write it to ADC so that Google client
    libraries can use it for billing and quota. Alternatively, you can use the
    --client-id-file flag. In this case, the project owning the client id will
    be used for billing and quota. You can create the client-id-file at
    https://console.cloud.google.com/apis/credentials.

    This command has no effect on the user account(s) set up by the gcloud auth
    login command.

    Any credentials previously generated by gcloud auth application-default
    login will be overwritten.

    Troubleshooting tip: If you encounter permission issues after running this
    command, you will require 'Owner' or 'Editor' permissions for the current
    project (run gcloud config get-value project to verify your current
    project). Otherwise, you'll need the services.serviceusages.usage IAM
    permission. If you cannot obtain either of these permissions, rerun this
    command without specifying --add-quota-project.

FLAGS
     --add-quota-project
        Read the project from the context of the gcloud command-line tool and
        write it to application default credentials as the quota project.

     --client-id-file=CLIENT_ID_FILE
        A file containing your own client id to use to login. If
        --client-id-file is specified, the quota project will not be written to
        ADC.

     --launch-browser
        Launch a browser for authorization. If not enabled or DISPLAY variable
        is not set, prints a URL to standard output to be copied. Enabled by
        default, use --no-launch-browser to disable.

     --scopes=SCOPES,[SCOPES,...]
        The names of the scopes to authorize for. By default
        https://www.googleapis.com/auth/userinfo.email,
        https://www.googleapis.com/auth/cloud-platform scopes are used. The
        list of possible scopes can be found at:
        https://developers.google.com/identity/protocols/googlescopes.

GCLOUD WIDE FLAGS
    These flags are available to all commands: --account, --billing-project,
    --configuration, --flags-file, --flatten, --format, --help,
    --impersonate-service-account, --log-http, --project, --quiet,
    --trace-token, --user-output-enabled, --verbosity.

    Run $ gcloud help for details.

EXAMPLES
    If you want your local application to temporarily use your own user
    credentials for API access, run:

        $ gcloud auth application-default login

    If you'd like to login by passing in a file containing your own client id,
    run:

        $ gcloud auth application-default login \
            --client-id-file=clientid.json

NOTES
    This variant is also available:

        $ gcloud beta auth application-default login

