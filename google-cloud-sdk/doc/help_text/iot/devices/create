NAME
    gcloud iot devices create - create a new device

SYNOPSIS
    gcloud iot devices create (DEVICE : --region=REGION --registry=REGISTRY)
        [--blocked] [--metadata=[KEY=VALUE,...]]
        [--metadata-from-file=[KEY=PATH,...]]
        [--public-key=[path=PATH,
          type=TYPE,[expiration-time=EXPIRATION-TIME],...]]
        [GCLOUD_WIDE_FLAG ...]

DESCRIPTION
    Create a new device.

POSITIONAL ARGUMENTS
     Device resource - The device to create. The arguments in this group can be
     used to specify the attributes of this resource. (NOTE) Some attributes
     are not given arguments in this group but can be set in other ways. To set
     the [project] attribute: provide the flag [device] on the command line
     with a fully specified name; provide the flag [--project] on the command
     line; set the property [core/project]. This must be specified.

       DEVICE
          The ID of the device or a fully qualified identifier for the device.
          This positional must be specified if any of the other arguments in
          this group are specified.

       --region=REGION
          The Cloud region for the device.

       --registry=REGISTRY
          The device registry for the device.

FLAGS
     --blocked
        If blocked, connections from this device will fail.

        Can be used to temporarily prevent the device from connecting if, for
        example, the sensor is generating bad data and needs maintenance.

        Connections to device is not blocked by default.

     --metadata=[KEY=VALUE,...]
        The metadata key/value pairs assigned to devices. This metadata is not
        interpreted or indexed by Cloud IoT Core. It can be used to add
        contextual information for the device.

        Keys should only contain the following characters [a-zA-Z0-9-_] and be
        fewer than 128 bytes in length. Values are free-form strings. Each
        value must be fewer than or equal to 32 KB in size.

        The total size of all keys and values must be less than 256 KB, and the
        maximum number of key-value pairs is 500.

     --metadata-from-file=[KEY=PATH,...]
        Same as --metadata, but the metadata values will be read from the file
        specified by path.

     --public-key=[path=PATH,type=TYPE,[expiration-time=EXPIRATION-TIME],...]
        Specify a public key.

        Supports four key types:

        * rsa-x509-pem: As RSA_PEM, but wrapped in an X.509v3 certificate
          (RFC5280 (https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64,
          and wrapped by -----BEGIN CERTIFICATE----- and -----END
          CERTIFICATE-----.
        * rsa-pem: An RSA public key encoded in base64, and wrapped by
          -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY-----. This can be
          used to verify RS256 signatures in JWT tokens (RFC7518
          (https://www.ietf.org/rfc/rfc7518.txt)).
        * rs256: Deprecated name for rsa-x509-pem
        * es256-x509-pem: (As ES256_PEM, but wrapped in an X.509v3
          certificate ([RFC5280]( https://www.ietf.org/rfc/rfc5280.txt)),
          encoded in base64, and wrapped by -----BEGIN CERTIFICATE----- and
          -----END CERTIFICATE-----.
        * es256-pem: Public key for the ECDSA algorithm using P-256 and
          SHA-256, encoded in base64, and wrapped by -----BEGIN PUBLIC KEY-----
          and -----END PUBLIC KEY-----. This can be used to verify JWT tokens
          with the ES256 algorithm (RFC7518
          (https://www.ietf.org/rfc/rfc7518.txt)). This curve is defined in
          OpenSSL (https://www.openssl.org/) as the prime256v1 curve.
        * es256: Deprecated nmame for es256-pem

    The key specification is given via the following sub-arguments:

      o path: Required. The path on disk to the file containing the key.
      o type: Required. One of [es256, es256-pem, es256-x509-pem, rs256,
        rsa-pem, rsa-x509-pem]. The type of the key.
      o expiration-time: Optional. The expiration time for the key. See $
        gcloud topic datetimes for information on time formats.

    For example:

        --public-key \
            path=/path/to/id_rsa.pem,type=RSA_PEM,expiration-time=2017-01-01T00:00-05

    This flag may be provide multiple times to provide multiple keys (maximum
    3).

GCLOUD WIDE FLAGS
    These flags are available to all commands: --account, --configuration,
    --flatten, --format, --help, --log-http, --project, --quiet, --trace-token,
    --user-output-enabled, --verbosity. Run $ gcloud help for details.

NOTES
    These variants are also available:

        $ gcloud alpha iot devices create
        $ gcloud beta iot devices create

