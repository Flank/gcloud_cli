# Copyright 2017 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: command
description: The specification for a full calliope command

definitions:
  python_hook:
    type: string
    # Examples:
    #   googlecloudsdk.module:classname
    #   googlecloudsdk.module:class.attribute
    #   googlecloudsdk.module:class.function:foo=bar,baz=stuff
    pattern: "\\w+(\\.\\w+)+:\\w+(\\.\\w+)*(:\\w+=\\w+(,\\w+=\\w+)*)?"
  yaml_reference:
    type: string
    # Examples:
    #   googlecloudsdk.module:attribute
    #   googlecloudsdk.module:attribute.attribute
    pattern: "\\w+(\\.\\w+)+:\\w+(\\.\\w+)*"

  attribute:
    type: string
    # Examples: a, a.b, a.c.b
    pattern: "\\w+(\\.\\w+)*"

  property:
    type: string
    # Examples: core/project, compute/zone
    pattern: "\\w+/\\w+"

  argparse_type:
    # Something to be used as the type argument for an argparse argument.
    oneOf:
      # One of the builtin Python types.
      - enum: [ str, int, long, float, bool ]
      # The module path to a function used as the 'type' for the argument.
      # The function takes a single parameter which is the parsed string value
      # of the argument and returns the converted parsed value.
      - $ref: "#/definitions/python_hook"

  choices:
    # A list of valid choices for an argument.
    type: array
    items:
      type: object
      additionalProperties: false
      properties:
        # The choice as it appears on the command line.
        arg_value: { type: [ string, number, boolean ] }
        # The string representation of the API enum value that will be used
        # when this choice is selected.
        enum_value: { type: string }
        # The help text to show next to the choice on the MAN page.
        help_text: { type: string }

  fallthrough:
    required: [ hook, hint ]
    additionalProperties: false
    properties:
      # A zero-argument Python function that can provide a fallback value for
      # the attribute.
      hook: { $ref: "#/definitions/python_hook" }
      # Text to display to users if no fallthroughs are set (should be
      # imperative, to follow "The attribute can be set in the following ways").
      hint: { type: string }

  resource_attribute:
    # An individual resource arg attribute.
    required: [ parameter_name, attribute_name, help ]
    additionalProperties: false
    properties:
      # The API parameter name that this attribute maps to.
      parameter_name: { type: string }
      # The name as it should appear on the command line.
      attribute_name: { type: string }
      # The help text for this attribute.
      help: { type: string }
      # A property to act as the fallthrough for this attribute when it is not
      # provided on the command line.
      property: { $ref: "#definitions/property" }
      # A list of Python hooks that will act as fallthroughs if the attribute is
      # not provided on the command line.
      fallthroughs:
        type: array
        items: { $ref: "#/definitions/fallthrough" }
      # The ID field of the return value in the response for completions.
      completion_id_field: { type: string }
      # Field names to use as static field values in any request to
      # complete this resource.
      completion_request_params:
        type: array
        items:
         type: object
         additionalProperties: false
         properties:
           fieldName: { type: string }
           value: { type: string }


  argument:
    oneOf:
      - $ref: "#/definitions/arg"
      - $ref: "#/definitions/arg_group"

  arg:
    required: [ help_text ]
    additionalProperties: false
    properties:
      # The name of the API field the value of this argument goes into.
      # At least one of [api_field, arg_name] must be given.
      api_field: { type: string }
      # The help text for this individual flag.
      help_text: { type: string }
      # The name of the argument as it should appear in the CLI. If
      # not given it will match the API field name. This does not
      # include '--' even if it will be a flag.
      # At least one of [api_field, arg_name] must be given.
      arg_name: { type: string }
      # The module path to a class that implements remote completion
      # for this argument.
      completer: { $ref: "#/definitions/python_hook" }
      # True if this should be forced to be a positional argument
      # instead of a flag.
      is_positional: { type: boolean }
      # The argparse type to use for this argument. See inline options for
      # this value.
      type:
        oneOf:
          # A builtin type or hook to a type function.
          - $ref: "#/definitions/argparse_type"
          # First class support for making this an ArgDict.
          - type: object
            additionalProperties: false
            properties:
              arg_dict:
                type: object
                additionalProperties: false
                required: [ spec ]
                properties:
                  # Set to True to make the ArgDict correspond to a repeated
                  # key/value pair. For this to work, the spec must contain
                  # exactly two items. If False, the keys in the dict will be
                  # the arg names, and the values will be the values for those
                  # fields. The arg is repeated by specifying the flag multiple
                  # times.
                  flatten: { type: boolean }
                  spec:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      required: [ api_field ]
                      properties:
                        api_field: { type: string }
                        # Only applicable for non-flat dicts.
                        arg_name: { type: string }
                        type: { $ref: "#/definitions/argparse_type" }
                        # Only applicable for non-flat dicts.
                        required: { type: boolean }
                        choices: { $ref: "#/definitions/choices" }
      # The argparse action to use for this argument. See inline options for
      # this value.
      action:
        oneOf:
          # One of the builtin argparse actions.
          - enum: [ store, store_true ]
          # The module path to a class that implements argparse's Action class.
          - $ref: "#/definitions/python_hook"
          # Mark this flag as being deprecated. All the sub elements here
          # are passed as kwargs to the calliope.actions.DeprecationAction
          # action.
          - type: object
            additionalProperties: false
            properties:
              deprecated:
                type: object
                patternProperties:
                  .*: { type: string }
      # Can be set to False if you want to accept a single value even though the
      # API field is repeated. If the API field is not repeated, this attribute
      # has no effect.
      repeated: { type: boolean }
      # The metavar for the generated argument. This will be generated
      # automatically if not provided.
      metavar: { type: string }
      # Overrides the choices that are generated for the argument.
      choices: { $ref: "#/definitions/choices" }
      # The default value of the argument when not provided. Mutually exclusive
      # with fallback.
      default: { type: [ string, number, boolean, array ] }
      # The module path to a function to call (with no arguments) if no value is
      # provided; the result of this function will be used for this argument
      # (like default, but with a computed value). Mutually exclusive with
      # default.
      fallback: { $ref: "#/definitions/python_hook" }
      # The module path to a function to process the parsed value
      # before inserting it into the request message. It takes a
      # single value which is the parsed argument's value and returns
      # the value that should be inserted into the request.
      processor: { $ref: "#/definitions/python_hook" }
      # Whether the flag is required or not.
      required: { type: boolean }
      # Whether the flag is hidden or not.
      hidden: { type: boolean }

  arg_group:
    type: object
    additionalProperties: false
    properties:
      group:
        required: [ params ]
        type: object
        additionalProperties: false
        properties:
          # The help text for the group.
          help_text: { type: string }
          # Whether the group is required or not.
          required: { type: boolean }
          # Whether the group is mutually exclusive or not.
          mutex: { type: boolean }
          # Whether the group is hidden or not.
          hidden: { type: boolean }
          # The group arguments.
          params:
            type: array
            items: { $ref: "#/definitions/argument" }
            minItems: 1


type: object
additionalProperties: false
required: [ request, help_text, arguments ]
properties:

  # Corresponds to the Hidden decorator for command classes.
  is_hidden: { type: boolean }

  # Corresponds to the ReleaseTracks decorator for command classes.
  release_tracks:
    type: array
    items: { enum: [ ALPHA, BETA, GA ] }

  # The type of command to generate. This is inferred based on the name
  # of the command.
  command_type: { enum: [ DESCRIBE, LIST, DELETE, GENERIC ] }

  # Corresponds to the detailed_help attribute on command classes.
  help_text:
    type: object
    additionalProperties: false
    required: [ brief, DESCRIPTION ]
    patternProperties:
      brief: { type: string }
      description: { type: string }
      examples: { type: string }
      .*: { type: string }

  # Attributes about the API request the command will make.
  request:
    description: Describes information about the API that this command calls
    type: object
    additionalProperties: false
    required: [ collection ]
    oneOf:
      - required: [ modify_request_hooks ]
      - required: [ create_request_hook ]
      - required: [ issue_request_hook ]
      - allOf:
        - not: { required: [modify_request_hooks]}
        - not: { required: [create_request_hook]}
        - not: { required: [issue_request_hook]}
    properties:
      # The full collection name of the resource the command operates on.
      collection: { type: string }
      # The API version to use, defaults to API set as gcloud default.
      api_version: { type: string }
      # The name of the method to call to perform the operation.
      method: { type: string }
      # A mapping of method parameter to resource reference field (or '', to use
      # the full method name) for references or APIs that use non-standard
      # naming.
      resource_method_params:
        type: object
        patternProperties:
          .*: { type: string }
      # A mapping of request field names to static values to insert into the
      # request. Specifying simple values here accomplishes the same as a
      # a custom request generator, but is simpler.
      static_fields:
        type: object
        patternProperties:
          .*: { }
      # The module path to a function to call to modify the API request
      # before it is invoked. All registered arguments will be processed
      # into the request, before this is called. This is a function
      # that takes 3 arguments: a resource ref to the parsed resource,
      # the parsed args namespace, and the created request. It must return
      # an apitools request message that will be passed to the API method
      # defined in this section.
      modify_request_hooks:
        type: array
        items: { $ref: "#/definitions/python_hook" }
      # The module path to a function to call to create the API request
      # rather than having it done automatically. This is a function
      # that takes 2 arguments: a resource ref to the parsed resource, and
      # the parsed args namespace. It must return an apitools request
      # message that will be passed to the API method defined in this
      # section.
      create_request_hook: { $ref: "#/definitions/python_hook" }
      # The module path to a function to call to issue an API request
      # rather than having it done automatically. This is a function
      # that takes 2 arguments: a resource ref to the parsed resource, and
      # the parsed args namespace. It should create a request, make the
      # API call, and return the response.
      issue_request_hook: { $ref: "#/definitions/python_hook" }

  # Configuration for handling the API response.
  response:
    type: object
    additionalProperties: false
    properties:
      # The field in the response that is the id of the resource (just the
      # name, not the relative name or URI). This is used to construct a
      # URI for resources out of the result of a list command. If not
      # provided, there won't be a --uri flag on the list command.
      id_field: { type: string }
      # The attribute of the API response to return (instead of the entire
      # response.
      result_attribute: { $ref: "#/definitions/attribute" }
      # If given, the response will be searched for error information and an
      # exception raised if found. This is useful for batch request methods
      # that return 200 even though something may have failed.
      error:
        type: object
        additionalProperties: false
        properties:
          # The dotted path of the field whose presence indicates that an
          # error has occured. This is 'error' by default if the error section
          # is declared.
          field: { $ref: "#/definitions/attribute" }
          # If the error message is found, extract the error code from this
          # field within that message.
          code: { $ref: "#/definitions/attribute" }
          # If the error message is found, extract the error message from this
          # field within that message.
          message: { $ref: "#/definitions/attribute" }

  # If present, indicates that this API method uses operations and the --async
  # flag will be set up.
  async:
    description: Describes how to poll and report the result of the operation
    type: object
    additionalProperties: false
    required: [ collection ]
    properties:
      # The full collection name of the operation collection for this API.
      collection: { type: string }
      # The API version to use, defaults to API version specified in the request
      # section.
      api_version: { type: string }
      # The API method to call to get the operation ('get' by default).
      method: { type: string }
      # The field in the operation message that corresponds to the operation's
      # full name ('name' by default). Not used by Wait commands.
      response_name_field: { type: string }
      # Override whether the command should get the resulting resource after
      # the operation is done, or just return the operation result. This is
      # True by default (except for Delete and Wait commands).
      extract_resource_result: { type: boolean }
      # The API method to call to get the updated state of the resource being
      # operated on ('get' by default).
      resource_get_method: { type: string }
      # A mapping of method parameter to operation reference field for
      # references or APIs that use non-standard naming.
      operation_get_method_params:
        type: object
        patternProperties:
          .*: { type: string }
      # The attribute of the result to return from polling. If
      # extract_resource_result is False, this is an attribute on the
      # operation, if True it is on the resource itself.
      result_attribute: { $ref: "#/definitions/attribute" }
      state:
        type: object
        additionalProperties: false
        required: [ field, success_values ]
        properties:
          # The field to check for status. Polling continues until it matches
          # something in success_values or error_values. ('done' by default).
          field: { type: string }
          # Values that indicate that the operation is done and finished
          # successfully. ('True' by default).
          success_values: { type: array, items: { type: [ boolean, string ] } }
          # Values that indicate that the operation is done but finished
          # unsuccessfully. (Nothing by default).
          error_values: { type: array, items: { type: [ boolean, string ] } }
      error:
        type: object
        additionalProperties: false
        required: [ field ]
        properties:
          # If this field is set when the operation completes, it will be
          # used to generate an error message and polling stops. ('error' by
          # default).
          field: { type: string }

  # Enumerates the non-resource API fields that arguments should be generated
  # for.
  arguments:
    type: object
    additionalProperties: false
    properties:
      # The module path to a function to call to generate extra arguments
      # that for whatever reason cannot be defined here. It is a function that
      # takes no arguments and returns a list of calliope.base.Action
      # objects that will be added to the parser. These arguments will not
      # be processed automatically so you will need to implement
      # request.modify_request_hooks to insert something into the request based
      # on these arguments.
      additional_arguments_hook: { $ref: "#/definitions/python_hook" }
      # This section declares how to generate the arguments and flags that
      # correspond to the resource being operated on by this command.
      resource:
        description: Describes how to generate the resource arg and its flags
        type: object
        additionalProperties: false
        required: [ help_text, spec ]
        properties:
          # The help text for the overall resource arg group.
          help_text: { type: string }
          # Set to False to force the anchor resource argument to be a flag
          # even though it would normally be a positional. This should normally
          # not be required for well formed API methods.
          is_positional: { type: boolean }
          # Set to True if the resource spec is for the parent of the request
          # collection instead of for the collection itself.  This allows for
          # create commands that do not require a name for the new resource.
          is_parent_resource: { type: boolean }
          # List of resource arg attributes to not generate flags for.
          removed_flags:
            type: array
            items: { type: string }
          # The resource arg specification itself. This corresponds to the
          # ResourceSpec and ResourceParameterAttributeConfig objects and does
          # not include anything that would go in a presentation spec. It is
          # expected that this entire section be imported from a resources.yaml
          # file in command_lib.
          spec:
            type: object
            additionalProperties: false
            required: [ name, collection, attributes ]
            properties:
              # The name of the resource argument, used for messaging.
              name: { type: string }
              # The full collection name of the resource argument.
              collection: { type: string }
              # The api version this spec refers to. If empty, it applies to any
              # version.
              api_version: { type: string }
              # The field in the create request that should hold the name of the
              # resource being created (since create requests don't have the
              # resource id as an API parameter.
              request_id_field: { $ref: "#/definitions/attribute" }
              # The set of attributes that map to the API parameters for this
              # resources collection.
              attributes:
                type: array
                items: { $ref: "#/definitions/resource_attribute" }
              # If False, allows the resource to create automatic completers for
              # each argument. True by default.
              disable_auto_completers: { type: boolean }
      # Enumerates the API fields that need to be set and information
      # about each argument to generate.
      params:
        type: array
        items: { $ref: "#/definitions/argument" }

  # Information about how to collect input from the user.
  input:
    type: object
    additionalProperties: false
    properties:
      # An optional confirmation prompt to show before actually performing the
      # operation. The string may have named format substiutions in it which
      # will be replaced with attributes of the resource being operated on.
      confirmation_prompt: { type: string }

  # Information about how to show output to the user.
  output:
    type: object
    additionalProperties: false
    properties:
      # Corresponds tothe default output format setting on the command.
      format: { type: string }
