{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "cloudidentity:v1beta1",
  "name": "cloudidentity",
  "canonicalName": "Cloud Identity",
  "version": "v1beta1",
  "revision": "0",
  "title": "Cloud Identity API",
  "description": "API for provisioning and managing identity resources.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/identity/",
  "protocol": "rest",
  "rootUrl": "https://cloudidentity.googleapis.com/",
  "mtlsRootUrl": "https://cloudidentity.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://cloudidentity.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-identity.groups": {
          "description": "See, change, create, and delete any of the Cloud Identity Groups that you can access, including the members of each group"
        },
        "https://www.googleapis.com/auth/cloud-identity.groups.readonly": {
          "description": "See any Cloud Identity Groups that you can access, including group members and their emails"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "Group": {
      "id": "Group",
      "description": "A group within the Cloud Identity Groups API.\n\nA `Group` is a collection of entities, where each entity is either a user,\nanother group or a service account.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Group`.\n\nShall be of the form `groups\/{group_id}`.",
          "type": "string"
        },
        "groupKey": {
          "description": "Required. Immutable. The `EntityKey` of the `Group`.",
          "$ref": "EntityKey"
        },
        "additionalGroupKeys": {
          "description": "Additional entity key aliases for a Group.",
          "type": "array",
          "items": {
            "$ref": "EntityKey"
          }
        },
        "parent": {
          "description": "Required. Immutable. The resource name of the entity under which this `Group` resides in the\nCloud Identity resource hierarchy.\n\nMust be of the form `identitysources\/{identity_source_id}` for external-\nidentity-mapped groups or `customers\/{customer_id}` for Google Groups.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the `Group`.",
          "type": "string"
        },
        "description": {
          "description": "An extended description to help users determine the purpose of a `Group`.\n\nMust not be longer than 4,096 characters.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time when the `Group` was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The time when the `Group` was last updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "Required. The labels that apply to the `Group`.\n\nMust not contain more than one entry. Must contain the entry\n`'cloudidentity.googleapis.com\/groups.discussion_forum': ''` if the `Group`\nis a Google Group or `'system\/groups\/external': ''` if the `Group` is an\nexternal-identity-mapped group.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dynamicGroupMetadata": {
          "description": "Optional. Dynamic group metadata like queries and status.",
          "$ref": "DynamicGroupMetadata"
        }
      }
    },
    "EntityKey": {
      "id": "EntityKey",
      "description": "A unique identifier for an entity in the Cloud Identity Groups API.\n\nAn entity can represent either a group with an optional `namespace` or a user\nwithout a `namespace`. The combination of `id` and `namespace` must be\nunique; however, the same `id` can be used with different `namespace`s.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the entity.\n\nFor Google-managed entities, the `id` must be the email address of an\nexisting group or user.\n\nFor external-identity-mapped entities, the `id` must be a string conforming\nto the Identity Source's requirements.\n\nMust be unique within a `namespace`.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace in which the entity exists.\n\nIf not specified, the `EntityKey` represents a Google-managed entity such\nas a Google user or a Google Group.\n\nIf specified, the `EntityKey` represents an external-identity-mapped group.\nThe namespace must correspond to an identity source created in Admin\nConsole and must be in the form of `identitysources\/{identity_source_id}.",
          "type": "string"
        }
      }
    },
    "DynamicGroupMetadata": {
      "id": "DynamicGroupMetadata",
      "description": "Dynamic group metadata like queries and status.",
      "type": "object",
      "properties": {
        "queries": {
          "description": "Memberships will be the union of all queries.\nOnly one entry with USER resource is currently supported.",
          "type": "array",
          "items": {
            "$ref": "DynamicGroupQuery"
          }
        },
        "status": {
          "description": "Output only. Status of the dynamic group.",
          "$ref": "DynamicGroupStatus"
        }
      }
    },
    "DynamicGroupQuery": {
      "id": "DynamicGroupQuery",
      "description": "Defines a query on a resource.",
      "type": "object",
      "properties": {
        "resourceType": {
          "enumDescriptions": [
            "Default value (not valid)",
            "For queries on User"
          ],
          "type": "string",
          "enum": [
            "RESOURCE_TYPE_UNSPECIFIED",
            "USER"
          ]
        },
        "query": {
          "description": "Query that determines the memberships of the dynamic group.\n\nExamples:\nAll users with at least one `organizations.department` of engineering.\n\n`user.organizations.exists(org, org.department=='engineering')`\n\nAll users with at least one location that has area of foo and building_id\nof bar.\n\n`user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`",
          "type": "string"
        }
      }
    },
    "DynamicGroupStatus": {
      "id": "DynamicGroupStatus",
      "description": "The current status of a dynamic group along with timestamp.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the dynamic group.",
          "enumDescriptions": [
            "Default.",
            "The dynamic group is up-to-date.",
            "The dynamic group has just been created and memberships are being\nupdated."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNSPECIFIED",
            "UP_TO_DATE",
            "UPDATING_MEMBERSHIPS"
          ]
        },
        "statusTime": {
          "description": "The latest time at which the dynamic group is guaranteed to be in the given\nstatus. For example, if status is: UP_TO_DATE - The latest time at which\nthis dynamic group was confirmed to be up to date.\nUPDATING_MEMBERSHIPS - The time at which dynamic group was created.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`\/`Create`\/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "LookupGroupNameResponse": {
      "id": "LookupGroupNameResponse",
      "description": "The response message for GroupsService.LookupGroupName.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe looked-up `Group`.",
          "type": "string"
        }
      }
    },
    "SearchGroupsResponse": {
      "id": "SearchGroupsResponse",
      "description": "The response message for GroupsService.SearchGroups.",
      "type": "object",
      "properties": {
        "groups": {
          "description": "The `Group`s that match the search query.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "nextPageToken": {
          "description": "A continuation token to retrieve the next page of results, or empty if\nthere are no more results available.",
          "type": "string"
        }
      }
    },
    "ListGroupsResponse": {
      "id": "ListGroupsResponse",
      "description": "The response message for GroupsService.ListGroups.",
      "type": "object",
      "properties": {
        "groups": {
          "description": "The `Group`s under the specified `parent`.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "nextPageToken": {
          "description": "A continuation token to retrieve the next page of results, or empty if\nthere are no more results available.",
          "type": "string"
        }
      }
    },
    "Membership": {
      "id": "Membership",
      "description": "A membership within the Cloud Identity Groups API.\n\nA `Membership` defines a relationship between a `Group` and an entity\nbelonging to that `Group`, referred to as a \"member\".",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Membership`.\n\nShall be of the form `groups\/{group_id}\/memberships\/{membership_id}`.",
          "type": "string"
        },
        "memberKey": {
          "description": "Immutable. The `EntityKey` of the member.\n\nEither `member_key` or `preferred_member_key` must be set when calling\nMembershipsService.CreateMembership but not both; both shall be set\nwhen returned.",
          "$ref": "EntityKey"
        },
        "createTime": {
          "description": "Output only. The time when the `Membership` was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The time when the `Membership` was last updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "roles": {
          "description": "The `MembershipRole`s that apply to the `Membership`.\n\nIf unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`.\n\nMust not contain duplicate `MembershipRole`s with the same `name`.",
          "type": "array",
          "items": {
            "$ref": "MembershipRole"
          }
        },
        "preferredMemberKey": {
          "description": "Required. Immutable. The `EntityKey` of the member.\n\nEither `member_key` or `preferred_member_key` must be set when calling\nMembershipsService.CreateMembership but not both; both shall be set\nwhen returned.",
          "$ref": "EntityKey"
        },
        "type": {
          "description": "Output only. The type of the membership.",
          "enumDescriptions": [
            "Default. Should not be used.",
            "Represents user type.",
            "Represents service account type.",
            "Represents group type.",
            "Represents other type."
          ],
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "USER",
            "SERVICE_ACCOUNT",
            "GROUP",
            "OTHER"
          ]
        }
      }
    },
    "MembershipRole": {
      "id": "MembershipRole",
      "description": "A membership role within the Cloud Identity Groups API.\n\nA `MembershipRole` defines the privileges granted to a `Membership`.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the `MembershipRole`.\n\nMust be one of `OWNER`, `MANAGER`, `MEMBER`.",
          "type": "string"
        },
        "expiryDetail": {
          "description": "The expiry details of the `MembershipRole`.\n\nExpiry details are only supported for `MEMBER` `MembershipRoles`.\n\nMay be set if `name` is `MEMBER`. Must not be set if `name` is any other\nvalue.",
          "$ref": "ExpiryDetail"
        }
      }
    },
    "ExpiryDetail": {
      "id": "ExpiryDetail",
      "description": "The `MembershipRole` expiry details.",
      "type": "object",
      "properties": {
        "expireTime": {
          "description": "The time at which the `MembershipRole` will expire.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "LookupMembershipNameResponse": {
      "id": "LookupMembershipNameResponse",
      "description": "The response message for MembershipsService.LookupMembershipName.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe looked-up `Membership`.\n\nMust be of the form `groups\/{group_id}\/memberships\/{membership_id}`.",
          "type": "string"
        }
      }
    },
    "ListMembershipsResponse": {
      "id": "ListMembershipsResponse",
      "description": "The response message for MembershipsService.ListMemberships.",
      "type": "object",
      "properties": {
        "memberships": {
          "description": "The `Membership`s under the specified `parent`.",
          "type": "array",
          "items": {
            "$ref": "Membership"
          }
        },
        "nextPageToken": {
          "description": "A continuation token to retrieve the next page of results, or empty if\nthere are no more results available.",
          "type": "string"
        }
      }
    },
    "ModifyMembershipRolesRequest": {
      "id": "ModifyMembershipRolesRequest",
      "description": "The request message for MembershipsService.ModifyMembershipRoles.",
      "type": "object",
      "properties": {
        "addRoles": {
          "description": "The `MembershipRole`s to be added.\n\nAdding or removing roles in the same request as updating roles is not\nsupported.\n\nMust not be set if `update_roles_params` is set.",
          "type": "array",
          "items": {
            "$ref": "MembershipRole"
          }
        },
        "removeRoles": {
          "description": "The `name`s of the `MembershipRole`s to be removed.\n\nAdding or removing roles in the same request as updating roles is not\nsupported.\n\nIt is not possible to remove the `MEMBER` `MembershipRole`. If you wish to\ndelete a `Membership`, call MembershipsService.DeleteMembership\ninstead.\n\nMust not contain `MEMBER`. Must not be set if `update_roles_params` is set.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updateRolesParams": {
          "description": "The `MembershipRole`s to be updated.\n\nUpdating roles in the same request as adding or removing roles is not\nsupported.\n\nMust not be set if either `add_roles` or `remove_roles` is set.",
          "type": "array",
          "items": {
            "$ref": "UpdateMembershipRolesParams"
          }
        }
      }
    },
    "UpdateMembershipRolesParams": {
      "id": "UpdateMembershipRolesParams",
      "description": "The details of an update to a `MembershipRole`.",
      "type": "object",
      "properties": {
        "fieldMask": {
          "description": "The fully-qualified names of fields to update.\n\nMay only contain the field `expiry_detail`.",
          "type": "string",
          "format": "google-fieldmask"
        },
        "membershipRole": {
          "description": "The `MembershipRole`s to be updated.\n\nOnly `MEMBER` `MembershipRoles` can currently be updated.\n\nMay only contain a `MembershipRole` with `name` `MEMBER`.",
          "$ref": "MembershipRole"
        }
      }
    },
    "ModifyMembershipRolesResponse": {
      "id": "ModifyMembershipRolesResponse",
      "description": "The response message for MembershipsService.ModifyMembershipRoles.",
      "type": "object",
      "properties": {
        "membership": {
          "description": "The `Membership` resource after modifying its `MembershipRole`s.",
          "$ref": "Membership"
        }
      }
    },
    "SearchTransitiveMembershipsResponse": {
      "id": "SearchTransitiveMembershipsResponse",
      "description": "The response message for MembershipsService.SearchTransitiveMemberships.",
      "type": "object",
      "properties": {
        "memberships": {
          "description": "List of transitive members satisfying the query.",
          "type": "array",
          "items": {
            "$ref": "MemberRelation"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results.",
          "type": "string"
        }
      }
    },
    "MemberRelation": {
      "id": "MemberRelation",
      "description": "Message representing a transitive membership of a group.",
      "type": "object",
      "properties": {
        "preferredMemberKey": {
          "description": "Entity key has an id and a namespace.\nIn case of discussion forums, the id will be an email address without a\nnamespace.",
          "type": "array",
          "items": {
            "$ref": "EntityKey"
          }
        },
        "member": {
          "description": "Resource name for this member if member is a GROUP, otherwise it is empty.",
          "type": "string"
        },
        "roles": {
          "description": "The membership role details (i.e name of role and expiry time).",
          "type": "array",
          "items": {
            "$ref": "TransitiveMembershipRole"
          }
        },
        "relationType": {
          "description": "The relation between the group and the transitive member.",
          "enumDescriptions": [
            "The relation type is undefined or undetermined.",
            "The two entities have only a direct membership with each other.",
            "The two entities have only an indirect membership with each other.",
            "The two entities have both a direct and an indirect membership with each\nother."
          ],
          "type": "string",
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DIRECT",
            "INDIRECT",
            "DIRECT_AND_INDIRECT"
          ]
        }
      }
    },
    "TransitiveMembershipRole": {
      "id": "TransitiveMembershipRole",
      "description": "Message representing the role of a TransitiveMembership.",
      "type": "object",
      "properties": {
        "role": {
          "description": "TransitiveMembershipRole in string format.\nCurrently supported TransitiveMembershipRoles: `\"MEMBER\"`, `\"OWNER\"`, and\n`\"MANAGER\"`.",
          "type": "string"
        }
      }
    },
    "SearchTransitiveGroupsResponse": {
      "id": "SearchTransitiveGroupsResponse",
      "description": "The response message for MembershipsService.SearchTransitiveGroups.",
      "type": "object",
      "properties": {
        "memberships": {
          "description": "List of transitive groups satisfying the query.",
          "type": "array",
          "items": {
            "$ref": "GroupRelation"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results available for listing.",
          "type": "string"
        }
      }
    },
    "GroupRelation": {
      "id": "GroupRelation",
      "description": "Message representing a transitive group of a user or a group.",
      "type": "object",
      "properties": {
        "groupKey": {
          "description": "Entity key has an id and a namespace.\nIn case of discussion forums, the id will be an email address without a\nnamespace.",
          "$ref": "EntityKey"
        },
        "group": {
          "description": "Resource name for this group.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name for this group.",
          "type": "string"
        },
        "roles": {
          "description": "Membership roles of the member for the group.",
          "type": "array",
          "items": {
            "$ref": "TransitiveMembershipRole"
          }
        },
        "relationType": {
          "description": "The relation between the member and the transitive group.",
          "enumDescriptions": [
            "The relation type is undefined or undetermined.",
            "The two entities have only a direct membership with each other.",
            "The two entities have only an indirect membership with each other.",
            "The two entities have both a direct and an indirect membership with each\nother."
          ],
          "type": "string",
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DIRECT",
            "INDIRECT",
            "DIRECT_AND_INDIRECT"
          ]
        },
        "labels": {
          "description": "Labels for Group resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CheckTransitiveMembershipResponse": {
      "id": "CheckTransitiveMembershipResponse",
      "description": "The response message for MembershipsService.CheckTransitiveMembership.",
      "type": "object",
      "properties": {
        "hasMembership": {
          "description": "Response does not include the possible roles of a member since the behavior\nof this rpc is not all-or-nothing unlike the other rpcs. So, it may not be\npossible to list all the roles definitively, due to possible lack of\nauthorization in some of the paths.",
          "type": "boolean"
        }
      }
    },
    "GetEffectiveSettingsResponse": {
      "id": "GetEffectiveSettingsResponse",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "Resource id of the device.",
          "type": "string"
        },
        "effectiveSetting": {
          "$ref": "EffectiveSetting"
        }
      }
    },
    "EffectiveSetting": {
      "id": "EffectiveSetting",
      "type": "object",
      "properties": {
        "mamDataProtectionSetting": {
          "$ref": "MamDataProtectionSetting"
        }
      }
    },
    "MamDataProtectionSetting": {
      "id": "MamDataProtectionSetting",
      "description": "Data protection setting for enforcing data leak restrictions on user's\ndevice.",
      "type": "object",
      "properties": {
        "copyPasteProtected": {
          "description": "Whether user's data on the device is protected for cut\/copy\/paste.",
          "type": "boolean"
        },
        "sharingProtected": {
          "description": "Whether the user's data on the device is protected for native sharing.",
          "type": "boolean"
        },
        "obfuscatedCustomerId": {
          "description": "Obfuscated customer ID of the user in hex with at most 16 chars.",
          "type": "string"
        }
      }
    },
    "GetEffectiveSettingsRequest": {
      "id": "GetEffectiveSettingsRequest",
      "type": "object",
      "properties": {
        "clientContext": {
          "description": "Context of the caller client.",
          "$ref": "ClientContext"
        }
      }
    },
    "ClientContext": {
      "id": "ClientContext",
      "description": "Information related to the caller client.",
      "type": "object",
      "properties": {
        "clientVersion": {
          "description": "The name and the version of the client.\ne.g. \"DXP 1.0\"",
          "type": "string"
        },
        "osVersion": {
          "description": "[Optional] OS version on which the client app is running.\ne.g., \"iOS 12.1\"",
          "type": "string"
        },
        "appId": {
          "description": "[Optional] Identifier of the application.\ne.g., \"com.google.Drive\"",
          "type": "string"
        },
        "iosVendorId": {
          "description": "Vendor id of the ios device.",
          "type": "string"
        }
      }
    },
    "GetMembershipGraphResponse": {
      "id": "GetMembershipGraphResponse",
      "description": "The response message for MembershipsService.GetMembershipGraph.",
      "type": "object",
      "properties": {
        "adjacencyList": {
          "description": "The membership graph's path information represented as an adjacency list.",
          "type": "array",
          "items": {
            "$ref": "MembershipAdjacencyList"
          }
        },
        "groups": {
          "description": "The resources representing each group in the adjacency list. Each\ngroup in this list can be correlated to a 'group' of the\nMembershipAdjacencyList using the 'name' of the Group resource.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        }
      }
    },
    "MembershipAdjacencyList": {
      "id": "MembershipAdjacencyList",
      "description": "Membership graph's path information as an adjacency list.",
      "type": "object",
      "properties": {
        "group": {
          "description": "Resource name of the group that the members belong to.",
          "type": "string"
        },
        "edges": {
          "description": "Each edge contains information about the member that belongs to this group.",
          "type": "array",
          "items": {
            "$ref": "Membership"
          }
        }
      }
    }
  },
  "resources": {
    "groups": {
      "methods": {
        "create": {
          "id": "cloudidentity.groups.create",
          "path": "v1beta1/groups",
          "flatPath": "v1beta1/groups",
          "httpMethod": "POST",
          "parameters": {
            "initialGroupConfig": {
              "description": "Required. The initial configuration option for the `Group`.",
              "location": "query",
              "type": "string",
              "enum": [
                "INITIAL_GROUP_CONFIG_UNSPECIFIED",
                "WITH_INITIAL_OWNER",
                "EMPTY"
              ]
            }
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Creates a `Group`."
        },
        "get": {
          "id": "cloudidentity.groups.get",
          "path": "v1beta1/{+name}",
          "flatPath": "v1beta1/groups/{groupsId}",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "Required. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Group` to retrieve.\n\nMust be of the form `groups\/{group_id}`.",
              "location": "path",
              "required": true,
              "pattern": "^groups\/[^\/]+$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieves a `Group`."
        },
        "patch": {
          "id": "cloudidentity.groups.patch",
          "path": "v1beta1/{+name}",
          "flatPath": "v1beta1/groups/{groupsId}",
          "httpMethod": "PATCH",
          "parameters": {
            "name": {
              "description": "Output only. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Group`.\n\nShall be of the form `groups\/{group_id}`.",
              "location": "path",
              "required": true,
              "pattern": "^groups\/[^\/]+$",
              "type": "string"
            },
            "updateMask": {
              "description": "Required. The fully-qualified names of fields to update.\n\nMay only contain the following fields: `display_name`, `description`.",
              "location": "query",
              "type": "string",
              "format": "google-fieldmask"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Updates a `Group`."
        },
        "delete": {
          "id": "cloudidentity.groups.delete",
          "path": "v1beta1/{+name}",
          "flatPath": "v1beta1/groups/{groupsId}",
          "httpMethod": "DELETE",
          "parameters": {
            "name": {
              "description": "Required. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Group` to retrieve.\n\nMust be of the form `groups\/{group_id}`.",
              "location": "path",
              "required": true,
              "pattern": "^groups\/[^\/]+$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Deletes a `Group`."
        },
        "lookup": {
          "id": "cloudidentity.groups.lookup",
          "path": "v1beta1/groups:lookup",
          "flatPath": "v1beta1/groups:lookup",
          "httpMethod": "GET",
          "parameters": {
            "groupKey.id": {
              "description": "The ID of the entity.\n\nFor Google-managed entities, the `id` must be the email address of an\nexisting group or user.\n\nFor external-identity-mapped entities, the `id` must be a string conforming\nto the Identity Source's requirements.\n\nMust be unique within a `namespace`.",
              "location": "query",
              "type": "string"
            },
            "groupKey.namespace": {
              "description": "The namespace in which the entity exists.\n\nIf not specified, the `EntityKey` represents a Google-managed entity such\nas a Google user or a Google Group.\n\nIf specified, the `EntityKey` represents an external-identity-mapped group.\nThe namespace must correspond to an identity source created in Admin\nConsole and must be in the form of `identitysources\/{identity_source_id}.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
          ],
          "response": {
            "$ref": "LookupGroupNameResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Looks up the [resource\nname](https:\/\/cloud.google.com\/apis\/design\/resource_names) of a `Group` by\nits `EntityKey`."
        },
        "search": {
          "id": "cloudidentity.groups.search",
          "path": "v1beta1/groups:search",
          "flatPath": "v1beta1/groups:search",
          "httpMethod": "GET",
          "parameters": {
            "query": {
              "description": "Required. The search query.\n\nMust be specified in [Common Expression\nLanguage](https:\/\/opensource.google\/projects\/cel). May only contain\nequality operators on the parent and inclusion operators on labels (e.g.,\n`parent == 'customers\/{customer_id}' &&\n'cloudidentity.googleapis.com\/groups.discussion_forum' in labels`).",
              "location": "query",
              "type": "string"
            },
            "view": {
              "description": "The level of detail to be returned.\n\nIf unspecified, defaults to `View.BASIC`.",
              "location": "query",
              "type": "string",
              "enum": [
                "BASIC",
                "FULL"
              ]
            },
            "pageSize": {
              "description": "The maximum number of results to return.\n\nNote that the number of results returned may be less than this value even\nif there are more available results. To fetch all results, clients must\ncontinue calling this method repeatedly until the response no longer\ncontains a `next_page_token`.\n\nIf unspecified, defaults to 200 for `GroupView.BASIC` and to 50 for\n`GroupView.FULL`.\n\nMust not be greater than 1000 for `GroupView.BASIC` or 500 for\n`GroupView.FULL`.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "The `next_page_token` value returned from a previous search request, if\nany.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
          ],
          "response": {
            "$ref": "SearchGroupsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Searches for `Group`s matching a specified query."
        },
        "list": {
          "id": "cloudidentity.groups.list",
          "path": "v1beta1/groups",
          "flatPath": "v1beta1/groups",
          "httpMethod": "GET",
          "parameters": {
            "parent": {
              "description": "Required. The parent resource under which to list all `Group`s.\n\nMust be of the form `identitysources\/{identity_source_id}` for external-\nidentity-mapped groups or `customers\/{customer_id}` for Google Groups.",
              "location": "query",
              "type": "string"
            },
            "view": {
              "description": "The level of detail to be returned.\n\nIf unspecified, defaults to `View.BASIC`.",
              "location": "query",
              "type": "string",
              "enum": [
                "VIEW_UNSPECIFIED",
                "BASIC",
                "FULL"
              ]
            },
            "pageSize": {
              "description": "The maximum number of results to return.\n\nNote that the number of results returned may be less than this value even\nif there are more available results. To fetch all results, clients must\ncontinue calling this method repeatedly until the response no longer\ncontains a `next_page_token`.\n\nIf unspecified, defaults to 200 for `View.BASIC` and to 50 for `View.FULL`.\n\nMust not be greater than 1000 for `View.BASIC` or 500 for `View.FULL`.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "The `next_page_token` value returned from a previous list request, if any.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
          ],
          "response": {
            "$ref": "ListGroupsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Lists the `Group`s under a customer or namespace."
        }
      }
      ,
      "resources": {
        "memberships": {
          "methods": {
            "create": {
              "id": "cloudidentity.groups.memberships.create",
              "path": "v1beta1/{+parent}/memberships",
              "flatPath": "v1beta1/groups/{groupsId}/memberships",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The parent `Group` resource under which to create the `Membership`.\n\nMust be of the form `groups\/{group_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Membership"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a `Membership`."
            },
            "get": {
              "id": "cloudidentity.groups.memberships.get",
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Membership` to retrieve.\n\nMust be of the form `groups\/{group_id}\/memberships\/{membership_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+\/memberships\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Membership"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Retrieves a `Membership`."
            },
            "patch": {
              "id": "cloudidentity.groups.memberships.patch",
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "description": "Output only. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Membership`.\n\nShall be of the form `groups\/{group_id}\/memberships\/{membership_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+\/memberships\/[^\/]+$",
                  "type": "string"
                },
                "updateMask": {
                  "description": "Required. The fully-qualified names of fields to update.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "Membership"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates a `Membership`."
            },
            "delete": {
              "id": "cloudidentity.groups.memberships.delete",
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Membership` to delete.\n\nMust be of the form `groups\/{group_id}\/memberships\/{membership_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+\/memberships\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a `Membership`."
            },
            "lookup": {
              "id": "cloudidentity.groups.memberships.lookup",
              "path": "v1beta1/{+parent}/memberships:lookup",
              "flatPath": "v1beta1/groups/{groupsId}/memberships:lookup",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The parent `Group` resource under which to lookup the `Membership` name.\n\nMust be of the form `groups\/{group_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                },
                "memberKey.id": {
                  "description": "The ID of the entity.\n\nFor Google-managed entities, the `id` must be the email address of an\nexisting group or user.\n\nFor external-identity-mapped entities, the `id` must be a string conforming\nto the Identity Source's requirements.\n\nMust be unique within a `namespace`.",
                  "location": "query",
                  "type": "string"
                },
                "memberKey.namespace": {
                  "description": "The namespace in which the entity exists.\n\nIf not specified, the `EntityKey` represents a Google-managed entity such\nas a Google user or a Google Group.\n\nIf specified, the `EntityKey` represents an external-identity-mapped group.\nThe namespace must correspond to an identity source created in Admin\nConsole and must be in the form of `identitysources\/{identity_source_id}.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "LookupMembershipNameResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Looks up the [resource\nname](https:\/\/cloud.google.com\/apis\/design\/resource_names) of a\n`Membership` by its `EntityKey`."
            },
            "list": {
              "id": "cloudidentity.groups.memberships.list",
              "path": "v1beta1/{+parent}/memberships",
              "flatPath": "v1beta1/groups/{groupsId}/memberships",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The parent `Group` resource under which to lookup the `Membership` name.\n\nMust be of the form `groups\/{group_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                },
                "view": {
                  "description": "The level of detail to be returned.\n\nIf unspecified, defaults to `MembershipView.BASIC`.",
                  "location": "query",
                  "type": "string",
                  "enum": [
                    "BASIC",
                    "FULL"
                  ]
                },
                "pageSize": {
                  "description": "The maximum number of results to return.\n\nNote that the number of results returned may be less than this value even\nif there are more available results. To fetch all results, clients must\ncontinue calling this method repeatedly until the response no longer\ncontains a `next_page_token`.\n\nIf unspecified, defaults to 200 for `GroupView.BASIC` and to 50 for\n`GroupView.FULL`.\n\nMust not be greater than 1000 for `GroupView.BASIC` or 500 for\n`GroupView.FULL`.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The `next_page_token` value returned from a previous search request, if\nany.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists the `Membership`s within a `Group`."
            },
            "modifyMembershipRoles": {
              "id": "cloudidentity.groups.memberships.modifyMembershipRoles",
              "path": "v1beta1/{+name}:modifyMembershipRoles",
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}:modifyMembershipRoles",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "Required. The [resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of\nthe `Membership` whose roles are to be modified.\n\nMust be of the form `groups\/{group_id}\/memberships\/{membership_id}`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+\/memberships\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "ModifyMembershipRolesRequest"
              },
              "response": {
                "$ref": "ModifyMembershipRolesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Modifies the `MembershipRole`s of a `Membership`."
            },
            "searchTransitiveMemberships": {
              "id": "cloudidentity.groups.memberships.searchTransitiveMemberships",
              "path": "v1beta1/{+parent}/memberships:searchTransitiveMemberships",
              "flatPath": "v1beta1/groups/{groupsId}/memberships:searchTransitiveMemberships",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "[Resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of the\ngroup to search transitive memberships in.\n\nFormat: `groups\/{group_id}`, where `group_id` is the unique ID assigned to\nthe Group.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The default page size is 200 (max 1000).",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous list request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "SearchTransitiveMembershipsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Search transitive memberships of a group."
            },
            "searchTransitiveGroups": {
              "id": "cloudidentity.groups.memberships.searchTransitiveGroups",
              "path": "v1beta1/{+parent}/memberships:searchTransitiveGroups",
              "flatPath": "v1beta1/groups/{groupsId}/memberships:searchTransitiveGroups",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "[Resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of the\ngroup to search transitive memberships in.\n\nFormat: `groups\/{group_id}`, where `group_id` is always '-' as this API\nwill search across all groups for a given member.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                },
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification AND label(s). This\nis a `required` field.\n\nUsers can search on label attributes of groups. CONTAINS match ('in') is\nsupported on labels.\n\nExample query: member_key_id == \u2018member_key_id_value\u2019 [ &&\nmember_key_namespace == \u2018member_key_namespace_value\u2019 ]\n&& <label_value> in labels",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The default page size is 200 (max 1000).",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous list request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "SearchTransitiveGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Search transitive groups of a member."
            },
            "checkTransitiveMembership": {
              "id": "cloudidentity.groups.memberships.checkTransitiveMembership",
              "path": "v1beta1/{+parent}/memberships:checkTransitiveMembership",
              "flatPath": "v1beta1/groups/{groupsId}/memberships:checkTransitiveMembership",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "[Resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of the\ngroup to check the transitive membership in.\n\nFormat: `groups\/{group_id}`, where `group_id` is the unique id assigned to\nthe Group to which the Membership belongs to.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                },
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification. This is a\n`required` field.\n\nExample query: member_key_id == \u2018member_key_id_value\u2019 [ &&\nmember_key_namespace == \u2018member_key_namespace_value\u2019 ]",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "CheckTransitiveMembershipResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Check a potential member for membership in a group."
            },
            "getMembershipGraph": {
              "id": "cloudidentity.groups.memberships.getMembershipGraph",
              "path": "v1beta1/{+parent}/memberships:getMembershipGraph",
              "flatPath": "v1beta1/groups/{groupsId}/memberships:getMembershipGraph",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. [Resource name](https:\/\/cloud.google.com\/apis\/design\/resource_names) of the\ngroup to search transitive memberships in.\n\nFormat: `groups\/{group_id}`, where `group_id` is the unique ID assigned to\nthe Group to which the Membership belongs to. group_id can be a wildcard\ncollection id \"-\".\n\nWhen a group_id is specified, the membership graph will be constrained to\npaths between the member (defined in the query) and the parent. If a\nwildcard collection is provided, all membership paths connected to the\nmember will be returned.",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups\/[^\/]+$",
                  "type": "string"
                },
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification AND label(s).\n\nExample query: member_key_id == \u2018member_key_id_value\u2019 [ &&\nmember_key_namespace == \u2018member_key_namespace_value\u2019 ]\n&& <label_value> in labels",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Get a membership graph of a member or member\/group."
            }
          }
        }
      }
    },
    "devices": {
      "methods": {
        "getSettings": {
          "id": "cloudidentity.devices.getSettings",
          "path": "v1beta1/{+resourceId}/settings",
          "flatPath": "v1beta1/devices/{devicesId}/settings",
          "httpMethod": "GET",
          "parameters": {
            "resourceId": {
              "description": "Resource id of the entity for which the settings are requested.",
              "location": "path",
              "required": true,
              "pattern": "^devices\/[^\/]+$",
              "type": "string"
            },
            "clientContext.clientVersion": {
              "description": "The name and the version of the client.\ne.g. \"DXP 1.0\"",
              "location": "query",
              "type": "string"
            },
            "clientContext.osVersion": {
              "description": "[Optional] OS version on which the client app is running.\ne.g., \"iOS 12.1\"",
              "location": "query",
              "type": "string"
            },
            "clientContext.appId": {
              "description": "[Optional] Identifier of the application.\ne.g., \"com.google.Drive\"",
              "location": "query",
              "type": "string"
            },
            "clientContext.iosVendorId": {
              "description": "Vendor id of the ios device.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "resourceId"
          ],
          "response": {
            "$ref": "GetEffectiveSettingsResponse"
          },
          "description": "Returns the effective settings compiled for the requested entity."
        },
        "settings": {
          "id": "cloudidentity.devices.settings",
          "path": "v1beta1/{+resourceId}/settings",
          "flatPath": "v1beta1/devices/{devicesId}/settings",
          "httpMethod": "POST",
          "parameters": {
            "resourceId": {
              "description": "Resource id of the entity for which the settings are requested.",
              "location": "path",
              "required": true,
              "pattern": "^devices\/[^\/]+$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "resourceId"
          ],
          "request": {
            "$ref": "GetEffectiveSettingsRequest"
          },
          "response": {
            "$ref": "GetEffectiveSettingsResponse"
          },
          "description": "Returns the effective settings compiled for the requested entity."
        }
      }
    }
  },
  "basePath": ""
}