{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "batch:v1",
  "name": "batch",
  "canonicalName": "Batch",
  "version": "v1",
  "revision": "0",
  "title": "Batch API",
  "description": "An API to manage the running of batch jobs on Google Cloud Platform.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "",
  "protocol": "rest",
  "rootUrl": "https://batch.googleapis.com/",
  "mtlsRootUrl": "https://batch.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://batch.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "schemas": {
    "Job": {
      "id": "Job",
      "description": "The Cloud Batch Job description.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Job name. For example: \"projects\/123456\/locations\/us-central1\/jobs\/job01\".",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. A system generated unique ID (in UUID4 format) for the Job.",
          "readOnly": true,
          "type": "string"
        },
        "priority": {
          "description": "Priority of the Job. The valid value range is [0, 100). A job with higher priority value is more likely to run earlier if all other requirements are satisfied.",
          "type": "string",
          "format": "int64"
        },
        "taskGroups": {
          "description": "Required. TaskGroups in the Job. Only one TaskGroup is supported now.",
          "type": "array",
          "items": {
            "$ref": "TaskGroup"
          }
        },
        "allocationPolicy": {
          "description": "Compute resource allocation for all TaskGroups in the Job.",
          "$ref": "AllocationPolicy"
        },
        "labels": {
          "description": "Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https:\/\/cloud.google.com\/compute\/docs\/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "description": "Output only. Job status. It is read only for users.",
          "readOnly": true,
          "$ref": "JobStatus"
        },
        "createTime": {
          "description": "Output only. When the Job was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last time the Job was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "logsPolicy": {
          "description": "Log preservation policy for the Job.",
          "$ref": "LogsPolicy"
        },
        "notifications": {
          "description": "Notification configurations.",
          "type": "array",
          "items": {
            "$ref": "JobNotification"
          }
        }
      }
    },
    "TaskGroup": {
      "id": "TaskGroup",
      "description": "A TaskGroup contains one or multiple Tasks that share the same Runnable but with different runtime parameters.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects\/123456\/locations\/us-west1\/jobs\/job01\/taskGroups\/group01\".",
          "readOnly": true,
          "type": "string"
        },
        "taskSpec": {
          "description": "Required. Tasks in the group share the same task spec.",
          "$ref": "TaskSpec"
        },
        "taskCount": {
          "description": "Number of Tasks in the TaskGroup. default is 1",
          "type": "string",
          "format": "int64"
        },
        "parallelism": {
          "description": "Max number of tasks that can run in parallel. Default to min(task_count, 1000).",
          "type": "string",
          "format": "int64"
        },
        "taskEnvironments": {
          "description": "An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments supports up to 200 entries.",
          "type": "array",
          "items": {
            "$ref": "Environment"
          }
        },
        "taskCountPerNode": {
          "description": "Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.",
          "type": "string",
          "format": "int64"
        },
        "requireHostsFile": {
          "description": "When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.",
          "type": "boolean"
        },
        "permissiveSsh": {
          "description": "When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.",
          "type": "boolean"
        }
      }
    },
    "TaskSpec": {
      "id": "TaskSpec",
      "description": "Spec of a task",
      "type": "object",
      "properties": {
        "runnables": {
          "description": "The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.",
          "type": "array",
          "items": {
            "$ref": "Runnable"
          }
        },
        "computeResource": {
          "description": "ComputeResource requirements.",
          "$ref": "ComputeResource"
        },
        "maxRunDuration": {
          "description": "Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.",
          "type": "string",
          "format": "google-duration"
        },
        "maxRetryCount": {
          "description": "Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].",
          "type": "integer",
          "format": "int32"
        },
        "lifecyclePolicies": {
          "description": "Lifecycle management schema when any task in a task group is failed. The valid size of lifecycle policies are [0, 10]. For each lifecycle policy, when the condition is met, the action in that policy will execute. If there are multiple policies that the task execution result matches, we use the action from the first matched policy. If task execution result does not meet with any of the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.",
          "type": "array",
          "items": {
            "$ref": "LifecyclePolicy"
          }
        },
        "environments": {
          "description": "Environment variables to set before running the Task. You can set up to 100 environments.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "Volumes to mount before running Tasks using this TaskSpec.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        }
      }
    },
    "Runnable": {
      "id": "Runnable",
      "description": "Runnable describes instructions for executing a specific script or container as part of a Task.",
      "type": "object",
      "properties": {
        "container": {
          "description": "Container runnable.",
          "$ref": "Container"
        },
        "script": {
          "description": "Script runnable.",
          "$ref": "Script"
        },
        "barrier": {
          "description": "Barrier runnable.",
          "$ref": "Barrier"
        },
        "ignoreExitStatus": {
          "description": "Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.",
          "type": "boolean"
        },
        "background": {
          "description": "This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).",
          "type": "boolean"
        },
        "alwaysRun": {
          "description": "By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.",
          "type": "boolean"
        }
      }
    },
    "Container": {
      "id": "Container",
      "description": "Container runnable.",
      "type": "object",
      "properties": {
        "imageUri": {
          "description": "The URI to pull the container image from.",
          "type": "string"
        },
        "commands": {
          "description": "Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Overrides the `ENTRYPOINT` specified in the container.",
          "type": "string"
        },
        "volumes": {
          "description": "Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. \/foo:\/bar, or \/foo:\/bar:ro",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "description": "Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\".",
          "type": "string"
        },
        "blockExternalNetwork": {
          "description": "If set to true, external network access to and from container will be blocked. The container will use the default internal network 'goog-internal'.",
          "type": "boolean"
        },
        "username": {
          "description": "Optional username for logging in to a docker registry. If username matches \"projects\/*\/secrets\/*\/versions\/*\" then Batch will read the username from the Secret Manager.",
          "type": "string"
        },
        "password": {
          "description": "Optional password for logging in to a docker registry. If password matches \"projects\/*\/secrets\/*\/versions\/*\" then Batch will read the password from the Secret Manager;",
          "type": "string"
        }
      }
    },
    "Script": {
      "id": "Script",
      "description": "Script runnable.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Script file path on the host VM.",
          "type": "string"
        },
        "text": {
          "description": "Shell script text.",
          "type": "string"
        }
      }
    },
    "Barrier": {
      "id": "Barrier",
      "description": "Barrier runnable blocks until all tasks in a taskgroup reach it.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.",
          "type": "string"
        }
      }
    },
    "ComputeResource": {
      "id": "ComputeResource",
      "description": "Compute resource requirements",
      "type": "object",
      "properties": {
        "cpuMilli": {
          "description": "The milliCPU count.",
          "type": "string",
          "format": "int64"
        },
        "memoryMib": {
          "description": "Memory in MiB.",
          "type": "string",
          "format": "int64"
        },
        "bootDiskMib": {
          "description": "Extra boot disk size in MiB for each task.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "LifecyclePolicy": {
      "id": "LifecyclePolicy",
      "description": "LifecyclePolicy describes how to deal with task failures based on different conditions.",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to execute when ActionCondition is true.",
          "type": "string",
          "enumDescriptions": [
            "Action unspecified.",
            "Action that tasks in the group will be scheduled to re-execute.",
            "Action that tasks in the group will be stopped immediately."
          ],
          "enum": [
            "ACTION_UNSPECIFIED",
            "RETRY_TASK",
            "FAIL_TASK"
          ]
        },
        "actionCondition": {
          "description": "Conditions that decide why a task failure is dealt with a specific action.",
          "$ref": "ActionCondition"
        }
      }
    },
    "ActionCondition": {
      "id": "ActionCondition",
      "description": "Conditions for actions to deal with task failures.",
      "type": "object",
      "properties": {
        "exitCodes": {
          "description": "Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "Volume": {
      "id": "Volume",
      "description": "Volume and mount parameters to be associated with a TaskSpec. A TaskSpec might describe zero, one, or multiple volumes to be mounted as part of the task.",
      "type": "object",
      "properties": {
        "nfs": {
          "description": "An NFS source for the volume (could be a Filestore, for example).",
          "$ref": "NFS"
        },
        "gcs": {
          "description": "A Google Cloud Storage source for the volume.",
          "$ref": "GCS"
        },
        "deviceName": {
          "description": "Device name of an attached disk",
          "type": "string"
        },
        "mountPath": {
          "description": "Mount path for the volume, e.g. \/mnt\/share",
          "type": "string"
        },
        "mountOptions": {
          "description": "Mount options For Google Cloud Storage, mount options are the global options supported by gcsfuse tool. Batch will use them to mount the volume with the following command: \"gcsfuse [global options] bucket mountpoint\". For PD, NFS, mount options are these supported by \/etc\/fstab. Batch will use Fstab to mount such volumes. https:\/\/help.ubuntu.com\/community\/Fstab",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NFS": {
      "id": "NFS",
      "description": "Represents an NFS server and remote path: :",
      "type": "object",
      "properties": {
        "server": {
          "description": "URI of the NFS server, e.g. an IP address.",
          "type": "string"
        },
        "remotePath": {
          "description": "Remote source path exported from NFS, e.g., \"\/share\".",
          "type": "string"
        }
      }
    },
    "GCS": {
      "id": "GCS",
      "description": "Represents a Google Cloud Storage volume source config.",
      "type": "object",
      "properties": {
        "remotePath": {
          "description": "Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name\/subdirectory\/",
          "type": "string"
        }
      }
    },
    "Environment": {
      "id": "Environment",
      "description": "An Environment describes a collection of environment variables to set when executing Tasks.",
      "type": "object",
      "properties": {
        "variables": {
          "description": "A map of environment variable names to values.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AllocationPolicy": {
      "id": "AllocationPolicy",
      "description": "A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.",
      "type": "object",
      "properties": {
        "location": {
          "description": "Location where compute resources should be allocated for the Job.",
          "$ref": "LocationPolicy"
        },
        "instances": {
          "description": "Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.",
          "type": "array",
          "items": {
            "$ref": "InstancePolicyOrTemplate"
          }
        },
        "labels": {
          "description": "Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https:\/\/cloud.google.com\/compute\/docs\/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "network": {
          "description": "The network policy.",
          "$ref": "NetworkPolicy"
        }
      }
    },
    "LocationPolicy": {
      "id": "LocationPolicy",
      "type": "object",
      "properties": {
        "allowedLocations": {
          "description": "A list of allowed location names represented by internal URLs, First location in the list must be a region. for example, [\"regions\/us-central1\"] allow VMs in region us-central1, [\"regions\/us-central1\", \"zones\/us-central1-a\"] only allow VMs in zone us-central1-a.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InstancePolicyOrTemplate": {
      "id": "InstancePolicyOrTemplate",
      "description": "Either an InstancePolicy or an instance template.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "InstancePolicy.",
          "$ref": "InstancePolicy"
        },
        "instanceTemplate": {
          "description": "Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.",
          "type": "string"
        }
      }
    },
    "InstancePolicy": {
      "id": "InstancePolicy",
      "description": "InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.",
      "type": "object",
      "properties": {
        "machineType": {
          "description": "The Compute Engine machine type.",
          "type": "string"
        },
        "minCpuPlatform": {
          "description": "The minimum CPU platform. See `https:\/\/cloud.google.com\/compute\/docs\/instances\/specify-min-cpu-platform`. Not yet implemented.",
          "type": "string"
        },
        "provisioningModel": {
          "description": "The provisioning model.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Standard VM.",
            "SPOT VM.",
            "Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported."
          ],
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            "STANDARD",
            "SPOT",
            "PREEMPTIBLE"
          ]
        },
        "accelerators": {
          "description": "The accelerators attached to each VM instance. Not yet implemented.",
          "type": "array",
          "items": {
            "$ref": "Accelerator"
          }
        },
        "disks": {
          "description": "Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the attached VM is deleted.",
          "type": "array",
          "items": {
            "$ref": "AttachedDisk"
          }
        }
      }
    },
    "Accelerator": {
      "id": "Accelerator",
      "description": "Accelerator describes Compute Engine accelerators to be attached to VMs.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The accelerator type. For example, \"nvidia-tesla-t4\". See `gcloud compute accelerator-types list`.",
          "type": "string"
        },
        "count": {
          "description": "The number of accelerators of this type.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AttachedDisk": {
      "id": "AttachedDisk",
      "description": "A new or an existing persistent disk attached to a VM instance.",
      "type": "object",
      "properties": {
        "newDisk": {
          "$ref": "Disk"
        },
        "existingDisk": {
          "description": "Name of an existing PD.",
          "type": "string"
        },
        "deviceName": {
          "description": "Device name that the guest operating system will see. If not specified, this is default to the disk name.",
          "type": "string"
        }
      }
    },
    "Disk": {
      "id": "Disk",
      "description": "A new persistent disk.",
      "type": "object",
      "properties": {
        "image": {
          "description": "Name of a public or custom image used as the data source.",
          "type": "string"
        },
        "snapshot": {
          "description": "Name of a snapshot used as the data source.",
          "type": "string"
        },
        "type": {
          "description": "Disk type as shown in `gcloud compute disk-types list` For example, \"pd-ssd\", \"pd-standard\", \"pd-balanced\".",
          "type": "string"
        },
        "sizeGb": {
          "description": "Disk size in GB. This field is ignored if `data_source` is `disk` or `image`.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "NetworkPolicy": {
      "id": "NetworkPolicy",
      "description": "NetworkPolicy describes VM instance network configurations.",
      "type": "object",
      "properties": {
        "networkInterfaces": {
          "description": "Network configurations.",
          "type": "array",
          "items": {
            "$ref": "NetworkInterface"
          }
        }
      }
    },
    "NetworkInterface": {
      "id": "NetworkInterface",
      "description": "A network interface.",
      "type": "object",
      "properties": {
        "network": {
          "description": "The URL of the network resource.",
          "type": "string"
        },
        "subnetwork": {
          "description": "The URL of the Subnetwork resource.",
          "type": "string"
        },
        "noExternalIpAddress": {
          "description": "Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https:\/\/cloud.google.com\/vpc\/docs\/configure-private-google-access and https:\/\/cloud.google.com\/nat\/docs\/gce-example#create-nat for more information.",
          "type": "boolean"
        }
      }
    },
    "JobStatus": {
      "id": "JobStatus",
      "description": "Job status.",
      "type": "object",
      "properties": {
        "state": {
          "description": "Job state",
          "type": "string",
          "enumDescriptions": [
            "",
            "Job is admitted (validated and persisted) and waiting for resources.",
            "Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.",
            "Resource allocation has been successful. At least one Task in the Job is RUNNING.",
            "All Tasks in the Job have finished successfully.",
            "At least one Task in the Job has failed.",
            "The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "SCHEDULED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "DELETION_IN_PROGRESS"
          ]
        },
        "statusEvents": {
          "description": "Job status events",
          "type": "array",
          "items": {
            "$ref": "StatusEvent"
          }
        },
        "taskGroups": {
          "description": "Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.",
          "type": "object",
          "additionalProperties": {
            "$ref": "TaskGroupStatus"
          }
        },
        "runDuration": {
          "description": "The duration of time that the Job spent in status RUNNING.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "StatusEvent": {
      "id": "StatusEvent",
      "description": "Status event",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the event.",
          "type": "string"
        },
        "description": {
          "description": "Description of the event.",
          "type": "string"
        },
        "eventTime": {
          "description": "The time this event occurred.",
          "type": "string",
          "format": "google-datetime"
        },
        "taskExecution": {
          "description": "Task Execution",
          "$ref": "TaskExecution"
        }
      }
    },
    "TaskExecution": {
      "id": "TaskExecution",
      "description": "This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.",
      "type": "object",
      "properties": {
        "exitCode": {
          "description": "When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskGroupStatus": {
      "id": "TaskGroupStatus",
      "description": "Aggregated task status for a TaskGroup.",
      "type": "object",
      "properties": {
        "counts": {
          "description": "Count of task in each state in the TaskGroup. The map key is task state name.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        },
        "instances": {
          "description": "Status of instances allocated for the TaskGroup.",
          "type": "array",
          "items": {
            "$ref": "InstanceStatus"
          }
        }
      }
    },
    "InstanceStatus": {
      "id": "InstanceStatus",
      "description": "VM instance status.",
      "type": "object",
      "properties": {
        "machineType": {
          "description": "The Compute Engine machine type.",
          "type": "string"
        },
        "provisioningModel": {
          "description": "The VM instance provisioning model.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Standard VM.",
            "SPOT VM.",
            "Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported."
          ],
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            "STANDARD",
            "SPOT",
            "PREEMPTIBLE"
          ]
        },
        "taskPack": {
          "description": "The max number of tasks can be assigned to this instance type.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "LogsPolicy": {
      "id": "LogsPolicy",
      "description": "LogsPolicy describes how outputs from a Job's Tasks (stdout\/stderr) will be preserved.",
      "type": "object",
      "properties": {
        "destination": {
          "description": "Where logs should be saved.",
          "type": "string",
          "enumDescriptions": [
            "Logs are not preserved.",
            "Logs are streamed to Cloud Logging.",
            "Logs are saved to a file path."
          ],
          "enum": [
            "DESTINATION_UNSPECIFIED",
            "CLOUD_LOGGING",
            "PATH"
          ]
        },
        "logsPath": {
          "description": "The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.",
          "type": "string"
        }
      }
    },
    "JobNotification": {
      "id": "JobNotification",
      "description": "Notification configurations.",
      "type": "object",
      "properties": {
        "pubsubTopic": {
          "description": "The Pub\/Sub topic where notifications like the job state changes will be published. This topic exist in the same project as the job and billings will be charged to this project. If not specified, no Pub\/Sub messages will be sent. Topic format: `projects\/{project}\/topics\/{topic}`.",
          "type": "string"
        },
        "message": {
          "description": "The attribute requirements of messages to be sent to this Pub\/Sub topic. Without this field, no message will be sent.",
          "$ref": "Message"
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "Message details. Describe the attribute that a message should have. Without specified message attributes, no message will be sent by default.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The message type.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Notify users that the job state has changed.",
            "Notify users that the task state has changed."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "JOB_STATE_CHANGED",
            "TASK_STATE_CHANGED"
          ]
        },
        "newJobState": {
          "description": "The new job state.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Job is admitted (validated and persisted) and waiting for resources.",
            "Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.",
            "Resource allocation has been successful. At least one Task in the Job is RUNNING.",
            "All Tasks in the Job have finished successfully.",
            "At least one Task in the Job has failed.",
            "The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "SCHEDULED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "DELETION_IN_PROGRESS"
          ]
        },
        "newTaskState": {
          "description": "The new task state.",
          "type": "string",
          "enumDescriptions": [
            "unknown state",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED"
          ]
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "ListJobsResponse": {
      "id": "ListJobsResponse",
      "description": "ListJob Response.",
      "type": "object",
      "properties": {
        "jobs": {
          "description": "Jobs.",
          "type": "array",
          "items": {
            "$ref": "Job"
          }
        },
        "nextPageToken": {
          "description": "Next page token.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Task": {
      "id": "Task",
      "description": "A Cloud Batch task.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Task name. The name is generated from the parent TaskGroup name and 'id' field. For example: \"projects\/123456\/locations\/us-west1\/jobs\/job01\/taskGroups\/group01\/tasks\/task01\".",
          "type": "string"
        },
        "status": {
          "description": "Task Status.",
          "$ref": "TaskStatus"
        }
      }
    },
    "TaskStatus": {
      "id": "TaskStatus",
      "description": "Status of a task",
      "type": "object",
      "properties": {
        "state": {
          "description": "Task state",
          "type": "string",
          "enumDescriptions": [
            "unknown state",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED"
          ]
        },
        "statusEvents": {
          "description": "Detailed info about why the state is reached.",
          "type": "array",
          "items": {
            "$ref": "StatusEvent"
          }
        }
      }
    },
    "ListTasksResponse": {
      "id": "ListTasksResponse",
      "description": "ListTasks Response.",
      "type": "object",
      "properties": {
        "tasks": {
          "description": "Tasks.",
          "type": "array",
          "items": {
            "$ref": "Task"
          }
        },
        "nextPageToken": {
          "description": "Next page token.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "statusMessage": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true,
          "type": "string"
        },
        "requestedCancellation": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "jobs": {
              "methods": {
                "create": {
                  "id": "batch.projects.locations.jobs.create",
                  "path": "v1/{+parent}/jobs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name where the Job will be created. Pattern: \"projects\/{project}\/locations\/{location}\"",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "jobId": {
                      "description": "ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters. Only alphanumeric characters or '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be \"{parent}\/jobs\/{job_id}\".",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Job"
                  },
                  "response": {
                    "$ref": "Job"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Create a Job."
                },
                "get": {
                  "id": "batch.projects.locations.jobs.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Job name.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/jobs\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Job"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Get a Job specified by its resource name."
                },
                "delete": {
                  "id": "batch.projects.locations.jobs.delete",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Job name.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/jobs\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "reason": {
                      "description": "Optional. Reason for this deletion.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Delete a Job."
                },
                "list": {
                  "id": "batch.projects.locations.jobs.list",
                  "path": "v1/{+parent}/jobs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Parent path.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "filter": {
                      "description": "List filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Page size.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListJobsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "List all Jobs for a project within a region."
                }
              }
              ,
              "resources": {
                "taskGroups": {
                  "resources": {
                    "tasks": {
                      "methods": {
                        "get": {
                          "id": "batch.projects.locations.jobs.taskGroups.tasks.get",
                          "path": "v1/{+name}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks/{tasksId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. Task name.",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/jobs\/[^\/]+\/taskGroups\/[^\/]+\/tasks\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Task"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Return a single Task."
                        },
                        "list": {
                          "id": "batch.projects.locations.jobs.taskGroups.tasks.list",
                          "path": "v1/{+parent}/tasks",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of a TaskGroup from which Tasks are being requested. Pattern: \"projects\/{project}\/locations\/{location}\/jobs\/{job}\/taskGroups\/{task_group}\"",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/jobs\/[^\/]+\/taskGroups\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "filter": {
                              "description": "Task filter, null filter matches all Tasks. Filter string should be of the format State=TaskStatus.State e.g. State=RUNNING",
                              "location": "query",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Page size.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "Page token.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListTasksResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "List Tasks associated with a job."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}