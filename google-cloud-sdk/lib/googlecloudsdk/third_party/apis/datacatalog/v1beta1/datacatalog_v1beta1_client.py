"""Generated client library for datacatalog version v1beta1."""
# NOTE: This file is autogenerated and should not be edited by hand.
from apitools.base.py import base_api
from googlecloudsdk.third_party.apis.datacatalog.v1beta1 import datacatalog_v1beta1_messages as messages


class DatacatalogV1beta1(base_api.BaseApiClient):
  """Generated client library for service datacatalog version v1beta1."""

  MESSAGES_MODULE = messages
  BASE_URL = u'https://datacatalog.googleapis.com/'

  _PACKAGE = u'datacatalog'
  _SCOPES = [u'https://www.googleapis.com/auth/cloud-platform']
  _VERSION = u'v1beta1'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _CLIENT_CLASS_NAME = u'DatacatalogV1beta1'
  _URL_VERSION = u'v1beta1'
  _API_KEY = None

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None, response_encoding=None):
    """Create a new datacatalog handle."""
    url = url or self.BASE_URL
    super(DatacatalogV1beta1, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers,
        response_encoding=response_encoding)
    self.catalog = self.CatalogService(self)
    self.entries = self.EntriesService(self)
    self.projects_datasets_entries = self.ProjectsDatasetsEntriesService(self)
    self.projects_datasets = self.ProjectsDatasetsService(self)
    self.projects = self.ProjectsService(self)

  class CatalogService(base_api.BaseApiService):
    """Service class for the catalog resource."""

    _NAME = u'catalog'

    def __init__(self, client):
      super(DatacatalogV1beta1.CatalogService, self).__init__(client)
      self._upload_configs = {
          }

    def Search(self, request, global_params=None):
      r"""Searches for Data Catalog for multiple resources like entries, tags that.
match a query.
This API is a custom method
(https://cloud.google.com/apis/design/custom_methods), and does not return
the complete resource, only the resource identifier and high level
fields. Clients can subsequentally call Get APIs.

      Args:
        request: (DatacatalogCatalogSearchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudDatacatalogV1beta1SearchCatalogResponse) The response message.
      """
      config = self.GetMethodConfig('Search')
      return self._RunMethod(
          config, request, global_params=global_params)

    Search.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'datacatalog.catalog.search',
        ordered_params=[],
        path_params=[],
        query_params=[u'orderBy', u'pageSize', u'pageToken', u'query'],
        relative_path=u'v1beta1/catalog:search',
        request_field='',
        request_type_name=u'DatacatalogCatalogSearchRequest',
        response_type_name=u'GoogleCloudDatacatalogV1beta1SearchCatalogResponse',
        supports_download=False,
    )

  class EntriesService(base_api.BaseApiService):
    """Service class for the entries resource."""

    _NAME = u'entries'

    def __init__(self, client):
      super(DatacatalogV1beta1.EntriesService, self).__init__(client)
      self._upload_configs = {
          }

    def Lookup(self, request, global_params=None):
      r"""Get an entry by Resource name.

      Args:
        request: (DatacatalogEntriesLookupRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudDatacatalogV1beta1Entry) The response message.
      """
      config = self.GetMethodConfig('Lookup')
      return self._RunMethod(
          config, request, global_params=global_params)

    Lookup.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'datacatalog.entries.lookup',
        ordered_params=[],
        path_params=[],
        query_params=[u'fullResourceName'],
        relative_path=u'v1beta1/entries:lookup',
        request_field='',
        request_type_name=u'DatacatalogEntriesLookupRequest',
        response_type_name=u'GoogleCloudDatacatalogV1beta1Entry',
        supports_download=False,
    )

  class ProjectsDatasetsEntriesService(base_api.BaseApiService):
    """Service class for the projects_datasets_entries resource."""

    _NAME = u'projects_datasets_entries'

    def __init__(self, client):
      super(DatacatalogV1beta1.ProjectsDatasetsEntriesService, self).__init__(client)
      self._upload_configs = {
          }

    def List(self, request, global_params=None):
      r"""Lists entries.

      Args:
        request: (DatacatalogProjectsDatasetsEntriesListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudDatacatalogV1beta1ListEntriesResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1beta1/projects/{projectsId}/datasets/{datasetsId}/entries',
        http_method=u'GET',
        method_id=u'datacatalog.projects.datasets.entries.list',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'pageSize', u'pageToken'],
        relative_path=u'v1beta1/{+parent}/entries',
        request_field='',
        request_type_name=u'DatacatalogProjectsDatasetsEntriesListRequest',
        response_type_name=u'GoogleCloudDatacatalogV1beta1ListEntriesResponse',
        supports_download=False,
    )

  class ProjectsDatasetsService(base_api.BaseApiService):
    """Service class for the projects_datasets resource."""

    _NAME = u'projects_datasets'

    def __init__(self, client):
      super(DatacatalogV1beta1.ProjectsDatasetsService, self).__init__(client)
      self._upload_configs = {
          }

  class ProjectsService(base_api.BaseApiService):
    """Service class for the projects resource."""

    _NAME = u'projects'

    def __init__(self, client):
      super(DatacatalogV1beta1.ProjectsService, self).__init__(client)
      self._upload_configs = {
          }
