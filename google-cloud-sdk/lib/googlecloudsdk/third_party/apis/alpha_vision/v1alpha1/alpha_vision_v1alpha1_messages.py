"""Generated message classes for alpha_vision version v1alpha1.

Integrates Google Vision features, including image labeling, face, logo, and
landmark detection, optical character recognition (OCR), and detection of
explicit content, into applications.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from apitools.base.protorpclite import messages as _messages
from apitools.base.py import encoding
from apitools.base.py import extra_types


package = 'alpha_vision'


class AlphaVisionProductSearchCatalogsDeleteReferenceImagesRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsDeleteReferenceImagesRequest object.

  Fields:
    parent: Resource name of the catalog containing the reference images to be
      deleted.  Format is `productSearch/catalogs/CATALOG_NUMBER`.
    productId: The product ID of the reference images to delete.
  """

  parent = _messages.StringField(1, required=True)
  productId = _messages.StringField(2)


class AlphaVisionProductSearchCatalogsDeleteRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsDeleteRequest object.

  Fields:
    name: Resource name of catalog to delete.  Format is:
      `productSearch/catalogs/CATALOG_NUMBER`
  """

  name = _messages.StringField(1, required=True)


class AlphaVisionProductSearchCatalogsListRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsListRequest object."""


class AlphaVisionProductSearchCatalogsReferenceImagesCreateRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsReferenceImagesCreateRequest object.

  Fields:
    parent: Resource name of the catalog in which to create the reference
      image.  Format is `productSearch/catalogs/CATALOG_NUMBER`.
    referenceImage: A ReferenceImage resource to be passed as the request
      body.
  """

  parent = _messages.StringField(1, required=True)
  referenceImage = _messages.MessageField('ReferenceImage', 2)


class AlphaVisionProductSearchCatalogsReferenceImagesDeleteRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsReferenceImagesDeleteRequest object.

  Fields:
    name: The resource name of the reference image to delete.  Format is:
      `productSearch/catalogs/CATALOG_NUMBER/referenceImages/IMAGE_NUMBER`
  """

  name = _messages.StringField(1, required=True)


class AlphaVisionProductSearchCatalogsReferenceImagesGetRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsReferenceImagesGetRequest object.

  Fields:
    name: The resource name of the reference image to get.  Format is:
      `productSearch/catalogs/CATALOG_NUMBER/referenceImages/IMAGE_NUMBER`
  """

  name = _messages.StringField(1, required=True)


class AlphaVisionProductSearchCatalogsReferenceImagesListRequest(_messages.Message):
  """A AlphaVisionProductSearchCatalogsReferenceImagesListRequest object.

  Fields:
    pageSize: The maximum number of images to return per page. Default is 10.
      Values higher than 1000 will be treated as 1000.
    pageToken: A token identifying a page of results to be returned. This is
      the value of `nextPageToken` returned in a previous reference image list
      request.  Defaults to the first page if not specified.
    parent: Resource name of the catalog containing the reference images.
      Format is `productSearch/catalogs/CATALOG_NUMBER`.
    productId: A filter for listing only reference images with this product
      ID.
  """

  pageSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(2)
  parent = _messages.StringField(3, required=True)
  productId = _messages.StringField(4)


class AsyncAnnotateFileResponse(_messages.Message):
  """The response for a single offline file annotation request.

  Fields:
    outputConfig: The output location and metadata from
      AsyncAnnotateFileRequest.
  """

  outputConfig = _messages.MessageField('OutputConfig', 1)


class AsyncBatchAnnotateFilesResponse(_messages.Message):
  """Response to an async batch file annotation request.

  Fields:
    responses: The list of file annotation responses, one for each request in
      AsyncBatchAnnotateFilesRequest.
  """

  responses = _messages.MessageField('AsyncAnnotateFileResponse', 1, repeated=True)


class BatchOperationMetadata(_messages.Message):
  """Metadata for the batch operations such as the current state.  This is
  included in the `metadata` field of the `Operation` returned by the
  `GetOperation` call of the `google::longrunning::Operations` service.

  Enums:
    StateValueValuesEnum: The current state of the batch operation.

  Fields:
    createTime: The time when the batch request was submitted to the server.
    state: The current state of the batch operation.
    updateTime: The time when the batch request is recently updated.
      google.longrunning.Operation.done is set to true.
  """

  class StateValueValuesEnum(_messages.Enum):
    """The current state of the batch operation.

    Values:
      STATE_UNSPECIFIED: Invalid.
      CREATED: Request is created.
      RUNNING: The batch request is running.
      DONE: The batch is done and no item has been successfully processed.
      CANCELLED: The batch is done after the
        longrunning.Operations.CancelOperation has been called by the user.
        Any records that were processed before the cancel command are output
        as specified in the request.
    """
    STATE_UNSPECIFIED = 0
    CREATED = 1
    RUNNING = 2
    DONE = 3
    CANCELLED = 4

  createTime = _messages.StringField(1)
  state = _messages.EnumField('StateValueValuesEnum', 2)
  updateTime = _messages.StringField(3)


class BoundingPoly(_messages.Message):
  """A bounding polygon for the detected image annotation.

  Fields:
    vertices: The bounding polygon vertices.
  """

  vertices = _messages.MessageField('Vertex', 1, repeated=True)


class Catalog(_messages.Message):
  """A `Catalog` contains `ReferenceImages`.

  Fields:
    name: The resource name of the catalog.  Format is:
      `productSearch/catalogs/CATALOG_NUMBER`. This field is ignored when
      creating a catalog.
  """

  name = _messages.StringField(1)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class GcsDestination(_messages.Message):
  """The Google Cloud Storage location where the output will be written to.

  Fields:
    uri: Google Cloud Storage URI where the results will be stored. Results
      will be in JSON format and preceded by its corresponding input URI. This
      field can either represent a single file, or a prefix for multiple
      outputs. Prefixes must end in a `/`.  Examples:  *    File: gs://bucket-
      name/filename.json *    Prefix: gs://bucket-name/prefix/here/ *    File:
      gs://bucket-name/prefix/here  If multiple outputs, each response is
      still AnnotateFileResponse, each of which contains some subset of the
      full list of AnnotateImageResponse. Multiple outputs can happen if, for
      example, the output JSON is too large and overflows into multiple
      sharded files.
  """

  uri = _messages.StringField(1)


class GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse(_messages.Message):
  """The response for a single offline file annotation request.

  Fields:
    outputConfig: The output location and metadata from
      AsyncAnnotateFileRequest.
  """

  outputConfig = _messages.MessageField('GoogleCloudVisionV1p2beta1OutputConfig', 1)


class GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse(_messages.Message):
  """Response to an async batch file annotation request.

  Fields:
    responses: The list of file annotation responses, one for each request in
      AsyncBatchAnnotateFilesRequest.
  """

  responses = _messages.MessageField('GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse', 1, repeated=True)


class GoogleCloudVisionV1p2beta1GcsDestination(_messages.Message):
  """The Google Cloud Storage location where the output will be written to.

  Fields:
    uri: Google Cloud Storage URI where the results will be stored. Results
      will be in JSON format and preceded by its corresponding input URI. This
      field can either represent a single file, or a prefix for multiple
      outputs. Prefixes must end in a `/`.  Examples:  *    File: gs://bucket-
      name/filename.json *    Prefix: gs://bucket-name/prefix/here/ *    File:
      gs://bucket-name/prefix/here  If multiple outputs, each response is
      still AnnotateFileResponse, each of which contains some subset of the
      full list of AnnotateImageResponse. Multiple outputs can happen if, for
      example, the output JSON is too large and overflows into multiple
      sharded files.
  """

  uri = _messages.StringField(1)


class GoogleCloudVisionV1p2beta1OperationMetadata(_messages.Message):
  """Contains metadata for the BatchAnnotateImages operation.

  Enums:
    StateValueValuesEnum: Current state of the batch operation.

  Fields:
    createTime: The time when the batch request was received.
    state: Current state of the batch operation.
    updateTime: The time when the operation result was last updated.
  """

  class StateValueValuesEnum(_messages.Enum):
    """Current state of the batch operation.

    Values:
      STATE_UNSPECIFIED: Invalid.
      CREATED: Request is received.
      RUNNING: Request is actively being processed.
      DONE: The batch processing is done.
      CANCELLED: The batch processing was cancelled.
    """
    STATE_UNSPECIFIED = 0
    CREATED = 1
    RUNNING = 2
    DONE = 3
    CANCELLED = 4

  createTime = _messages.StringField(1)
  state = _messages.EnumField('StateValueValuesEnum', 2)
  updateTime = _messages.StringField(3)


class GoogleCloudVisionV1p2beta1OutputConfig(_messages.Message):
  """The desired output location and metadata.

  Fields:
    batchSize: The max number of response protos to put into each output JSON
      file on GCS. The valid range is [1, 100]. If not specified, the default
      value is 20.  For example, for one pdf file with 100 pages, 100 response
      protos will be generated. If `batch_size` = 20, then 5 json files each
      containing 20 response protos will be written under the prefix
      `gcs_destination`.`uri`.  Currently, batch_size only applies to
      GcsDestination, with potential future support for other output
      configurations.
    gcsDestination: The Google Cloud Storage location to write the output(s)
      to.
  """

  batchSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  gcsDestination = _messages.MessageField('GoogleCloudVisionV1p2beta1GcsDestination', 2)


class ImportCatalogsGcsSource(_messages.Message):
  """The Google Cloud Storage location for a csv file which preserves a list
  of ImportCatalogRequests in each line.

  Fields:
    csvFileUri: The Google Cloud Storage URI of the input csv file.  The URI
      must start with gs://  The format of the input csv file should be each
      image per line. In each line, there 5 columns as follows. 1.
      catalog_name 2. image_uri 3. product_id 4. product_category 5.
      bounding_poly  The bounding_poly is around the area of interest in the
      reference image. Optional. If the `bounding_poly` is not specified in
      the image, the inferred bounding polygon is the entire image.  The
      format of bounding_poly should be a line of even number of integers
      separated by comma as "p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y".
  """

  csvFileUri = _messages.StringField(1)


class ImportCatalogsInputConfig(_messages.Message):
  """The input content for the `ImportCatalogs` method.

  Fields:
    gcsSource: The Google Cloud Storage location for a csv file which
      preserves a list of ImportProductSetRequests in each line.
  """

  gcsSource = _messages.MessageField('ImportCatalogsGcsSource', 1)


class ImportCatalogsRequest(_messages.Message):
  """Request message for the `ImportProductSets` method.

  Fields:
    inputConfig: The input content for the list of requests.
  """

  inputConfig = _messages.MessageField('ImportCatalogsInputConfig', 1)


class ImportCatalogsResponse(_messages.Message):
  """Response message for the `ImportCatalogs` method.  This message is
  returned by the google.longrunning.Operations.GetOperation method in the
  returned google.longrunning.Operation.response field.

  Fields:
    referenceImages: The list of reference_images that are imported
      successfully.
    statuses: The rpc status for each ImportCatalogs request, including
      errors.
  """

  referenceImages = _messages.MessageField('ReferenceImage', 1, repeated=True)
  statuses = _messages.MessageField('Status', 2, repeated=True)


class ListCatalogsResponse(_messages.Message):
  """Response message for the `ListCatalogs` method.

  Fields:
    catalogs: List of catalogs.
  """

  catalogs = _messages.MessageField('Catalog', 1, repeated=True)


class ListReferenceImagesResponse(_messages.Message):
  """Response message for the `ListReferenceImages` method.

  Fields:
    nextPageToken: A token identifying the next page of results. If the value
      is an empty string (""), there are no more results.  Pass this value to
      `pageToken` in an otherwise identical list request to see the next page
      of results.
    referenceImages: The list of reference images.
  """

  nextPageToken = _messages.StringField(1)
  referenceImages = _messages.MessageField('ReferenceImage', 2, repeated=True)


class Operation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: Service-specific metadata associated with the operation.
      It typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    ResponseValue: The normal response of the operation in case of success.
      If the original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If `true`, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure or
      cancellation.
    metadata: Service-specific metadata associated with the operation.  It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping,
      the `name` should have the format of `operations/some/unique/name`.
    response: The normal response of the operation in case of success.  If the
      original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """Service-specific metadata associated with the operation.  It typically
    contains progress information and common metadata such as create time.
    Some services might not provide such metadata.  Any method that returns a
    long-running operation should document the metadata type, if any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """The normal response of the operation in case of success.  If the
    original method returns no data on success, such as `Delete`, the response
    is `google.protobuf.Empty`.  If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource.  For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name.  For example, if the original method name is
    `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class OperationMetadata(_messages.Message):
  """Contains metadata for the BatchAnnotateImages operation.

  Enums:
    StateValueValuesEnum: Current state of the batch operation.

  Fields:
    createTime: The time when the batch request was received.
    state: Current state of the batch operation.
    updateTime: The time when the operation result was last updated.
  """

  class StateValueValuesEnum(_messages.Enum):
    """Current state of the batch operation.

    Values:
      STATE_UNSPECIFIED: Invalid.
      CREATED: Request is received.
      RUNNING: Request is actively being processed.
      DONE: The batch processing is done.
      CANCELLED: The batch processing was cancelled.
    """
    STATE_UNSPECIFIED = 0
    CREATED = 1
    RUNNING = 2
    DONE = 3
    CANCELLED = 4

  createTime = _messages.StringField(1)
  state = _messages.EnumField('StateValueValuesEnum', 2)
  updateTime = _messages.StringField(3)


class OutputConfig(_messages.Message):
  """The desired output location and metadata.

  Fields:
    batchSize: The max number of response protos to put into each output JSON
      file on GCS. The valid range is [1, 100]. If not specified, the default
      value is 20.  For example, for one pdf file with 100 pages, 100 response
      protos will be generated. If `batch_size` = 20, then 5 json files each
      containing 20 response protos will be written under the prefix
      `gcs_destination`.`uri`.  Currently, batch_size only applies to
      GcsDestination, with potential future support for other output
      configurations.
    gcsDestination: The Google Cloud Storage location to write the output(s)
      to.
  """

  batchSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  gcsDestination = _messages.MessageField('GcsDestination', 2)


class ReferenceImage(_messages.Message):
  """A `ReferenceImage` represents a product image and its associated
  metadata, such as product ID, category, and bounding box.

  Enums:
    CategoryValueValuesEnum: The category for the product identified by the
      reference image. Optional. Inferred by the system if not specified in
      the create request. [Deprecated] Use `product_category`.

  Fields:
    boundingPoly: The bounding polygon around the area of interest in the
      reference image. Optional. Inferred by the system if not provided. If
      `product_category` is specified in the create request without
      `bounding_poly`, the inferred bounding polygon is the entire image.  The
      provided shape is converted into a non-rotated rectangle. Once
      converted, the small edge of the rectangle must be greater than or equal
      to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5
      is not).
    category: The category for the product identified by the reference image.
      Optional. Inferred by the system if not specified in the create request.
      [Deprecated] Use `product_category`.
    createTime: Resource creation timestamp. Output only.
    deleteTime: Resource deletion timestamp.  This timestamp indicates when
      the resource was marked for deletion. Resources marked for deletion will
      continue to show up in product search results until the index is rebuilt
      (currently daily).  The value of this field is 0 for resources that have
      NOT been deleted.  Output only.
    imageUri: The Google Cloud Storage URI of the reference image.  Required.
    name: The resource name of the reference image.  Format is:
      `productSearch/catalogs/CATALOG_NUMBER/referenceImages/IMAGE_NUMBER`.
      This field is ignored when creating a reference image.
    productCategory: The category for the product identified by the reference
      image. Optional. Inferred by the system if not specified in the create
      request. Supported values are `bag` and `shoe`.
    productId: A user-defined ID for the product identified by the reference
      image. Required. A `productId` can be associated with multiple reference
      images.  Restricted to 255 characters matching the following regular
      expression: `[a-zA-Z0-9_-]+`
  """

  class CategoryValueValuesEnum(_messages.Enum):
    """The category for the product identified by the reference image.
    Optional. Inferred by the system if not specified in the create request.
    [Deprecated] Use `product_category`.

    Values:
      PRODUCT_SEARCH_CATEGORY_UNSPECIFIED: Default value used when a category
        is not specified.
      SHOES: Shoes category.
      BAGS: Bags category.
    """
    PRODUCT_SEARCH_CATEGORY_UNSPECIFIED = 0
    SHOES = 1
    BAGS = 2

  boundingPoly = _messages.MessageField('BoundingPoly', 1)
  category = _messages.EnumField('CategoryValueValuesEnum', 2)
  createTime = _messages.StringField(3)
  deleteTime = _messages.StringField(4)
  imageUri = _messages.StringField(5)
  name = _messages.StringField(6)
  productCategory = _messages.StringField(7)
  productId = _messages.StringField(8)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" to include in api
      requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class Status(_messages.Message):
  """The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). The error model is designed to be:
  - Simple to use and understand for most users - Flexible enough to meet
  unexpected needs  # Overview  The `Status` message contains three pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of google.rpc.Code, but it may accept additional error codes
  if needed.  The error message should be a developer-facing English message
  that helps developers *understand* and *resolve* the error. If a localized
  user-facing error message is needed, put the localized message in the error
  details or localize it in the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` that can be used for common error
  conditions.  # Language mapping  The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses  The error model and the `Status`
  message can be used in a variety of environments, either with or without
  APIs, to provide a consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting.  - Batch operations. If a
  client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details.  There is a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


class Vertex(_messages.Message):
  """A vertex represents a 2D point in the image. NOTE: the vertex coordinates
  are in the same scale as the original image.

  Fields:
    x: X coordinate.
    y: Y coordinate.
  """

  x = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  y = _messages.IntegerField(2, variant=_messages.Variant.INT32)


encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2')
