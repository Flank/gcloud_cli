{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "binaryauthorization:v1alpha1",
  "name": "binaryauthorization",
  "canonicalName": "Binary Authorization",
  "version": "v1alpha1",
  "revision": "0",
  "title": "Binary Authorization API",
  "description": "",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "",
  "protocol": "rest",
  "rootUrl": "https://binaryauthorization.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://binaryauthorization.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "bearer_token": {
      "type": "string",
      "description": "OAuth bearer token.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "pp": {
      "type": "boolean",
      "description": "Pretty-print response.",
      "default": "true",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "schemas": {
    "Policy": {
      "id": "Policy",
      "description": "A policy for container image binary authorization.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The resource name, in the format `projects\/*\/policy`. There is\nat most one policy per project.",
          "type": "string"
        },
        "admissionWhitelistPatterns": {
          "description": "Optional. Admission policy whitelisting. A matching admission request will\nalways be permitted. This feature is typically used to exclude Google or\nthird-party infrastructure images from Binary Authorization policies.",
          "type": "array",
          "items": {
            "$ref": "AdmissionWhitelistPattern"
          }
        },
        "clusterAdmissionRules": {
          "description": "Optional. Per-cluster admission rules. Cluster spec format:\n`location.clusterId`. There can be at most one admission rule per cluster\nspec.\nA `location` is either a compute zone (e.g. us-central1-a) or a region\n(e.g. us-central1).\nFor `clusterId` syntax restrictions see\nhttps:\/\/cloud.google.com\/container-engine\/reference\/rest\/v1\/projects.zones.clusters.",
          "type": "object",
          "additionalProperties": {
            "$ref": "AdmissionRule"
          }
        },
        "defaultAdmissionRule": {
          "description": "Required. Default admission rule for a cluster without a per-cluster\nadmission rule.",
          "$ref": "AdmissionRule"
        },
        "updateTime": {
          "description": "Output only. Time when the policy was last updated.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "AdmissionWhitelistPattern": {
      "id": "AdmissionWhitelistPattern",
      "description": "An admission whitelist pattern allows images to\nbe excluded from policy enforcement.",
      "type": "object",
      "properties": {
        "namePattern": {
          "description": "An image name pattern to whitelist, in the form `registry\/path\/to\/image`.\nThis supports a trailing `*` as a wildcard, but this is allowed only in\ntext after the `registry\/` part.",
          "type": "string"
        }
      }
    },
    "AdmissionRule": {
      "id": "AdmissionRule",
      "description": "An admission rule specifies whether a container image must\nbe attested to by an attestation authority, or\nwhether it is always permitted or denied.",
      "type": "object",
      "properties": {
        "evaluationMode": {
          "description": "Required. How this admission rule will be evaluated.",
          "enumDescriptions": [
            "Mandatory.",
            "Images always conform to this admission rule.",
            "For an image to conform to this admission rule, it must satisfy the\nrequirements specified with a non-empty require_attestation_authority\nfield.",
            "Images never conform to this admission rule."
          ],
          "type": "string",
          "enum": [
            "EVALUATION_MODE_UNSPECIFIED",
            "ALWAYS_CONFORMANT",
            "REQUIRE_ATTESTATION",
            "NEVER_CONFORMANT"
          ]
        },
        "requireAttestationAuthorities": {
          "description": "Optional. The resource names of the authorities that must attest to a\ncontainer image, in the format `projects\/*\/attestationAuthorities\/*`. Each\nauthority must exist before a policy can reference it.\n\nNote: this field must be non-empty when the evaluation_mode field specifies\nREQUIRE_ATTESTATION, otherwise it must be empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonConformanceAction": {
          "description": "Required. The action when an image does not conform to this admission rule.",
          "enumDescriptions": [
            "Mandatory.",
            "Deny the admission request with audit logging.",
            "Audit logging only, as if the admission request specifies break-glass."
          ],
          "type": "string",
          "enum": [
            "NON_CONFORMANCE_ACTION_UNSPECIFIED",
            "DENY_AND_AUDIT_LOG",
            "AUDIT_LOG_ONLY"
          ]
        }
      }
    },
    "AttestationAuthority": {
      "id": "AttestationAuthority",
      "description": "An attestation authority that attests to container\nimage artifacts. An existing authority cannot be modified except where\nindicated.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The resource name, in the format:\n`projects\/*\/attestationAuthorities\/*`. This field may not be updated.",
          "type": "string"
        },
        "systemOwnedDrydockNote": {
          "description": "A Drydock ATTESTATION_AUTHORITY Note, created by the Binary Authorization\npolicy management service.",
          "$ref": "SystemOwnedDrydockNote"
        },
        "userOwnedDrydockNote": {
          "description": "A Drydock ATTESTATION_AUTHORITY Note, created by the user.",
          "$ref": "UserOwnedDrydockNote"
        },
        "updateTime": {
          "description": "Output only. Time when the attestation authority was last updated.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "SystemOwnedDrydockNote": {
      "id": "SystemOwnedDrydockNote",
      "description": "A system owned drydock note references a Drydock\nATTESTATION_AUTHORITY Note created by the Binary Authorization policy\nmanagement service.",
      "type": "object",
      "properties": {
        "noteReference": {
          "description": "Output only. The Drydock resource name of a ATTESTATION_AUTHORITY Note,\ncreated by the Binary Authorization policy management service, in the\nformat: `providers\/*\/notes\/*`. Drydock is an external dependency. This\nfield may not be updated.\n\nAn attestation by this authority is stored as a Drydock\nATTESTATION_AUTHORITY Occurrence that names a container image and that\nlinks to this Note.",
          "type": "string"
        },
        "publicKeys": {
          "description": "Optional. Public keys that verify attestations signed by this authority.\nThis field may be updated.\n\nIf this field is non-empty, one of the specified public keys must verify\nthat an attestation was signed by this authority for the\nimage specified in the admission request.\n\nIf this field is empty, this authority always denies admission.",
          "type": "array",
          "items": {
            "$ref": "AttestationAuthorityPublicKey"
          }
        }
      }
    },
    "AttestationAuthorityPublicKey": {
      "id": "AttestationAuthorityPublicKey",
      "description": "An attestation authority public key that\nwill be used to verify attestations signed by this authority.",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Optional. A descriptive comment. This field may be updated.",
          "type": "string"
        },
        "id": {
          "description": "Output only. This field will be overwritten with key ID information, for\nexample, an identifier extracted from a PGP public key. This field may not\nbe updated.",
          "type": "string"
        },
        "asciiArmoredPgpPublicKey": {
          "description": "ASCII-armored representation of a PGP public key, as the entire output by\nthe command `gpg --export --armor foo@example.com` (either LF or CRLF\nline endings).",
          "type": "string"
        }
      }
    },
    "UserOwnedDrydockNote": {
      "id": "UserOwnedDrydockNote",
      "description": "An user owned drydock note references a Drydock\nATTESTATION_AUTHORITY Note created by the user.",
      "type": "object",
      "properties": {
        "noteReference": {
          "description": "Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note,\ncreated by the user, in the format: `providers\/*\/notes\/*`. This field may\nnot be updated.\n\nAn attestation by this authority is stored as a Drydock\nATTESTATION_AUTHORITY Occurrence that names a container image and that\nlinks to this Note. Drydock is an external dependency.",
          "type": "string"
        },
        "publicKeys": {
          "description": "Optional. Public keys that verify attestations signed by this authority.\nThis field may be updated.\n\nIf this field is non-empty, one of the specified public keys must verify\nthat an attestation was signed by this authority for the\nimage specified in the admission request.\n\nIf this field is empty, this authority always denies admission.",
          "type": "array",
          "items": {
            "$ref": "AttestationAuthorityPublicKey"
          }
        }
      }
    },
    "ListAttestationAuthoritiesResponse": {
      "id": "ListAttestationAuthoritiesResponse",
      "description": "Response message for BinauthzManagementService.ListAttestationAuthorities][].",
      "type": "object",
      "properties": {
        "attestationAuthorities": {
          "description": "The list of attestation authorities.",
          "type": "array",
          "items": {
            "$ref": "AttestationAuthority"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the\nListAttestationAuthoritiesRequest.page_token field in the subsequent\ncall to the `ListAttestationAuthorities` method to retrieve the next page\nof results.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.",
          "$ref": "IamPolicy"
        }
      }
    },
    "IamPolicy": {
      "id": "IamPolicy",
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `Binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles\/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\",\n          ]\n        },\n        {\n          \"role\": \"roles\/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https:\/\/cloud.google.com\/iam\/docs).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Deprecated.",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`.\n`bindings` with no members will result in an error.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten blindly.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.\nRequired",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@gmail.com` or `joe@example.com`.\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: A Google Apps domain name that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "resources": {
    "projects": {
      "methods": {
        "getPolicy": {
          "id": "binaryauthorization.projects.getPolicy",
          "path": "v1alpha1/{+name}",
          "flatPath": "v1alpha1/projects/{projectsId}/policy",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "Required. The resource name of the policy to retrieve, in the\nformat `projects\/*\/policy`.",
              "location": "path",
              "required": true,
              "pattern": "^projects\/[^\/]+\/policy$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Policy"
          },
          "description": "Gets the policy for this project. Returns a default\npolicy if the project does not have one."
        },
        "updatePolicy": {
          "id": "binaryauthorization.projects.updatePolicy",
          "path": "v1alpha1/{+name}",
          "flatPath": "v1alpha1/projects/{projectsId}/policy",
          "httpMethod": "PUT",
          "parameters": {
            "name": {
              "description": "Output only. The resource name, in the format `projects\/*\/policy`. There is\nat most one policy per project.",
              "location": "path",
              "required": true,
              "pattern": "^projects\/[^\/]+\/policy$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "request": {
            "$ref": "Policy"
          },
          "response": {
            "$ref": "Policy"
          },
          "description": "Creates or updates a project's policy, and returns a copy of the\nnew policy. A policy is always updated as a whole, to avoid race\nconditions with concurrent policy enforcement (or management!) requests.\nReturns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the\nrequest is malformed."
        }
      }
      ,
      "resources": {
        "attestationAuthorities": {
          "methods": {
            "create": {
              "id": "binaryauthorization.projects.attestationAuthorities.create",
              "path": "v1alpha1/{+parent}/attestationAuthorities",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The parent of this attestation authority.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "attestationAuthorityId": {
                  "description": "Required. The attestation authority ID.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "AttestationAuthority"
              },
              "response": {
                "$ref": "AttestationAuthority"
              },
              "description": "Creates an attestation authority, and returns a\ncopy of the new attestation authority.\nReturns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the\nrequest is malformed, ALREADY_EXISTS if the attestation\nauthority already exists."
            },
            "get": {
              "id": "binaryauthorization.projects.attestationAuthorities.get",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities/{attestationAuthoritiesId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The name of the [attestation authority]AttestationAuthority] to\nretrieve, in the format `projects\/*\/attestationAuthorities\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestationAuthorities\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "AttestationAuthority"
              },
              "description": "Gets an [AttestationAuthority].\nReturns NOT_FOUND if the [AttestationAuthority] does not exist."
            },
            "update": {
              "id": "binaryauthorization.projects.attestationAuthorities.update",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities/{attestationAuthoritiesId}",
              "httpMethod": "PUT",
              "parameters": {
                "name": {
                  "description": "Required. The resource name, in the format:\n`projects\/*\/attestationAuthorities\/*`. This field may not be updated.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestationAuthorities\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "AttestationAuthority"
              },
              "response": {
                "$ref": "AttestationAuthority"
              },
              "description": "Updates an [AttestationAuthority].\nReturns NOT_FOUND if the [AttestationAuthority] does not exist."
            },
            "list": {
              "id": "binaryauthorization.projects.attestationAuthorities.list",
              "path": "v1alpha1/{+parent}/attestationAuthorities",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The resource name of the project associated with the\nattestation authorities, in the format\n`projects\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Requested page size. The server may return fewer results than requested. If\nunspecified, the server will pick an appropriate default.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "A token identifying a page of results the server should return. Typically,\nthis is the value of ListAttestationAuthoritiesResponse.next_page_token\nreturned from the previous call to the `ListAttestationAuthorities` method.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListAttestationAuthoritiesResponse"
              },
              "description": "Lists attestation authorities.\nReturns INVALID_ARGUMENT if the project does not exist."
            },
            "delete": {
              "id": "binaryauthorization.projects.attestationAuthorities.delete",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities/{attestationAuthoritiesId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. The name of the attestation authority to\ndelete, in the format `projects\/*\/attestationAuthorities\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestationAuthorities\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "description": "Deletes an attestation authority. Returns NOT_FOUND\nif the attestation authority does not exist."
            },
            "setIamPolicy": {
              "id": "binaryauthorization.projects.attestationAuthorities.setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities/{attestationAuthoritiesId}:setIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestationAuthorities\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "IamPolicy"
              },
              "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy."
            },
            "getIamPolicy": {
              "id": "binaryauthorization.projects.attestationAuthorities.getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities/{attestationAuthoritiesId}:getIamPolicy",
              "httpMethod": "GET",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestationAuthorities\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "IamPolicy"
              },
              "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset."
            },
            "testIamPermissions": {
              "id": "binaryauthorization.projects.attestationAuthorities.testIamPermissions",
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "flatPath": "v1alpha1/projects/{projectsId}/attestationAuthorities/{attestationAuthoritiesId}:testIamPermissions",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestationAuthorities\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning."
            }
          }
        },
        "policy": {
          "methods": {
            "setIamPolicy": {
              "id": "binaryauthorization.projects.policy.setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/policy:setIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/policy$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "IamPolicy"
              },
              "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy."
            },
            "getIamPolicy": {
              "id": "binaryauthorization.projects.policy.getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/policy:getIamPolicy",
              "httpMethod": "GET",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/policy$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "IamPolicy"
              },
              "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset."
            },
            "testIamPermissions": {
              "id": "binaryauthorization.projects.policy.testIamPermissions",
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "flatPath": "v1alpha1/projects/{projectsId}/policy:testIamPermissions",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/policy$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning."
            }
          }
        }
      }
    }
  },
  "basePath": ""
}
