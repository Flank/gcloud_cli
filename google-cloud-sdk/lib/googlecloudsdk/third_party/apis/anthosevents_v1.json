{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "anthosevents:v1",
  "name": "anthosevents",
  "version": "v1",
  "revision": "0",
  "title": "Cloud Run for Anthos Events",
  "description": "",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "",
  "protocol": "rest",
  "rootUrl": "https://anthosevents.googleapis.com/",
  "mtlsRootUrl": "https://anthosevents.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://anthosevents.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "schemas": {
    "ConfigMap": {
      "id": "ConfigMap",
      "description": "Cloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nConfigMap holds configuration data for pods to consume.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/sig-architecture\/api-conventions.md#metadata",
          "$ref": "ObjectMeta"
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot\nbe updated (only object metadata can be modified).\nIf not set to true, the field can be modified at any time.\nDefaulted to nil.\nThis is a beta field enabled by ImmutableEphemeralVolumes feature gate.",
          "type": "boolean"
        },
        "data": {
          "description": "Data contains the configuration data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nValues with non-UTF-8 byte sequences must use the BinaryData field.\nThe keys stored in Data must not overlap with the keys in\nthe BinaryData field, this is enforced during validation process.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "binaryData": {
          "description": "BinaryData contains the binary data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nBinaryData can contain byte sequences that are not in the UTF-8 range.\nThe keys stored in BinaryData must not overlap with the ones in\nthe Data field, this is enforced during validation process.\nUsing this field will require 1.10+ apiserver and\nkubelet.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "ObjectMeta": {
      "id": "ObjectMeta",
      "description": "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all\npersisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name must be unique within a namespace, within a Cloud Run region.\nIs required when creating\nresources, although some resources may allow a client to request the\ngeneration of an appropriate name automatically. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: http:\/\/kubernetes.io\/docs\/user-guide\/identifiers#names\n+optional",
          "type": "string"
        },
        "generateName": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nGenerateName is an optional prefix, used by the server, to generate a\nunique name ONLY IF the Name field has not been provided. If this field is\nused, the name returned to the client will be different than the name\npassed. This value will also be combined with a unique suffix. The provided\nvalue has the same validation rules as the Name field, and may be truncated\nby the length of the suffix required to make the value unique on the\nserver.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with\nReason ServerTimeout indicating a unique name could not be found in the\ntime allotted, and the client should retry (optionally after the time\nindicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#idempotency\n string generateName = 2;",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique, within a\nCloud Run region. In Cloud Run the namespace must be equal to either the\nproject ID or project number.",
          "type": "string"
        },
        "selfLink": {
          "description": "(Optional)\n\nSelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n string selfLink = 4;",
          "type": "string"
        },
        "uid": {
          "description": "(Optional)\n\nUID is the unique in time and space value for this object. It is typically\ngenerated by the server on successful creation of a resource and is not\nallowed to change on PUT operations.\n\nPopulated by the system.\nRead-only.\nMore info: http:\/\/kubernetes.io\/docs\/user-guide\/identifiers#uids",
          "type": "string"
        },
        "resourceVersion": {
          "description": "(Optional)\n\nAn opaque value that represents the internal version of this object that\ncan be used by clients to determine when objects have changed. May be used\nfor optimistic concurrency, change detection, and the watch operation on a\nresource or set of resources. Clients must treat these values as opaque and\npassed unmodified back to the server. They may only be valid for a\nparticular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "generation": {
          "description": "(Optional)\n\nA sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.",
          "type": "integer",
          "format": "int32"
        },
        "creationTimestamp": {
          "description": "(Optional)\n\nCreationTimestamp is a timestamp representing the server time when this\nobject was created. It is not guaranteed to be set in happens-before order\nacross separate operations. Clients may not set this value. It is\nrepresented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#metadata",
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "(Optional)\n\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand routes.\nMore info: http:\/\/kubernetes.io\/docs\/user-guide\/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "(Optional)\n\nAnnotations is an unstructured key value map stored with a resource that\nmay be set by external tools to store and retrieve arbitrary metadata. They\nare not queryable and should be preserved when modifying objects. More\ninfo: http:\/\/kubernetes.io\/docs\/user-guide\/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ownerReferences": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nList of objects that own this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected.",
          "type": "array",
          "items": {
            "$ref": "OwnerReference"
          }
        },
        "deletionTimestamp": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nDeletionTimestamp is RFC 3339 date and time at which this resource will be\ndeleted. This field is set by the server when a graceful deletion is\nrequested by the user, and is not directly settable by a client. The\nresource is expected to be deleted (no longer visible from resource lists,\nand not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items,\ndeletion is blocked. Once the deletionTimestamp is set, this value may not\nbe unset or be set further into the future, although it may be shortened or\nthe resource may be deleted prior to this time. For example, a user may\nrequest that a pod is deleted in 30 seconds. The Kubelet will react by\nsending a graceful termination signal to the containers in the pod. After\nthat 30 seconds, the Kubelet will send a hard termination signal (SIGKILL)\nto the container and after cleanup, remove the pod from the API. In the\npresence of network partitions, this object may still exist after this\ntimestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#metadata",
          "type": "string",
          "format": "google-datetime"
        },
        "deletionGracePeriodSeconds": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nNumber of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also\nset. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int32"
        },
        "finalizers": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nMust be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\n+patchStrategy=merge",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nThe name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in\ndifferent clusters. This field is not set anywhere right now and apiserver\nis going to ignore it if set in create or update request.",
          "type": "string"
        }
      }
    },
    "OwnerReference": {
      "id": "OwnerReference",
      "description": "OwnerReference contains enough information to let you identify an owning\nobject. Currently, an owning object must be in the same namespace, so there\nis no namespace field.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info: http:\/\/kubernetes.io\/docs\/user-guide\/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info: http:\/\/kubernetes.io\/docs\/user-guide\/identifiers#uids",
          "type": "string"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.\n+optional",
          "type": "boolean"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
          "type": "boolean"
        }
      }
    },
    "Namespace": {
      "id": "Namespace",
      "description": "Cloud Run fully managed: not supported\n\nCloud Run on GKE: supported\n\nNamespace provides a scope for Names.\nUse of multiple namespaces is optional.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#metadata",
          "$ref": "ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/sig-architecture\/api-conventions.md#spec-and-status",
          "$ref": "NamespaceSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/sig-architecture\/api-conventions.md#spec-and-status",
          "$ref": "NamespaceStatus"
        }
      }
    },
    "NamespaceSpec": {
      "id": "NamespaceSpec",
      "description": "Cloud Run fully managed: not supported\n\nCloud Run on GKE: supported\n\nNamespaceSpec describes the attributes on a Namespace.",
      "type": "object",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently\nremove object from storage. More info:\nhttps:\/\/kubernetes.io\/docs\/tasks\/administer-cluster\/namespaces\/",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NamespaceStatus": {
      "id": "NamespaceStatus",
      "description": "Cloud Run fully managed: not supported\n\nCloud Run on GKE: supported\n\nNamespaceStatus is information about the current status of a Namespace.",
      "type": "object",
      "properties": {
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace.\nMore info: https:\/\/kubernetes.io\/docs\/tasks\/administer-cluster\/namespaces\/",
          "type": "string"
        }
      }
    },
    "ListNamespacesResponse": {
      "id": "ListNamespacesResponse",
      "description": "ListNamespacesResponse is a list of Namespace resources.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "The API version for this call such as \"core\/v1\".\nThe core API group that Namespaces are part of do not specify an explicit\ngroup name in the api version. So the api version here is just \"v1\".",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this resource, in this case \"NamespaceList\".",
          "type": "string"
        },
        "metadata": {
          "$ref": "ListMeta"
        },
        "items": {
          "description": "List of Namespaces.\nMore info: https:\/\/kubernetes.io\/docs\/concepts\/configuration\/namespace",
          "type": "array",
          "items": {
            "$ref": "Namespace"
          }
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListMeta": {
      "id": "ListMeta",
      "description": "ListMeta describes metadata that synthetic resources must have, including\nlists and various status objects. A resource may have only one of\n{ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "selfLink": {
          "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n+optional",
          "type": "string"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed. Value must\nbe treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items\nreturned, and indicates that the server has more data available. The value\nis opaque and may be used to issue another request to the endpoint that\nserved this list to retrieve the next set of available objects. Continuing\na list may not be possible if the server configuration has changed or more\nthan a few minutes have passed. The resourceVersion field returned when\nusing this continue value will be identical to the value in the first\nresponse.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "Secret": {
      "id": "Secret",
      "description": "Cloud Run fully managed: not supported\n\nCloud Run on GKE: supported\n\nSecret holds secret data of a certain type. The total bytes of the values in\nthe Data field must be less than MaxSecretSize bytes.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#metadata",
          "$ref": "ObjectMeta"
        },
        "data": {
          "description": "Data contains the secret data. Each key must consist of alphanumeric\ncharacters, '-', '_' or '.'. The serialized form of the secret data is a\nbase64 encoded string, representing the arbitrary (possibly non-string)\ndata value here. Described in https:\/\/tools.ietf.org\/html\/rfc4648#section-4",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "stringData": {
          "description": "stringData allows specifying non-binary secret data in string form.\nIt is provided as a write-only convenience method.\nAll keys and values are merged into the data field on write, overwriting\nany existing values. It is never output when reading from the API.\n+k8s:conversion-gen=false",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data.",
          "type": "string"
        }
      }
    },
    "ListSecretsResponse": {
      "id": "ListSecretsResponse",
      "description": "ListSecretsResponse is a list of Secret resources.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "The API version for this call such as \"core\/v1\".\nThe core API group that Secrets are part of do not specify an explicit\ngroup name in the api version. So the api version here is just \"v1\".",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this resource, in this case \"SecretList\".",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata associated with this Secret list.",
          "$ref": "ListMeta"
        },
        "items": {
          "description": "List of Secrets.\nMore info: https:\/\/kubernetes.io\/docs\/concepts\/configuration\/secret",
          "type": "array",
          "items": {
            "$ref": "Secret"
          }
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ServiceAccount": {
      "id": "ServiceAccount",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#metadata\n+optional",
          "$ref": "ObjectMeta"
        },
        "secrets": {
          "description": "Secrets is the list of secrets allowed to be used by pods running using\nthis ServiceAccount. More info:\nhttps:\/\/kubernetes.io\/docs\/concepts\/configuration\/secret +optional\n+patchMergeKey=name\n+patchStrategy=merge",
          "type": "array",
          "items": {
            "$ref": "ObjectReference"
          }
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace\nto use for pulling any images in pods that reference this ServiceAccount.\nImagePullSecrets are distinct from Secrets because Secrets can be mounted\nin the pod, but ImagePullSecrets are only accessed by the kubelet. More\ninfo:\nhttps:\/\/kubernetes.io\/docs\/concepts\/containers\/images\/#specifying-imagepullsecrets-on-a-pod\n+optional",
          "type": "array",
          "items": {
            "$ref": "LocalObjectReference"
          }
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether pods running as this service\naccount should have an API token automatically mounted. Can be overridden\nat the pod level. +optional",
          "type": "boolean"
        }
      }
    },
    "ObjectReference": {
      "id": "ObjectReference",
      "description": "ObjectReference contains enough information to let you inspect or modify the\nreferred object.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of the referent.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#types-kinds\n+optional",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent.\nMore info:\nhttps:\/\/kubernetes.io\/docs\/concepts\/overview\/working-with-objects\/namespaces\/\n+optional",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.\nMore info:\nhttps:\/\/kubernetes.io\/docs\/concepts\/overview\/working-with-objects\/names\/#names\n+optional",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.\nMore info:\nhttps:\/\/kubernetes.io\/docs\/concepts\/overview\/working-with-objects\/names\/#uids\n+optional",
          "type": "string"
        },
        "apiVersion": {
          "description": "API version of the referent.\n+optional",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info:\nhttps:\/\/git.k8s.io\/community\/contributors\/devel\/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this\nstring should contain a valid JSON\/Go field access statement, such as\ndesiredState.manifest.containers[2]. For example, if the object reference\nis to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container\nthat triggered the event) or if no container name is specified\n\"spec.containers[2]\" (container with index 2 in this pod). This syntax is\nchosen only to have some well-defined way of referencing a part of an\nobject.",
          "type": "string"
        }
      }
    },
    "LocalObjectReference": {
      "id": "LocalObjectReference",
      "description": "Cloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nLocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
      "type": "object",
      "properties": {
        "name": {
          "description": "(Optional)\n\nCloud Run fully managed: not supported\n\nCloud Run for Anthos: supported\n\nName of the referent.\nMore info:\nhttps:\/\/kubernetes.io\/docs\/concepts\/overview\/working-with-objects\/names\/#names",
          "type": "string"
        }
      }
    },
    "ListServiceAccountsResponse": {
      "id": "ListServiceAccountsResponse",
      "description": "ListServiceAccountsResponse is a list of Service Account resources.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "The API version for this call such as \"core\/v1\".\nThe core API group that Service Account are part of do not specify an\nexplicit group name in the api version. So the api version here is just\n\"v1\".",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this resource, in this case \"ServiceAccountList\".",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata associated with this Service Account list.",
          "$ref": "ListMeta"
        },
        "items": {
          "description": "List of Service Accounts.",
          "type": "array",
          "items": {
            "$ref": "ServiceAccount"
          }
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "configmaps": {
              "methods": {
                "create": {
                  "id": "anthosevents.projects.locations.configmaps.create",
                  "path": "v1/{+parent}/configmaps",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/configmaps",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The namespace to create the configmap in",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "ConfigMap"
                  },
                  "response": {
                    "$ref": "ConfigMap"
                  },
                  "description": "Creates a new config map."
                },
                "get": {
                  "id": "anthosevents.projects.locations.configmaps.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/configmaps/{configmapsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the config map being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/configmaps\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ConfigMap"
                  },
                  "description": "Rpc to retrieve config map"
                }
              }
            },
            "namespaces": {
              "methods": {
                "create": {
                  "id": "anthosevents.projects.locations.namespaces.create",
                  "path": "v1/{+parent}/namespaces",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project ID or project number in which this namespace should\nbe created.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Namespace"
                  },
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Creates a new namespace."
                },
                "list": {
                  "id": "anthosevents.projects.locations.namespaces.list",
                  "path": "v1/{+parent}/namespaces",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project ID or project number from which the namespaces should\nbe listed.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "limit": {
                      "description": "The maximum number of records that should be returned.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "includeUninitialized": {
                      "description": "Not currently used by Cloud Run.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "fieldSelector": {
                      "description": "Allows to filter resources based on a specific value for a field name.\nSend this in a query string format. i.e. 'metadata.name%3Dlorem'.\nNot currently used by Cloud Run.",
                      "location": "query",
                      "type": "string"
                    },
                    "labelSelector": {
                      "description": "Allows to filter resources based on a label. Supported operations are\n=, !=, exists, in, and notIn.",
                      "location": "query",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "The baseline resource version from which the list or watch operation should\nstart. Not currently used by Cloud Run.",
                      "location": "query",
                      "type": "string"
                    },
                    "watch": {
                      "description": "Flag that indicates that the client expects to watch this resource as well.\nNot currently used by Cloud Run.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "continue": {
                      "description": "Optional encoded string to continue paging.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListNamespacesResponse"
                  },
                  "description": "Rpc to list namespaces."
                },
                "get": {
                  "id": "anthosevents.projects.locations.namespaces.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Rpc to get information about a namespace."
                },
                "patch": {
                  "id": "anthosevents.projects.locations.namespaces.patch",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+$",
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Indicates which fields in the provided namespace to update.\nThis field is currently unused.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Namespace"
                  },
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Rpc to update a namespace."
                },
                "replaceNamespace": {
                  "id": "anthosevents.projects.locations.namespaces.replaceNamespace",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
                  "httpMethod": "PUT",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Namespace"
                  },
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Rpc to replace a namespace."
                },
                "delete": {
                  "id": "anthosevents.projects.locations.namespaces.delete",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being deleted. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+$",
                      "type": "string"
                    },
                    "propagationPolicy": {
                      "description": "Specifies the propagation policy of delete. Cloud Run currently ignores\nthis setting, and deletes in the background. Please see\nkubernetes.io\/docs\/concepts\/workloads\/controllers\/garbage-collection\/ for\nmore information.",
                      "location": "query",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Cloud Run currently ignores this parameter.",
                      "location": "query",
                      "type": "string"
                    },
                    "apiVersion": {
                      "description": "Cloud Run currently ignores this parameter.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Rpc to delete a namespace."
                }
              }
              ,
              "resources": {
                "configmaps": {
                  "methods": {
                    "replaceConfigMap": {
                      "id": "anthosevents.projects.locations.namespaces.configmaps.replaceConfigMap",
                      "path": "v1/{+name}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/configmaps/{configmapsId}",
                      "httpMethod": "PUT",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the configMap being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+\/configmaps\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ConfigMap"
                      },
                      "response": {
                        "$ref": "ConfigMap"
                      },
                      "description": "Rpc to replace a ConfigMap"
                    },
                    "patch": {
                      "id": "anthosevents.projects.locations.namespaces.configmaps.patch",
                      "path": "v1/{+name}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/configmaps/{configmapsId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "The name of the configMap being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+\/configmaps\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ConfigMap"
                      },
                      "response": {
                        "$ref": "ConfigMap"
                      },
                      "description": "Rpc to update a ConfigMap"
                    }
                  }
                },
                "serviceaccounts": {
                  "methods": {
                    "replaceServiceAccount": {
                      "id": "anthosevents.projects.locations.namespaces.serviceaccounts.replaceServiceAccount",
                      "path": "v1/{+name}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/serviceaccounts/{serviceaccountsId}",
                      "httpMethod": "PUT",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the serviceAccount being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/namespaces\/[^\/]+\/serviceaccounts\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ServiceAccount"
                      },
                      "response": {
                        "$ref": "ServiceAccount"
                      },
                      "description": "Rpc to replace a Service Account"
                    }
                  }
                }
              }
            },
            "secrets": {
              "methods": {
                "create": {
                  "id": "anthosevents.projects.locations.secrets.create",
                  "path": "v1/{+parent}/secrets",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/secrets",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project ID or project number in which this secret should\nbe created.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Secret"
                  },
                  "response": {
                    "$ref": "Secret"
                  },
                  "description": "Creates a new secret."
                },
                "list": {
                  "id": "anthosevents.projects.locations.secrets.list",
                  "path": "v1/{+parent}/secrets",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/secrets",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project ID or project number from which the secrets should\nbe listed.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "limit": {
                      "description": "The maximum number of records that should be returned.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "includeUninitialized": {
                      "description": "Not currently used by Cloud Run.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "fieldSelector": {
                      "description": "Allows to filter resources based on a specific value for a field name.\nSend this in a query string format. i.e. 'metadata.name%3Dlorem'.\nNot currently used by Cloud Run.",
                      "location": "query",
                      "type": "string"
                    },
                    "labelSelector": {
                      "description": "Allows to filter resources based on a label. Supported operations are\n=, !=, exists, in, and notIn.",
                      "location": "query",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "The baseline resource version from which the list or watch operation should\nstart. Not currently used by Cloud Run.",
                      "location": "query",
                      "type": "string"
                    },
                    "watch": {
                      "description": "Flag that indicates that the client expects to watch this resource as well.\nNot currently used by Cloud Run.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "continue": {
                      "description": "Optional encoded string to continue paging.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListSecretsResponse"
                  },
                  "description": "Rpc to list secrets."
                },
                "get": {
                  "id": "anthosevents.projects.locations.secrets.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the secret being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/secrets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Secret"
                  },
                  "description": "Rpc to get information about a secret."
                },
                "replaceSecret": {
                  "id": "anthosevents.projects.locations.secrets.replaceSecret",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}",
                  "httpMethod": "PUT",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the secret being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/secrets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Secret"
                  },
                  "response": {
                    "$ref": "Secret"
                  },
                  "description": "Rpc to replace a secret.\n\nOnly the spec and metadata labels and annotations are modifiable. After\nthe Update request, Cloud Run will work to make the 'status'\nmatch the requested 'spec'.\n\nMay provide metadata.resourceVersion to enforce update from last read for\noptimistic concurrency control."
                },
                "delete": {
                  "id": "anthosevents.projects.locations.secrets.delete",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the secret being deleted. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/secrets\/[^\/]+$",
                      "type": "string"
                    },
                    "propagationPolicy": {
                      "description": "Specifies the propagation policy of delete. Cloud Run currently ignores\nthis setting, and deletes in the background. Please see\nkubernetes.io\/docs\/concepts\/workloads\/controllers\/garbage-collection\/ for\nmore information.",
                      "location": "query",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Cloud Run currently ignores this parameter.",
                      "location": "query",
                      "type": "string"
                    },
                    "apiVersion": {
                      "description": "Cloud Run currently ignores this parameter.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Rpc to delete a secret."
                }
              }
            },
            "serviceaccounts": {
              "methods": {
                "get": {
                  "id": "anthosevents.projects.locations.serviceaccounts.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/serviceaccounts/{serviceaccountsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the service account being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/serviceaccounts\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ServiceAccount"
                  },
                  "description": "Rpc to retrieve service account"
                },
                "list": {
                  "id": "anthosevents.projects.locations.serviceaccounts.list",
                  "path": "v1/{+parent}/serviceaccounts",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/serviceaccounts",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "The project ID or project number from which the service account should\nbe listed.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListServiceAccountsResponse"
                  },
                  "description": "Rpc to list Service Accounts."
                }
              }
            }
          }
        }
      }
    },
    "api": {
      "resources": {
        "v1": {
          "resources": {
            "namespaces": {
              "methods": {
                "create": {
                  "id": "anthosevents.api.v1.namespaces.create",
                  "path": "api/v1/namespaces",
                  "flatPath": "api/v1/namespaces",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project ID or project number in which this namespace should\nbe created.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                  ],
                  "request": {
                    "$ref": "Namespace"
                  },
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Creates a new namespace."
                },
                "list": {
                  "id": "anthosevents.api.v1.namespaces.list",
                  "path": "api/v1/namespaces",
                  "flatPath": "api/v1/namespaces",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project ID or project number from which the namespaces should\nbe listed.",
                      "location": "query",
                      "type": "string"
                    },
                    "limit": {
                      "description": "The maximum number of records that should be returned.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "includeUninitialized": {
                      "description": "Not currently used by Cloud Run.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "fieldSelector": {
                      "description": "Allows to filter resources based on a specific value for a field name.\nSend this in a query string format. i.e. 'metadata.name%3Dlorem'.\nNot currently used by Cloud Run.",
                      "location": "query",
                      "type": "string"
                    },
                    "labelSelector": {
                      "description": "Allows to filter resources based on a label. Supported operations are\n=, !=, exists, in, and notIn.",
                      "location": "query",
                      "type": "string"
                    },
                    "resourceVersion": {
                      "description": "The baseline resource version from which the list or watch operation should\nstart. Not currently used by Cloud Run.",
                      "location": "query",
                      "type": "string"
                    },
                    "watch": {
                      "description": "Flag that indicates that the client expects to watch this resource as well.\nNot currently used by Cloud Run.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "continue": {
                      "description": "Optional encoded string to continue paging.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                  ],
                  "response": {
                    "$ref": "ListNamespacesResponse"
                  },
                  "description": "Rpc to list namespaces."
                },
                "get": {
                  "id": "anthosevents.api.v1.namespaces.get",
                  "path": "api/v1/{+name}",
                  "flatPath": "api/v1/namespaces/{namespacesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^namespaces\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Rpc to get information about a namespace."
                },
                "patch": {
                  "id": "anthosevents.api.v1.namespaces.patch",
                  "path": "api/v1/{+name}",
                  "flatPath": "api/v1/namespaces/{namespacesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^namespaces\/[^\/]+$",
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Indicates which fields in the provided namespace to update.\nThis field is currently unused.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Namespace"
                  },
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Rpc to update a namespace."
                },
                "replaceNamespace": {
                  "id": "anthosevents.api.v1.namespaces.replaceNamespace",
                  "path": "api/v1/{+name}",
                  "flatPath": "api/v1/namespaces/{namespacesId}",
                  "httpMethod": "PUT",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^namespaces\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Namespace"
                  },
                  "response": {
                    "$ref": "Namespace"
                  },
                  "description": "Rpc to replace a namespace."
                },
                "delete": {
                  "id": "anthosevents.api.v1.namespaces.delete",
                  "path": "api/v1/{+name}",
                  "flatPath": "api/v1/namespaces/{namespacesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the namespace being deleted. If needed, replace\n{namespace_id} with the project ID.",
                      "location": "path",
                      "required": true,
                      "pattern": "^namespaces\/[^\/]+$",
                      "type": "string"
                    },
                    "propagationPolicy": {
                      "description": "Specifies the propagation policy of delete. Cloud Run currently ignores\nthis setting, and deletes in the background. Please see\nkubernetes.io\/docs\/concepts\/workloads\/controllers\/garbage-collection\/ for\nmore information.",
                      "location": "query",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Cloud Run currently ignores this parameter.",
                      "location": "query",
                      "type": "string"
                    },
                    "apiVersion": {
                      "description": "Cloud Run currently ignores this parameter.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Rpc to delete a namespace."
                }
              }
              ,
              "resources": {
                "configmaps": {
                  "methods": {
                    "create": {
                      "id": "anthosevents.api.v1.namespaces.configmaps.create",
                      "path": "api/v1/{+parent}/configmaps",
                      "flatPath": "api/v1/namespaces/{namespacesId}/configmaps",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The namespace to create the configmap in",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "ConfigMap"
                      },
                      "response": {
                        "$ref": "ConfigMap"
                      },
                      "description": "Creates a new config map."
                    },
                    "get": {
                      "id": "anthosevents.api.v1.namespaces.configmaps.get",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/configmaps/{configmapsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the config map being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/configmaps\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "ConfigMap"
                      },
                      "description": "Rpc to retrieve config map"
                    },
                    "replaceConfigMap": {
                      "id": "anthosevents.api.v1.namespaces.configmaps.replaceConfigMap",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/configmaps/{configmapsId}",
                      "httpMethod": "PUT",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the configMap being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/configmaps\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ConfigMap"
                      },
                      "response": {
                        "$ref": "ConfigMap"
                      },
                      "description": "Rpc to replace a ConfigMap"
                    },
                    "patch": {
                      "id": "anthosevents.api.v1.namespaces.configmaps.patch",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/configmaps/{configmapsId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "The name of the configMap being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/configmaps\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ConfigMap"
                      },
                      "response": {
                        "$ref": "ConfigMap"
                      },
                      "description": "Rpc to update a ConfigMap"
                    }
                  }
                },
                "secrets": {
                  "methods": {
                    "create": {
                      "id": "anthosevents.api.v1.namespaces.secrets.create",
                      "path": "api/v1/{+parent}/secrets",
                      "flatPath": "api/v1/namespaces/{namespacesId}/secrets",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The project ID or project number in which this secret should\nbe created.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "Secret"
                      },
                      "response": {
                        "$ref": "Secret"
                      },
                      "description": "Creates a new secret."
                    },
                    "list": {
                      "id": "anthosevents.api.v1.namespaces.secrets.list",
                      "path": "api/v1/{+parent}/secrets",
                      "flatPath": "api/v1/namespaces/{namespacesId}/secrets",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. The project ID or project number from which the secrets should\nbe listed.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+$",
                          "type": "string"
                        },
                        "limit": {
                          "description": "The maximum number of records that should be returned.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "includeUninitialized": {
                          "description": "Not currently used by Cloud Run.",
                          "location": "query",
                          "type": "boolean"
                        },
                        "fieldSelector": {
                          "description": "Allows to filter resources based on a specific value for a field name.\nSend this in a query string format. i.e. 'metadata.name%3Dlorem'.\nNot currently used by Cloud Run.",
                          "location": "query",
                          "type": "string"
                        },
                        "labelSelector": {
                          "description": "Allows to filter resources based on a label. Supported operations are\n=, !=, exists, in, and notIn.",
                          "location": "query",
                          "type": "string"
                        },
                        "resourceVersion": {
                          "description": "The baseline resource version from which the list or watch operation should\nstart. Not currently used by Cloud Run.",
                          "location": "query",
                          "type": "string"
                        },
                        "watch": {
                          "description": "Flag that indicates that the client expects to watch this resource as well.\nNot currently used by Cloud Run.",
                          "location": "query",
                          "type": "boolean"
                        },
                        "continue": {
                          "description": "Optional encoded string to continue paging.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListSecretsResponse"
                      },
                      "description": "Rpc to list secrets."
                    },
                    "get": {
                      "id": "anthosevents.api.v1.namespaces.secrets.get",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/secrets/{secretsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the secret being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/secrets\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Secret"
                      },
                      "description": "Rpc to get information about a secret."
                    },
                    "replaceSecret": {
                      "id": "anthosevents.api.v1.namespaces.secrets.replaceSecret",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/secrets/{secretsId}",
                      "httpMethod": "PUT",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the secret being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/secrets\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "Secret"
                      },
                      "response": {
                        "$ref": "Secret"
                      },
                      "description": "Rpc to replace a secret.\n\nOnly the spec and metadata labels and annotations are modifiable. After\nthe Update request, Cloud Run will work to make the 'status'\nmatch the requested 'spec'.\n\nMay provide metadata.resourceVersion to enforce update from last read for\noptimistic concurrency control."
                    },
                    "delete": {
                      "id": "anthosevents.api.v1.namespaces.secrets.delete",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/secrets/{secretsId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the secret being deleted. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/secrets\/[^\/]+$",
                          "type": "string"
                        },
                        "propagationPolicy": {
                          "description": "Specifies the propagation policy of delete. Cloud Run currently ignores\nthis setting, and deletes in the background. Please see\nkubernetes.io\/docs\/concepts\/workloads\/controllers\/garbage-collection\/ for\nmore information.",
                          "location": "query",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Cloud Run currently ignores this parameter.",
                          "location": "query",
                          "type": "string"
                        },
                        "apiVersion": {
                          "description": "Cloud Run currently ignores this parameter.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "description": "Rpc to delete a secret."
                    }
                  }
                },
                "serviceaccounts": {
                  "methods": {
                    "create": {
                      "id": "anthosevents.api.v1.namespaces.serviceaccounts.create",
                      "path": "api/v1/{+parent}/serviceaccounts",
                      "flatPath": "api/v1/namespaces/{namespacesId}/serviceaccounts",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The namespace in which this service account should\nbe created.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "ServiceAccount"
                      },
                      "response": {
                        "$ref": "ServiceAccount"
                      },
                      "description": "Creates a new service account"
                    },
                    "get": {
                      "id": "anthosevents.api.v1.namespaces.serviceaccounts.get",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/serviceaccounts/{serviceaccountsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the service account being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/serviceaccounts\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "ServiceAccount"
                      },
                      "description": "Rpc to retrieve service account"
                    },
                    "list": {
                      "id": "anthosevents.api.v1.namespaces.serviceaccounts.list",
                      "path": "api/v1/{+parent}/serviceaccounts",
                      "flatPath": "api/v1/namespaces/{namespacesId}/serviceaccounts",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "The project ID or project number from which the service account should\nbe listed.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListServiceAccountsResponse"
                      },
                      "description": "Rpc to list Service Accounts."
                    },
                    "replaceServiceAccount": {
                      "id": "anthosevents.api.v1.namespaces.serviceaccounts.replaceServiceAccount",
                      "path": "api/v1/{+name}",
                      "flatPath": "api/v1/namespaces/{namespacesId}/serviceaccounts/{serviceaccountsId}",
                      "httpMethod": "PUT",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the serviceAccount being retrieved. If needed, replace\n{namespace_id} with the project ID.",
                          "location": "path",
                          "required": true,
                          "pattern": "^namespaces\/[^\/]+\/serviceaccounts\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ServiceAccount"
                      },
                      "response": {
                        "$ref": "ServiceAccount"
                      },
                      "description": "Rpc to replace a Service Account"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "project": {
      "resources": {
        "serviceaccounts": {
          "methods": {
            "create": {
              "id": "anthosevents.project.serviceaccounts.create",
              "path": "v1/{+parent}/serviceaccounts",
              "flatPath": "v1/project/{projectId}/serviceaccounts",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The namespace in which this service account should\nbe created.",
                  "location": "path",
                  "required": true,
                  "pattern": "^project\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "ServiceAccount"
              },
              "response": {
                "$ref": "ServiceAccount"
              },
              "description": "Creates a new service account"
            }
          }
        }
      }
    }
  },
  "basePath": ""
}