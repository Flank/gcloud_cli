{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "artifactregistry:v1alpha1",
  "name": "artifactregistry",
  "canonicalName": "Artifact Registry",
  "version": "v1alpha1",
  "revision": "0",
  "title": "Artifact Registry API",
  "description": "Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/artifacts/docs/",
  "protocol": "rest",
  "rootUrl": "https://artifactregistry.googleapis.com/",
  "mtlsRootUrl": "https://artifactregistry.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://artifactregistry.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        },
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "A resource that represents Google Cloud Platform location.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects\/example-project\/locations\/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com\/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportArtifactsRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportArtifactsRequest",
      "description": "The request to import new artifacts.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1GcsSource"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1GcsSource": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1GcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs:\/\/my_bucket\/\/my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsRequest",
      "description": "The request to import new apt artifacts.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsGcsSource"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsGcsSource": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs:\/\/my_bucket\/\/my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsRequest",
      "description": "The request to import new yum artifacts.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsGcsSource"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsGcsSource": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs:\/\/my_bucket\/\/my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsRequest",
      "description": "The request to import new googet artifacts.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsGcsSource"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsGcsSource": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs:\/\/my_bucket\/my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactRequest",
      "description": "The request to upload an artifact.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactMediaResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactMediaResponse",
      "description": "The response to upload an artifact.",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactRequest",
      "description": "The request to upload an artifact.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactMediaResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactMediaResponse",
      "description": "The response to upload an artifact.",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactRequest": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactRequest",
      "description": "The request to upload an artifact.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactMediaResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactMediaResponse",
      "description": "The response to upload an artifact.",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "aptArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1AptArtifact"
          }
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsErrorInfo"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1AptArtifact": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1AptArtifact",
      "description": "A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https:\/\/www.debian.org\/doc\/debian-policy\/ch-controlfields.html",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageName": {
          "description": "Output only. The Apt package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageType": {
          "description": "Output only. An artifact is a binary or source package.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package.",
            "Source package."
          ],
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ]
        },
        "architecture": {
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "component": {
          "description": "Output only. Repository component of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "controlFile": {
          "description": "Output only. Contents of the artifact's control metadata file.",
          "readOnly": true,
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsErrorInfo": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportArtifactsResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "packages": {
          "description": "The packages updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1Package"
          }
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ErrorInfo"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1Package": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1Package",
      "description": "Packages are named collections of versions.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the package, for example: \"projects\/p1\/locations\/us-central1\/repositories\/repo1\/packages\/pkg1\". If the package ID part contains slashes, the slashes are escaped.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the package.",
          "type": "string"
        },
        "createTime": {
          "description": "The time when the package was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "The time when the package was last updated. This includes publishing a new version of the package.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ErrorInfo": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1GcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "googetArtifacts": {
          "description": "The googet artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1GooGetArtifact"
          }
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsErrorInfo"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1GooGetArtifact": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1GooGetArtifact",
      "description": "A detailed representation of a GooGet artifact.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageName": {
          "description": "Output only. The googet package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "architecture": {
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsErrorInfo": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "yumArtifacts": {
          "description": "The yum artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1YumArtifact"
          }
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsErrorInfo"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1YumArtifact": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1YumArtifact",
      "description": "A detailed representation of a Yum artifact.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageName": {
          "description": "Output only. The yum package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageType": {
          "description": "Output only. An artifact is a binary or source package.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package (.rpm). .rpm",
            "Source package (.srpm)."
          ],
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ]
        },
        "architecture": {
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsErrorInfo": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactResponse",
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "properties": {
        "aptArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1AptArtifact"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactResponse",
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "properties": {
        "googetArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1GooGetArtifact"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactResponse": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactResponse",
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "properties": {
        "yumArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1YumArtifact"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1Repository": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1Repository",
      "description": "A Repository for storing artifacts with a specific format.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the repository, for example: \"projects\/p1\/locations\/us-central1\/repositories\/repo1\".",
          "type": "string"
        },
        "format": {
          "description": "The format of packages that are stored in the repository.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified package format.",
            "Docker package format.",
            "Maven package format.",
            "NPM package format.",
            "PyPI package format.",
            "APT package format.",
            "YUM package format.",
            "Python package format."
          ],
          "enum": [
            "FORMAT_UNSPECIFIED",
            "DOCKER",
            "MAVEN",
            "NPM",
            "PYPI",
            "APT",
            "YUM",
            "PYTHON"
          ]
        },
        "description": {
          "description": "The user-provided description of the repository.",
          "type": "string"
        },
        "labels": {
          "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "The time when the repository was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "The time when the repository was last updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "kmsKeyName": {
          "description": "The Cloud KMS resource name of the customer managed encryption key that\u2019s used to encrypt the contents of the Repository. Has the form: `projects\/my-project\/locations\/my-region\/keyRings\/my-kr\/cryptoKeys\/my-key`. This value may not be changed after the Repository has been created.",
          "type": "string"
        },
        "mode": {
          "description": "The mode of the repository.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified mode.",
            "A standard repository storing artifacts.",
            "A virtual repository to serve artifacts from one or more sources."
          ],
          "enum": [
            "MODE_UNSPECIFIED",
            "STANDARD_REPOSITORY",
            "VIRTUAL_REPOSITORY"
          ]
        },
        "upstreamPolicies": {
          "description": "Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UpstreamPolicy"
          }
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1alpha1UpstreamPolicy": {
      "id": "GoogleDevtoolsArtifactregistryV1alpha1UpstreamPolicy",
      "description": "Artifact policy configuration for the repository contents.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The user-provided ID of the upstream policy.",
          "type": "string"
        },
        "repository": {
          "description": "A reference to the repository resource, for example: \"projects\/p1\/locations\/us-central1\/repository\/repo1\".",
          "type": "string"
        },
        "priority": {
          "description": "Entries with a greater priority value take precedence in the pull order.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ImportAptArtifactsResponse": {
      "id": "ImportAptArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "aptArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "AptArtifact"
          }
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "ImportAptArtifactsErrorInfo"
          }
        }
      }
    },
    "AptArtifact": {
      "id": "AptArtifact",
      "description": "A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https:\/\/www.debian.org\/doc\/debian-policy\/ch-controlfields.html",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageName": {
          "description": "Output only. The Apt package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageType": {
          "description": "Output only. An artifact is a binary or source package.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package.",
            "Source package."
          ],
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ]
        },
        "architecture": {
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "component": {
          "description": "Output only. Repository component of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "controlFile": {
          "description": "Output only. Contents of the artifact's control metadata file.",
          "readOnly": true,
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ImportAptArtifactsErrorInfo": {
      "id": "ImportAptArtifactsErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportAptArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      }
    },
    "ImportAptArtifactsGcsSource": {
      "id": "ImportAptArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs:\/\/my_bucket\/\/my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "ImportYumArtifactsResponse": {
      "id": "ImportYumArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "yumArtifacts": {
          "description": "The yum artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "YumArtifact"
          }
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "ImportYumArtifactsErrorInfo"
          }
        }
      }
    },
    "YumArtifact": {
      "id": "YumArtifact",
      "description": "A detailed representation of a Yum artifact.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageName": {
          "description": "Output only. The yum package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageType": {
          "description": "Output only. An artifact is a binary or source package.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package (.rpm). .rpm",
            "Source package (.srpm)."
          ],
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ]
        },
        "architecture": {
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "ImportYumArtifactsErrorInfo": {
      "id": "ImportYumArtifactsErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportYumArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      }
    },
    "ImportYumArtifactsGcsSource": {
      "id": "ImportYumArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs:\/\/my_bucket\/\/my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "UploadAptArtifactMediaResponse": {
      "id": "UploadAptArtifactMediaResponse",
      "description": "The response to upload an artifact.",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      }
    },
    "UploadAptArtifactResponse": {
      "id": "UploadAptArtifactResponse",
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "properties": {
        "aptArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "AptArtifact"
          }
        }
      }
    },
    "UploadYumArtifactMediaResponse": {
      "id": "UploadYumArtifactMediaResponse",
      "description": "The response to upload an artifact.",
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      }
    },
    "UploadYumArtifactResponse": {
      "id": "UploadYumArtifactResponse",
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "properties": {
        "yumArtifacts": {
          "description": "The Apt artifacts updated.",
          "type": "array",
          "items": {
            "$ref": "YumArtifact"
          }
        }
      }
    },
    "DockerImage": {
      "id": "DockerImage",
      "description": "DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): - imageSizeBytes - mediaType - buildTime",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects\/\/locations\/\/repository\/\/dockerImages\/`. For example, \"projects\/test-project\/locations\/us-west4\/repositories\/test-repo\/dockerImages\/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest.",
          "type": "string"
        },
        "uri": {
          "description": "Required. URL to access the image. Example: us-west4-docker.pkg.dev\/test-project\/test-repo\/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
          "type": "string"
        },
        "tags": {
          "description": "Tags attached to this image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "imageSizeBytes": {
          "description": "Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.",
          "type": "string",
          "format": "int64"
        },
        "uploadTime": {
          "description": "Time the image was uploaded.",
          "type": "string",
          "format": "google-datetime"
        },
        "mediaType": {
          "description": "Media type of this image, e.g. \"application\/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource.",
          "type": "string"
        },
        "buildTime": {
          "description": "The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor and keeps the Version timestamps returned via OnePlatform consistent, as JSON marshals google.protobuf.Timestamp into an RFC 3339 string.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "list": {
              "id": "artifactregistry.projects.locations.list",
              "path": "v1alpha1/{+name}/locations",
              "flatPath": "v1alpha1/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like \"displayName=tokyo\", and is documented in more detail in [AIP-160](https:\/\/google.aip.dev\/160).",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "description": "Lists information about the supported locations for this service."
            },
            "get": {
              "id": "artifactregistry.projects.locations.get",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "description": "Gets information about a location."
            }
          }
          ,
          "resources": {
            "operations": {
              "methods": {
                "list": {
                  "id": "artifactregistry.projects.locations.operations.list",
                  "path": "v1alpha1/{+name}/operations",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users\/*\/operations`. To override the binding, API services can add a binding such as `\"\/v1\/{name=users\/*}\/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."
                },
                "get": {
                  "id": "artifactregistry.projects.locations.operations.get",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                }
              }
            },
            "repositories": {
              "methods": {
                "import": {
                  "id": "artifactregistry.projects.locations.repositories.import",
                  "path": "v1alpha1/{+parent}:import",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:import",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "The name of the parent resource where the artifacts will be imported.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportArtifactsRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Imports artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored."
                }
              }
              ,
              "resources": {
                "aptArtifacts": {
                  "methods": {
                    "import": {
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.import",
                      "path": "v1alpha1/{+parent}/aptArtifacts:import",
                      "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportAptArtifactsRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                },
                "yumArtifacts": {
                  "methods": {
                    "import": {
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.import",
                      "path": "v1alpha1/{+parent}/yumArtifacts:import",
                      "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportYumArtifactsRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                },
                "gooGetArtifacts": {
                  "methods": {
                    "import": {
                      "id": "artifactregistry.projects.locations.repositories.gooGetArtifacts.import",
                      "path": "v1alpha1/{+parent}/gooGetArtifacts:import",
                      "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/gooGetArtifacts:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1ImportGooGetArtifactsRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Imports GooGet artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                },
                "aptartifacts": {
                  "methods": {
                    "upload": {
                      "id": "artifactregistry.projects.locations.repositories.aptartifacts.upload",
                      "path": "v1alpha1/{+parent}/aptArtifacts:create",
                      "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "supportsMediaUpload": true,
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1alpha1/{+parent}/aptArtifacts:create"
                          }
                        }
                      },
                      "request": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactRequest"
                      },
                      "response": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UploadAptArtifactMediaResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                },
                "yumartifacts": {
                  "methods": {
                    "upload": {
                      "id": "artifactregistry.projects.locations.repositories.yumartifacts.upload",
                      "path": "v1alpha1/{+parent}/yumArtifacts:create",
                      "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "supportsMediaUpload": true,
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1alpha1/{+parent}/yumArtifacts:create"
                          }
                        }
                      },
                      "request": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactRequest"
                      },
                      "response": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UploadYumArtifactMediaResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                },
                "googetartifacts": {
                  "methods": {
                    "upload": {
                      "id": "artifactregistry.projects.locations.repositories.googetartifacts.upload",
                      "path": "v1alpha1/{+parent}/googetArtifacts:create",
                      "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:create",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "supportsMediaUpload": true,
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1alpha1/{+parent}/googetArtifacts:create"
                          }
                        }
                      },
                      "request": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactRequest"
                      },
                      "response": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1alpha1UploadGooGetArtifactMediaResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Directly uploads a GooGet artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}