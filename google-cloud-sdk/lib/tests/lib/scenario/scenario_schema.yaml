# Copyright 2018 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
$schema: "http://json-schema.org/draft-06/schema#"


definitions:

  release_tracks:
    type: string
    enum: [ALPHA, BETA, GA]

  #############################################################################
  # Assertion Primitives                                                      #
  #############################################################################

  assertions:

    equals:
      type: object
      additionalProperties: false
      properties:
        equals: {type: [string, number, boolean]}

    matches:
      type: object
      additionalProperties: false
      properties:
        matches: {type: [string, number, boolean]}

    is_none:
      type: object
      additionalProperties: false
      properties:
        is_none: {type: boolean}

    in:
      type: object
      additionalProperties: false
      properties:
        in:
          type: array
          items: {type: [string, number, boolean]}


  #############################################################################
  # Assertion Aggregates                                                      #
  #############################################################################

  value_types:

    complex:
      oneOf:
      - {type: [string, number, boolean]}
      - {$ref: "#/definitions/assertions/equals"}
      - {$ref: "#/definitions/assertions/matches"}
      - {$ref: "#/definitions/assertions/is_none"}
      - {$ref: "#/definitions/assertions/in"}

    dict:
      patternProperties:
        .*: {$ref: "#/definitions/value_types/complex"}

    dict_substructure:
      patternProperties:
        .*: {}  # Anything.

  #############################################################################
  # Filters                                                                   #
  #############################################################################

  filters:

    skip:
      type: object
      additionalProperties: false
      required: [reason, bug]
      properties:
        reason: {type: string}
        bug:
          type: string
          pattern: "b/\\d+"
        # Whether this skip should also apply when running the scenario in local mode. By default
        # skips are ignored when running locally.
        locally: {type: boolean}

    restriction:
      type: object
      additionalProperties: false
      required: [reason]
      properties:
        reason: {type: string}

  #############################################################################
  # Events                                                                    #
  #############################################################################

  events:

    # Sets expectation that an API call is made with specific properties, and responds
    # with a canned response payload.
    api_call:
      required: [expect_request, return_response]
      additionalProperties: false
      properties:

        # Set this to true when this call results in an operation getting
        # returned and you expect the command to poll it until it is done.
        # Any operation returned by a request with this set to True is
        # allowed to be polled at any time, in any order for the remainder
        # of the scenario without explicit api_call events for those calls.
        # When running in LOCAL mode, the framework will automatically
        # advance the status of the operation each time it is polled
        # (PENDING -> RUNNING -> DONE).
        poll_operation: {type: boolean}

        # If repeatable, this api call is allowed to be repeated by the
        # command 0 or more times. This is useful for when a command is
        # non-deterministic and may repeat the same call until a condition
        # is met. An api_call event will be reused by the framework if the
        # exact same request is made and the response assertions match.
        # If there are no response assertions, the response must match
        # exactly to be considered a match.
        repeatable: {type: boolean}

        # Setting this to true allows this call to not be made at all.
        # This is useful for non-deterministic commands. If a request is
        # optional and any part of the request or response assertions don't
        # match, it will be considered skipped and that request/response
        # will be checked against the next api_call.
        optional: {type: boolean}

        expect_request:
          required: [uri, method]
          additionalProperties: false
          properties:

            # The URI that is being requested.
            uri: {$ref: "#/definitions/value_types/complex"}

            # The HTTP method being called (ex. GET, POST, ...)
            method: {type: string}

            # Optional expections about the headers being passed in the API
            # call. If given, this is a mapping of header value to assertion
            # about that value. Any header that is not included will have
            # no assertions made against it.
            headers: {$ref: "#/definitions/value_types/dict"}

            # TODO(b/79436687): Decide on an implementation for this.
            # Assertions on the body of the request. If not given, the
            # implicit assertion is that the body is empty. This assumes
            # that the body of the request is a json dictionary. The
            # assertion is a mapping of key to json substructure. To assert
            # something about the root of the tree, the key may be ''.
            # To assert about nested keys, you can use a.b.c to reference
            # those keys. For the value given, anything in that dictionary
            # will assert that it is present under the given key. No
            # assertions are made about any values in the body, not included
            # in the value of the assertion.
            body:
              additionalProperties: false
              properties:
                json: {$ref: "#/definitions/value_types/dict_substructure"}
                text: {$ref: "#/definitions/value_types/complex"}

        # This mimics expect_request except the assertions are validated
        # against the response data (instead of the request data). It is
        # checked against the canned data in return_response if tests are
        # running in LOCAL mode and against real API responses if running
        # in REMOTE mode.
        expect_response:
          additionalProperties: false
          properties:
            status:  {type: number}

            headers: {$ref: "#/definitions/value_types/dict"}

            body:
              additionalProperties: false
              properties:
                json: {$ref: "#/definitions/value_types/dict_substructure"}
                text: {$ref: "#/definitions/value_types/complex"}

            extract_references:
              type: array
              items:
                additionalProperties: false
                required: [field, reference]
                properties:
                  # Dotted path to the field in the body you want to
                  # extract.
                  field: {type: string}
                  # The reference name you want to assign the value to
                  # (without enclosing $$...$$).
                  reference: {type: string}

                  # Directives to modify the value before storing it in the
                  # reference.
                  modifiers:
                    additionalProperties: false
                    properties:
                      # Takes just the last past of the path if it is a '/'
                      # separated path.
                      basename: {type: boolean}

        # This is the canned data that should be returned as the response to
        # this API request.
        return_response:
          additionalProperties: false
          properties:

            # Any fields listed here will be omitted when caching response
            # data. This helps keep down the size of the scenario file
            # for fields that have no impact on what is being tested.
            # For e2e tests, this list should also include values that will differ
            # from actual responses during e2e execution, such as `creationTime`.
            # TODO(b/115502954): Make this support full jsonpath strings instead
            # of just top level fields.
            omit_fields:
              type: array
              items: {type: string}

            status:  {type: number}

            headers:
              patternProperties:
                .*: {type: string}

            body: {}

    # Sets expectation that captured stderr matches a given value.
    expect_stderr: {$ref: "#/definitions/value_types/complex"}

    # Sets expectation that captured stdout matches a given value.
    expect_stdout: {$ref: "#/definitions/value_types/complex"}

    # Sets expectation that the command exited with the given code.
    expect_exit:
      additionalProperties: false
      required: [code]
      properties:
        code: {type: number}
        message: {$ref: "#/definitions/value_types/complex"}

    user_input: {type: string}

    # Sets expectation that the progressbar UX is printed to stderr with given
    # message.
    expect_progress_bar:
      additionalProperties: false
      required: [message]
      properties:
        message: {type: string}

    # Sets expectation that the progress tracker UX is printed to stderr with
    # the given message(s)/status.
    expect_progress_tracker:
      additionalProperties: false
      required: [message]
      properties:
        aborted_message: {type: string}
        message: {type: string}
        status: {type: string}

    # Sets expectation that the staged progress tracker UX is printed to stderr
    # with the given message(s)/status.
    expect_staged_progress_tracker:
      additionalProperties: false
      required: [message]
      properties:
        message: {type: string}
        status: {type: string}
        succeeded_stages:
          type: array
          items: {type: string}
        failed_stage: {type: string}

    expect_prompt_continue:
      additionalProperties: false
      required: [user_input]
      properties:
        message: {type: string}
        prompt_string: {type: string}
        cancel_string: {type: string}
        user_input: {type: string}

    expect_prompt_response:
      additionalProperties: false
      required: [message, user_input]
      properties:
        # TODO(b/110364447): Implement choices.
        message: {type: string}
        user_input: {type: string}

    expect_prompt_choice:
      additionalProperties: false
      required: [choices, user_input]
      properties:
        message: {type: string}
        prompt_string: {type: string}
        choices:
          type: array
          items: {type: string}
        user_input: {type: string}

    # Expects that a given file is written with the given contents. All paths
    # should always be relative to the current working directory or the HOME
    # directory (denoted with ~/ prefix). Files written to gcloud's config
    # directory or the system's temp directory are ignored and do not require
    # assertions. The scenario framework prohibits writing to any other file
    # locations in tests.
    expect_file_written:
      additionalProperties: false
      oneOf:
      # Path and contents required, binary_contents not specified.
      - required: [path, contents]
        not:
          required: [binary_contents]
      # Path and binary_contents required, contents not specified.
      - required: [path, binary_contents]
        not:
          required: [contents]
      properties:
        path: {type: string}
        contents: {$ref: "#/definitions/value_types/complex"}
        binary_contents: {$ref: "#/definitions/value_types/complex"}
        is_private: {type: boolean}


  #############################################################################
  # Supporting Schema                                                         #
  #############################################################################

  # Sets the given gcloud property to the specified value. The setting persists
  # for the remainder of the scenario unless specifically set to something else
  # with another set_property action.
  # Example:
  #   set_property:
  #     core/project: my-proj
  set_property:
    additionalProperties: false
    patternProperties:
      "\\w+/\\w+": {type: [string, number, boolean]}

  # Writes some data to a file in the current working directory of the test.
  # This file can then be provided by name as an argument to a command. Files
  # can only be created in the CWD and be specified by relative name, both here
  # and when given to a command.
  # Example:
  #   write_file:
  #     path: test-data.txt
  #     contents: This string will be in the file.
  write_file:
    additionalProperties: false
    oneOf:
    # Path and contents required, binary_contents not specified.
    - required: [path, contents]
      not:
        required: [binary_contents]
    # Path and binary_contents required, contents not specified.
    - required: [path, binary_contents]
      not:
        required: [contents]
    properties:
      path: {type: string}
      contents: {type: string}
      binary_contents: {type: string}

  # Loads a resource from a test_data directory into the current working
  # directory of the scenario test. Once executed, the file can be given to a
  # command as a argument. This can reference a file or directory tree to copy.
  # Example:
  #   load_resource:
  #     path: tests/unit/tests_lib/scenario/test_data/image.png
  load_resource:
    additionalProperties: false
    required: [path]
    properties:
      path: {type: string}

  # Generates a unique id for a resource to use in an e2e test and assigns it
  # to a reference. If you registry something called 'my-instance' you can
  # reference it as $$my-instance$$ throughout the scenario.
  # Example:
  #   generate_resource_id:
  #     reference: my-instance
  #     prefix: gcloud-compute-instance
  generate_resource_id:
    additionalProperties: false
    required: [reference, prefix]
    properties:
      reference: {type: string}
      prefix: {type: string}
      delimiter: {type: string}
      # If set to true, you don't have to register a cleanup rule for this
      # resource. You should only use this for resources that can't actually
      # be deleted (but that you still give a name to) like jobs.
      requires_cleanup: {type: boolean}

  # Defines a reference with an arbitrary value that can be used throughout
  # the scenario. This is particularly useful for parameterizing values that
  # change based on release track.
  # Examples:
  #   define_reference:
  #     reference: api-version
  #     value: v1
  #   define_reference:
  #     reference: api-version
  #     track_values:
  #       GA: v1
  #       BETA: v2beta1
  #       ALPHA: v2alpha1
  define_reference:
    additionalProperties: false
    required: [reference]
    properties:
      reference: {type: string}
      value: {type: string}
      track_values:
        additionalProperties: false
        properties:
          GA: {type: [string, number, boolean]}
          BETA: {type: [string, number, boolean]}
          ALPHA: {type: [string, number, boolean]}

  # Executes a gcloud command repeatedly until all the given exit conditions are
  # met. This is useful for waiting until some condition is true before
  # continuing. Unlike `execute_command` no validation is done on the internals
  # of this command or the APIs it calls.
  execute_command_until:
    additionalProperties: false
    required: [command]
    properties:
      # The full command line you want to run (excluding 'gcloud' and the
      # release track). (ex 'iot registries describe my-registry')
      command: {type: string}
      # If set, use this release track instead of the release track.
      track: {$ref: "#/definitions/release_tracks"}
      # If set, only retry a maximum of this number of times.
      retries: {type: integer}
      # The total number of seconds this is allowed to wait before timing out.
      # 120 seconds by default.
      timeout: {type: integer}
      # If given, the exit code must match this value to continue.
      exit_code: {type: integer}
      # If given, the stdout of the command must match this value to continue.
      stdout: {$ref: "#/definitions/value_types/complex"}
      # If given, the stderr of the command must match this value to continue.
      stderr: {$ref: "#/definitions/value_types/complex"}
      # If given, the exponential factor to use on subsequent retries.
      exponential_sleep_multiplier: {type: string}
      # If given, the maximum wait time between retries in seconds.
      wait_ceiling: {type: integer}

  # Execute a system binary.
  # Binaries are executed as a black box (as opposed to `execute_command` which
  # intercepts API calls. Any binary that is executed will do whatever it does
  # in both LOCAL and REMOTE mode.
  execute_binary:
    additionalProperties: false
    required: [args]
    properties:
      # The arguments of the command line to run, the first is the binary.
      args:
        type: array
        items: {type: string}
      # The number of seconds to wait before killing the process (default 60).
      timeout: {type: number}
      # Input to pass to the binary.
      stdin: {type: string}
      expect_stdout: {$ref: "#/definitions/events/expect_stdout"}
      expect_stderr: {$ref: "#/definitions/events/expect_stderr"}
      expect_exit: {$ref: "#/definitions/events/expect_exit"}

  # Executes a gcloud command and allows you to make various assertions about
  # the operations the command performs.
  execute_command:
    additionalProperties: false
    required: [command, events]
    properties:

      # The full command line you want to run (excluding 'gcloud' and the
      # release track). (ex 'iot registries describe my-registry')
      command: {type: string}

      # If set, use this release track instead of the release track.
      track: {$ref: "#/definitions/release_tracks"}

      # The reference of the generated resource id that this command is the
      # cleanup step for.
      cleanup_for: {type: string}

      # A command marked as for validation only means that the command is
      # being used to validate the effect of a command under test (rather
      # than the purpose being to test this command). When marked for
      # validation only, the command is not run in LOCAL mode at all since
      # it should have no side effects itself and whatever is being
      # validated is mocked out. In REMOTE mode, the command is executed
      # as normal, except no API requests or responses are validated or
      # captured. Since it is not run in LOCAL mode, there is no need to
      # cache the responses and this helps keep the test file clean.
      # Validation is still done on other actions the commands takes such
      # as printing output.
      validation_only: {type: boolean}

      # True by default. Determines whether the framework should validate the
      # api_call events for this command execution when run in remote mode.
      # If false, the command can make any sequence of calls it wants. All of
      # the remainder of the events are still validated. This is useful for
      # commands that have a large amount of non-determinism (like uploading
      # and downloading files) where the contents of the API calls is not
      # really important.
      validate_remote_api_calls: {type: boolean}

      # A textual description of the command execution. Can be used to provide more detail/context
      # about a complex command string with a large number of flags.
      label: {type: string}

      events:
        type: array
        items:
          additionalProperties: false
          # This is how you have to describe "exactly one of" in JSON Schema.
          # It is possible to do this using oneOf the sub-schemas, but this makes
          # the error reporting when validation fails non-useful. "not_required"
          # actually means "not_allowed" in this context.
          oneOf:
          - required: [api_call]
            not_required: [
              expect_stderr, expect_stdout, expect_exit, expect_progress_bar,
              expect_progress_tracker, expect_staged_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_stderr]
            not_required: [
              api_call, expect_stdout, expect_exit, expect_progress_bar,
              expect_progress_tracker, expect_staged_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_stdout]
            not_required: [
              api_call, expect_stderr, expect_exit, expect_progress_bar,
              expect_progress_tracker, expect_staged_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_exit]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_progress_bar,
              expect_progress_tracker, expect_staged_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_progress_bar]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_tracker, expect_staged_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_progress_tracker]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_staged_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_staged_progress_tracker]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_progress_tracker,
              expect_prompt_continue, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_prompt_continue]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_progress_tracker,
              expect_staged_progress_tracker, expect_prompt_response,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_prompt_response]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_progress_tracker,
              expect_staged_progress_tracker, expect_prompt_continue,
              expect_prompt_choice, expect_file_written, user_input]
          - required: [expect_prompt_choice]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_progress_tracker,
              expect_staged_progress_tracker, expect_prompt_continue,
              expect_prompt_response, expect_file_written, user_input]
          - required: [expect_file_written]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_progress_tracker,
              expect_staged_progress_tracker, expect_prompt_continue,
              expect_prompt_response, expect_prompt_choice, user_input]
          - required: [user_input]
            not_required: [
              api_call, expect_stderr, expect_stdout, expect_exit,
              expect_progress_bar, expect_progress_tracker,
              expect_staged_progress_tracker, expect_prompt_continue,
              expect_prompt_response, expect_prompt_choice, expect_file_written]
          properties:
            api_call: {$ref: "#/definitions/events/api_call"}
            expect_stderr: {$ref: "#/definitions/events/expect_stderr"}
            expect_stdout: {$ref: "#/definitions/events/expect_stdout"}
            expect_exit: {$ref: "#/definitions/events/expect_exit"}
            expect_progress_bar: {$ref: "#/definitions/events/expect_progress_bar"}
            expect_progress_tracker: {$ref: "#/definitions/events/expect_progress_tracker"}
            expect_staged_progress_tracker: {$ref: "#/definitions/events/expect_staged_progress_tracker"}
            expect_prompt_continue: {$ref: "#/definitions/events/expect_prompt_continue"}
            expect_prompt_response: {$ref: "#/definitions/events/expect_prompt_response"}
            expect_prompt_choice: {$ref: "#/definitions/events/expect_prompt_choice"}
            expect_file_written: {$ref: "#/definitions/events/expect_file_written"}
            user_input: {$ref: "#/definitions/events/user_input"}


###############################################################################
# Root Schema                                                                 #
###############################################################################

title: Scenario Test
additionalProperties: false
required: [title, actions]
properties:

  title: {type: string}

  description: {type: string}

  # This section is generated by the scenario framework and includes a
  # simplified outline of the test that makes reviewing it easier.
  summary: {}

  # The section contains the equivalent of the decorators in test_case.Filters.
  filters:
    type: object
    additionalProperties: false
    properties:
      skip: {$ref: "#/definitions/filters/skip"}
      skipAlways: {$ref: "#/definitions/filters/skip"}
      SkipOnPy3: {$ref: "#/definitions/filters/skip"}
      SkipOnWindows: {$ref: "#/definitions/filters/skip"}
      SkipOnLinux: {$ref: "#/definitions/filters/skip"}
      SkipOnMac: {$ref: "#/definitions/filters/skip"}
      SkipOnMacAndPy3: {$ref: "#/definitions/filters/skip"}
      SkipOnWindowsAndPy3: {$ref: "#/definitions/filters/skip"}
      SkipOnLinuxAndPy3: {$ref: "#/definitions/filters/skip"}
      SkipInKokoro: {$ref: "#/definitions/filters/skip"}
      SkipInDebPackage: {$ref: "#/definitions/filters/skip"}
      SkipInRpmPackage: {$ref: "#/definitions/filters/skip"}
      RunOnlyOnPy2: {$ref: "#/definitions/filters/restriction"}
      DoNotRunOnPy3: {$ref: "#/definitions/filters/restriction"}
      DoNotRunOnPy2: {$ref: "#/definitions/filters/restriction"}
      DoNotRunOnWindows: {$ref: "#/definitions/filters/restriction"}
      RunOnlyOnWindows: {$ref: "#/definitions/filters/restriction"}
      DoNotRunOnLinux: {$ref: "#/definitions/filters/restriction"}
      RunOnlyOnLinux: {$ref: "#/definitions/filters/restriction"}
      DoNotRunOnMac: {$ref: "#/definitions/filters/restriction"}
      RunOnlyOnMac: {$ref: "#/definitions/filters/restriction"}
      DoNotRunInKokoro: {$ref: "#/definitions/filters/restriction"}
      RunOnlyInKokoro: {$ref: "#/definitions/filters/restriction"}
      DoNotRunInDebPackage: {$ref: "#/definitions/filters/restriction"}
      RunOnlyInDebPackage: {$ref: "#/definitions/filters/restriction"}
      DoNotRunInRpmPackage: {$ref: "#/definitions/filters/restriction"}
      RunOnlyInRpmPackage: {$ref: "#/definitions/filters/restriction"}

  release_tracks:
    type: array
    items: {$ref: "#/definitions/release_tracks"}

  actions:
    type: array
    items:
      additionalProperties: false
      # This is how you have to describe "exactly one of" in JSON Schema.
      # It is possible to do this using oneOf the sub-schemas, but this makes
      # the error reporting when validation fails non-useful. "not_required"
      # actually means "not_allowed" in this context.
      oneOf:
      - required: [set_property]
        not_required: [write_file, load_resource, generate_resource_id,
                       define_reference, execute_command_until, execute_binary,
                       execute_command]
      - required: [write_file]
        not_required: [set_property, load_resource, generate_resource_id,
                       define_reference, execute_command_until, execute_binary,
                       execute_command]
      - required: [load_resource]
        not_required: [set_property, write_file, generate_resource_id,
                       define_reference, execute_command_until, execute_binary,
                       execute_command]
      - required: [generate_resource_id]
        not_required: [set_property, write_file, load_resource,
                       define_reference, execute_command_until, execute_binary,
                       execute_command]
      - required: [define_reference]
        not_required: [set_property, write_file, load_resource,
                       generate_resource_id, execute_command_until,
                       execute_binary, execute_command]
      - required: [execute_command_until]
        not_required: [set_property, write_file, load_resource,
                       generate_resource_id, define_reference, execute_binary,
                       execute_command]
      - required: [execute_binary]
        not_required: [set_property, write_file, load_resource,
                       generate_resource_id, define_reference,
                       execute_command_until, execute_command]
      - required: [execute_command]
        not_required: [set_property, write_file, load_resource,
                       generate_resource_id, define_reference,
                       execute_command_until, execute_binary]
      properties:
        set_property: {$ref: "#/definitions/set_property"}
        write_file: {$ref: "#/definitions/write_file"}
        load_resource: {$ref: "#/definitions/load_resource"}
        generate_resource_id: {$ref: "#/definitions/generate_resource_id"}
        define_reference: {$ref: "#/definitions/define_reference"}
        execute_command_until: {$ref: "#/definitions/execute_command_until"}
        execute_binary: {$ref: "#/definitions/execute_binary"}
        execute_command: {$ref: "#/definitions/execute_command"}
