# Copyright 2018 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
$schema: "http://json-schema.org/draft-06/schema#"


definitions:

  #############################################################################
  # Assertion Primitives                                                      #
  #############################################################################

  assertions:

    equals:
      type: object
      additionalProperties: false
      properties:
        equals: {type: [string, number, boolean]}

    matches:
      type: object
      additionalProperties: false
      properties:
        matches: {type: [string, number, boolean]}

    is_none:
      type: object
      additionalProperties: false
      properties:
        is_none: {type: boolean}

    in:
      type: object
      additionalProperties: false
      properties:
        in:
          type: array
          items: {type: [string, number, boolean]}


  #############################################################################
  # Assertion Aggregates                                                      #
  #############################################################################

  value_types:

    complex:
      oneOf:
        - {type: [string, number, boolean]}
        - {$ref: "#/definitions/assertions/equals"}
        - {$ref: "#/definitions/assertions/matches"}
        - {$ref: "#/definitions/assertions/is_none"}
        - {$ref: "#/definitions/assertions/in"}

    dict:
      patternProperties:
        .*: {$ref: "#/definitions/value_types/complex"}

    dict_substructure:
      patternProperties:
        .*: {}  # Anything.


  #############################################################################
  # Events                                                                    #
  #############################################################################

  events:

    # Sets expectation that an API call is made with specific properties, and responds
    # with a canned response payload.
    api_call:
      additionalProperties: false
      properties:
        api_call:
          required: [expect_request, return_response]
          additionalProperties: false
          properties:

            repeatable: {type: boolean}

            expect_request:
              required: [uri, method]
              additionalProperties: false
              properties:

                # The URI that is being requested.
                uri: {type: string}

                # The HTTP method being called (ex. GET, POST, ...)
                method: {type: string}

                # Optional expections about the headers being passed in the API
                # call. If given, this is a mapping of header value to assertion
                # about that value. Any header that is not included will have
                # no assertions made against it.
                headers: {$ref: "#/definitions/value_types/dict"}

                # TODO(b/79436687): Decide on an implementation for this.
                # Assertions on the body of the request. If not given, the
                # implicit assertion is that the body is empty. This assumes
                # that the body of the request is a json dictionary. The
                # assertion is a mapping of key to json substructure. To assert
                # something about the root of the tree, the key may be ''.
                # To assert about nested keys, you can use a.b.c to reference
                # those keys. For the value given, anything in that dictionary
                # will assert that it is present under the given key. No
                # assertions are made about any values in the body, not included
                # in the value of the assertion.
                body:
                  additionalProperties: false
                  properties:
                    json: {$ref: "#/definitions/value_types/dict_substructure"}
                    text: {$ref: "#/definitions/value_types/complex"}

            # This mimics expect_request except the assertions are validated
            # against the response data (instead of the request data). It is
            # checked against the canned data in return_response if tests are
            # running in LOCAL mode and against real API responses if running
            # in REMOTE mode.
            expect_response:
              additionalProperties: false
              properties:

                headers: {$ref: "#/definitions/value_types/dict"}

                body: {$ref: "#/definitions/value_types/dict_substructure"}

                extract_references:
                  type: array
                  items:
                    additionalProperties: false
                    required: [field, reference]
                    properties:
                      field: {type: string}
                      reference: {type: string}

            # This is the canned data that should be returned as the response to
            # this API request.
            return_response:
              additionalProperties: false
              properties:

                headers:
                  patternProperties:
                    .*: {type: string}

                body: {}

    # Sets expectation that captured stderr matches a given value. This is always a
    # verbatim text equality check.
    expect_stderr:
      additionalProperties: false
      properties:
        expect_stderr: {type: string}

    # Sets expectation that captured stdout matches a given value. This is always a
    # verbatim text equality check.
    expect_stdout:
      additionalProperties: false
      properties:
        expect_stdout: {type: string}

    # Sets expectation that the command exited with the given code.
    expect_exit:
      additionalProperties: false
      properties:
        expect_exit:
          additionalProperties: false
          required: [code]
          properties:
            code: {type: number}
            message: {$ref: "#/definitions/value_types/complex"}

    user_input:
      additionalProperties: false
      properties:
        user_input: {type: string}

    # Sets expectation that the progressbar UX is printed to stderr with given message
    expect_progress_bar:
      additionalProperties: false
      properties:
        expect_progress_bar:
          additionalProperties: false
          required: [message]
          properties:
            message: {type: string}

    # Sets expectation that the progress tracker UX is printed to stderr with given message(s)/status
    expect_progress_tracker:
      additionalProperties: false
      properties:
        expect_progress_tracker:
          additionalProperties: false
          required: [message]
          properties:
            aborted_message: {type: string}
            message: {type: string}
            status: {type: string}

    expect_prompt_continue:
      additionalProperties: false
      properties:
        expect_prompt_continue:
          additionalProperties: false
          required: [user_input]
          properties:
            message: {type: string}
            prompt_string: {type: string}
            cancel_string: {type: string}
            user_input: {type: string}

    # TODO(b/110364447): Implement this.
    expect_prompt_response:
      additionalProperties: false
      properties:
        expect_prompt_response:
          additionalProperties: false
          required: [message, choices]
          properties:
            message: {type: string}
            choices:
              type: array
              items: {type: string}

    expect_prompt_choice:
      additionalProperties: false
      properties:
        expect_prompt_choice:
          additionalProperties: false
          required: [choices, user_input]
          properties:
            message: {type: string}
            prompt_string: {type: string}
            choices:
              type: array
              items: {type: string}
            user_input: {type: string}

    expect_file_written:
      additionalProperties: false
      properties:
        expect_file_written:
          additionalProperties: false
          oneOf:
          # Path and contents required, binary_contents not specified.
          - required: [path, contents]
            not:
              required: [binary_contents]
          # Path and binary_contents required, contents not specified.
          - required: [path, binary_contents]
            not:
              required: [contents]
          properties:
            path: {type: string}
            contents: {type: string}
            binary_contents: {type: string}
            is_private: {type: boolean}


  #############################################################################
  # Supporting Schema                                                         #
  #############################################################################

  set_property:
    additionalProperties: false
    properties:
      set_property:
        additionalProperties: false
        patternProperties:
          "\\w+/\\w+": {type: [string, number, boolean]}

  write_file:
    additionalProperties: false
    properties:
      write_file:
        additionalProperties: false
        oneOf:
          # Path and contents required, binary_contents not specified.
          - required: [path, contents]
            not:
              required: [binary_contents]
          # Path and binary_contents required, contents not specified.
          - required: [path, binary_contents]
            not:
              required: [contents]
        properties:
          path: {type: string}
          contents: {type: string}
          binary_contents: {type: string}

  load_resource:
    additionalProperties: false
    properties:
      load_resource:
        additionalProperties: false
        required: [path]
        properties:
          path: {type: string}

  generate_resource_id:
    additionalProperties: false
    properties:
      generate_resource_id:
        additionalProperties: false
        required: [reference, prefix]
        properties:
          reference: {type: string}
          prefix: {type: string}

  execute_command:
    additionalProperties: false
    properties:
      execute_command:
        additionalProperties: false
        required: [command, events]
        properties:

          # The full command line you want to run (excluding 'gcloud' and the
          # release track). (ex 'iot registries describe my-registry')
          command: {type: string}
          # The reference of the generated resource id that this command is the
          # cleanup step for.
          cleanup_for: {type: string}

          events:
            type: array
            items:
              oneOf:
              - {$ref: "#/definitions/events/api_call"}
              - {$ref: "#/definitions/events/expect_stderr"}
              - {$ref: "#/definitions/events/expect_stdout"}
              - {$ref: "#/definitions/events/expect_exit"}
              - {$ref: "#/definitions/events/expect_progress_bar"}
              - {$ref: "#/definitions/events/expect_progress_tracker"}
              - {$ref: "#/definitions/events/expect_prompt_continue"}
              - {$ref: "#/definitions/events/expect_prompt_response"}
              - {$ref: "#/definitions/events/expect_prompt_choice"}
              - {$ref: "#/definitions/events/expect_file_written"}
              - {$ref: "#/definitions/events/user_input"}


###############################################################################
# Root Schema                                                                 #
###############################################################################

title: Scenario Test
additionalProperties: false
required: [title, actions]
properties:

  title:  {type: string}

  description: {type: string}

  # The section is the equivalent of the @skip() decorator.
  skip:
    additionalProperties: false
    required: [reason, bug]
    properties:
      reason: {type: string}
      bug:
        type: string
        pattern: "b/\\d+"

  release_tracks:
    type: array
    items: {enum: [ALPHA, BETA, GA]}

  actions:
    type: array
    items:
      oneOf:
        - {$ref: "#/definitions/set_property"}
        - {$ref: "#/definitions/write_file"}
        - {$ref: "#/definitions/load_resource"}
        - {$ref: "#/definitions/generate_resource_id"}
        - {$ref: "#/definitions/execute_command"}
