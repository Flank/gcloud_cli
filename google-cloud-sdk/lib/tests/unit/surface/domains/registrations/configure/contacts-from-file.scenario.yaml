title: cloud domains configure contacts test scenario
release_tracks: [ALPHA]
summary:
# This summary is generated by http://go/gcloud-scenario-tests on update and should not be edited.
- execute:
  - command: |
      domains registrations configure contacts example.com --contact-data-from-file=allContacts.yaml --validate-only --async --quiet
  - stderr: |
      The command will not have any effect because validate-only flag is present.
- execute:
  - command: |
      domains registrations configure contacts example-already-public.com --contact-data-from-file=registrantAdminTechnical.yaml
  - prompt:
    - message: Your current contact privacy is PUBLIC_CONTACT_DATA.
    - prompt_string: Do you want to change it
    - input: n
  - stderr: |
      You choose to make contact data of domain example-already-public.com public.
      Anyone who looks it up in the WHOIS directory will be able to see info
      for the domain owner and administrative and technical contacts.
      Make sure it's ok with them that their contact data is public.
      This info will be publicly available:
      adminContact:
        email: admin@example.com
        faxNumber: '+48.123456789'
        phoneNumber: '+48.123456789'
        postalAddress:
          addressLines:
          - Emilii Plater 53
          locality: Warszawa
          postalCode: 00-113
          recipients:
          - Test User
          regionCode: PL
      registrantContact:
        email: registrant@example.com
        faxNumber: '+48.123456789'
        phoneNumber: '+48.123456789'
        postalAddress:
          addressLines:
          - Emilii Plater 53
          locality: Warszawa
          postalCode: 00-113
          recipients:
          - Test User
          regionCode: PL
      technicalContact:
        email: technical@example.com
        faxNumber: '+48.123456789'
        phoneNumber: '+48.123456789'
        postalAddress:
          addressLines:
          - Emilii Plater 53
          locality: Warszawa
          postalCode: 00-113
          recipients:
          - Test User
          regionCode: PL
  - prompt:
    - input: y
  - progress_tracker:
    - message: Waiting for 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
        to complete
    - status: SUCCESS
  - stderr: |
      Updated registration [example-already-public.com].
- execute:
  - command: |
      domains registrations configure contacts ÃœniCode.com. --contact-data-from-file=registrant.yaml --contact-privacy=redacted-contact-data --async
  - stderr: |
      Started 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
      Update in progress for registration [xn--nicode-2ya.com].
- execute:
  - command: |
      domains registrations configure contacts example.com --contact-data-from-file=allContactPlusRegistrant.yaml
  - error: "1: Contact data file 'allContactPlusRegistrant.yaml' cannot contain both\
      \ allContacts and registrantContact fields."
- execute:
  - command: |
      domains registrations configure contacts example.com --contact-data-from-file=registrantPlusPrivacy.yaml
  - error: |-
      1: Contact data file 'registrantPlusPrivacy.yaml' does not contain valid contact messages.
      Problematic fields: 'privacy'
- execute:
  - command: |
      domains registrations configure contacts example.com --contact-data-from-file=incorrectField.yaml
  - error: |-
      1: Contact data file 'incorrectField.yaml' does not contain valid contact messages.
      Problematic fields: 'adminContact.mail, adminContact.owner, registrantContact.postalAddress.country'
actions:
- write_file:
    path: allContacts.yaml
    contents: |
      allContacts:
        email: 'all@example.com'
        phoneNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
- write_file:
    path: registrantAdminTechnical.yaml
    contents: |
      registrantContact:
        email: 'registrant@example.com'
        phoneNumber: '+48.123456789'
        faxNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
      adminContact:
        email: 'admin@example.com'
        phoneNumber: '+48.123456789'
        faxNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
      technicalContact:
        email: 'technical@example.com'
        phoneNumber: '+48.123456789'
        faxNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
- write_file:
    path: registrant.yaml
    contents: |
      registrantContact:
        email: 'registrant@example.com'
        phoneNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
- write_file:
    path: allContactPlusRegistrant.yaml
    contents: |
      allContacts:
        email: 'all@example.com'
        phoneNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
      registrantContact:
        email: 'registrant@example.com'
        phoneNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
- write_file:
    path: registrantPlusPrivacy.yaml
    contents: |
      registrantContact:
        email: 'all@example.com'
        phoneNumber: '+48.123456789'
        postalAddress:
          regionCode: 'PL'
          postalCode: '00-113'
          locality: 'Warszawa'
          addressLines: ['Emilii Plater 53']
          recipients: ['Test User']
      privacy: PRIVATE_CONTACT_DATA
- write_file:
    path: incorrectField.yaml
    contents: |
      registrantContact:
        postalAddress:
          country: 'Poland'
      adminContact:
        owner: 'owner'
        mail: 'wrong'
- execute_command:
    command: |
      domains registrations configure contacts example.com --contact-data-from-file=allContacts.yaml --validate-only --async --quiet
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example.com",
              "domainName": "outstanding-issues-example.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "supportedPrivacy": ["PRIVATE_CONTACT_DATA", "PUBLIC_CONTACT_DATA"],
              "contactSettings": {
                "privacy": "PRIVATE_CONTACT_DATA"
              }
            }
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example.com:configureContactSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              contactSettings:
                adminContact:
                  email: all@example.com
                  phoneNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
                registrantContact:
                  email: all@example.com
                  phoneNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
                technicalContact:
                  email: all@example.com
                  phoneNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
              updateMask: registrant_contact,admin_contact,technical_contact
              validateOnly: true
        return_response:
          headers:
            status: '200'
          body: |
            {
            }
    - expect_stderr: |
        The command will not have any effect because validate-only flag is present.
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure contacts example-already-public.com --contact-data-from-file=registrantAdminTechnical.yaml
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example-already-public.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-already-public.com",
              "domainName": "example-already-public.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "supportedPrivacy": ["PRIVATE_CONTACT_DATA", "PUBLIC_CONTACT_DATA"],
              "contactSettings": {
                "privacy": "PUBLIC_CONTACT_DATA"
              }
            }
    - expect_prompt_continue:
        message: Your current contact privacy is PUBLIC_CONTACT_DATA.
        prompt_string: Do you want to change it
        user_input: n
    - expect_stderr: |
        You choose to make contact data of domain example-already-public.com public.
        Anyone who looks it up in the WHOIS directory will be able to see info
        for the domain owner and administrative and technical contacts.
        Make sure it's ok with them that their contact data is public.
        This info will be publicly available:
        adminContact:
          email: admin@example.com
          faxNumber: '+48.123456789'
          phoneNumber: '+48.123456789'
          postalAddress:
            addressLines:
            - Emilii Plater 53
            locality: Warszawa
            postalCode: 00-113
            recipients:
            - Test User
            regionCode: PL
        registrantContact:
          email: registrant@example.com
          faxNumber: '+48.123456789'
          phoneNumber: '+48.123456789'
          postalAddress:
            addressLines:
            - Emilii Plater 53
            locality: Warszawa
            postalCode: 00-113
            recipients:
            - Test User
            regionCode: PL
        technicalContact:
          email: technical@example.com
          faxNumber: '+48.123456789'
          phoneNumber: '+48.123456789'
          postalAddress:
            addressLines:
            - Emilii Plater 53
            locality: Warszawa
            postalCode: 00-113
            recipients:
            - Test User
            regionCode: PL
    - expect_prompt_continue:
        user_input: y
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example-already-public.com:configureContactSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              contactNotices:
              - PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT
              contactSettings:
                adminContact:
                  email: admin@example.com
                  phoneNumber: '+48.123456789'
                  faxNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
                registrantContact:
                  email: registrant@example.com
                  phoneNumber: '+48.123456789'
                  faxNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
                technicalContact:
                  email: technical@example.com
                  phoneNumber: '+48.123456789'
                  faxNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
              updateMask: registrant_contact,admin_contact,technical_contact
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/operations/operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86",
              "metadata": {
                "@type": "type.googleapis.com/google.cloud.domains.v1alpha2.OperationMetadata",
                "createTime": "2019-01-14T13:20:39.218508799Z",
                "target": "projects/fake-project/locations/global/registrations/example-already-public.com",
                "verb": "update",
                "apiVersion": "v1alpha2"
              },
              "done": false
            }
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/operations/operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/operations/operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86",
              "metadata": {
                "@type": "type.googleapis.com/google.cloud.domains.v1alpha2.OperationMetadata",
                "createTime": "2019-01-14T13:20:39.218508799Z",
                "endTime": "2019-01-14T14:41:31.657446027Z",
                "target": "projects/fake-project/locations/global/registrations/example-already-public.com",
                "verb": "update",
                "apiVersion": "v1alpha2"
              },
              "done": true,
              "response": {
                "@type": "type.googleapis.com/google.cloud.domains.v1alpha2.Registration",
                "name": "projects/fake-project/locations/global/registrations/example-already-public.com",
                "domainName": "example-already-public.com",
                "createTime": "2019-02-20T16:47:22.739565061Z",
                "expireTime": "2020-02-20T16:47:26Z",
                "state": "ACTIVE",
                "contactSettings": {
                }
              }
            }
        repeatable: true
    - expect_progress_tracker:
        message: Waiting for 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
          to complete
        status: SUCCESS
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example-already-public.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: {}
    - expect_stderr: |
        Updated registration [example-already-public.com].
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure contacts ÃœniCode.com. --contact-data-from-file=registrant.yaml --contact-privacy=redacted-contact-data --async
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/xn--nicode-2ya.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/xn--nicode-2ya.com",
              "domainName": "outstanding-issues-xn--nicode-2ya.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "supportedPrivacy": ["PRIVATE_CONTACT_DATA", "REDACTED_CONTACT_DATA"],
              "contactSettings": {
                "privacy": "PRIVATE_CONTACT_DATA"
              }
            }
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/xn--nicode-2ya.com:configureContactSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              contactSettings:
                privacy: REDACTED_CONTACT_DATA
                registrantContact:
                  email: registrant@example.com
                  phoneNumber: '+48.123456789'
                  postalAddress:
                    addressLines:
                    - Emilii Plater 53
                    locality: Warszawa
                    postalCode: 00-113
                    recipients:
                    - Test User
                    regionCode: PL
              updateMask: privacy,registrant_contact
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/operations/operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86",
              "metadata": {
                "@type": "type.googleapis.com/google.cloud.domains.v1alpha2.OperationMetadata",
                "createTime": "2019-01-14T13:20:39.218508799Z",
                "target": "projects/fake-project/locations/global/registrations/xn--nicode-2ya.com",
                "verb": "update",
                "apiVersion": "v1alpha2"
              },
              "done": false
            }
    - expect_stderr: |
        Started 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
        Update in progress for registration [xn--nicode-2ya.com].
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure contacts example.com --contact-data-from-file=allContactPlusRegistrant.yaml
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example.com",
              "domainName": "outstanding-issues-example.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "supportedPrivacy": ["PRIVATE_CONTACT_DATA", "PUBLIC_CONTACT_DATA"],
              "contactSettings": {
                "privacy": "PRIVATE_CONTACT_DATA"
              }
            }
    - expect_exit:
        code: 1
        message: Contact data file 'allContactPlusRegistrant.yaml' cannot contain
          both allContacts and registrantContact fields.
- execute_command:
    command: |
      domains registrations configure contacts example.com --contact-data-from-file=registrantPlusPrivacy.yaml
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example.com",
              "domainName": "outstanding-issues-example.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "contactSettings": {
                "privacy": "PRIVATE_CONTACT_DATA"
              }
            }
    - expect_exit:
        code: 1
        message: |-
          Contact data file 'registrantPlusPrivacy.yaml' does not contain valid contact messages.
          Problematic fields: 'privacy'
- execute_command:
    command: |
      domains registrations configure contacts example.com --contact-data-from-file=incorrectField.yaml
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/v1alpha2/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example.com",
              "domainName": "outstanding-issues-example.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "contactSettings": {
                "privacy": "PRIVATE_CONTACT_DATA"
              }
            }
    - expect_exit:
        code: 1
        message: |-
          Contact data file 'incorrectField.yaml' does not contain valid contact messages.
          Problematic fields: 'adminContact.mail, adminContact.owner, registrantContact.postalAddress.country'
