title: cloud domains configure dns test scenario
release_tracks: [ALPHA, BETA]
summary:
# This summary is generated by http://go/gcloud-scenario-tests on update and should not be edited.
- execute:
  - command: |
      domains registrations configure dns example-glue-records-ds-records.com --name-servers=ns-cloud-a1.googledomains.com.,ns-cloud-a2.googledomains.com. --validate-only --disable-dnssec
  - stderr: |
      Glue records will not be cleared. If you want to clear them, use --dns-settings-from-file flag.
      WARNING: Name servers should not be changed if DS records are present. Disable DNSSEC first and wait 24 hours before you change name servers. Otherwise your domain may stop serving.
  - prompt:
    - message: This operation is not safe.
    - input: y
  - stderr: |
      The command will not have any effect because validate-only flag is present.
- execute:
  - command: |
      domains registrations configure dns example.com --quiet
  - stderr: |
      Your current DNS settings are:
      googleDomainsDns:
        dsState: DS_RECORDS_UNPUBLISHED
        nameServers:
        - ns1.com
        - ns2.com
- execute:
  - command: |
      domains registrations configure dns exported.com
  - error: "1: The registration resource must be in state ACTIVE or SUSPENDED, not\
      \ 'EXPORTED'."
- execute:
  - command: |
      domains registrations configure dns not-found.com
  - error: '1: HTTPError 404'
- execute:
  - command: |
      domains registrations configure dns example-interactive-name-servers.com --async
  - stderr: |
      Your current DNS settings are:
      googleDomainsDns:
        dsState: DS_RECORDS_UNPUBLISHED
        nameServers:
        - ns1.com
        - ns2.com
  - prompt:
    - message: You can provide your DNS settings by specifying name servers, Cloud
        DNS Managed Zone name or by choosing free name servers provided by Google
        Domains
    - choices: &id002
      - Provide name servers list
      - Provide Cloud DNS Managed Zone name
      - Use free name servers provided by Google Domains
      - cancel
    - input: '1'
  - prompt:
    - message: 'Name server (empty line to finish):  '
    - input: ns1.com
  - prompt:
    - message: 'Name server (empty line to finish):  '
    - input: ''
  - stderr: |
      You have to provide at least 2 name servers.
  - prompt:
    - message: 'Name server (empty line to finish):  '
    - input: invalid-domain-name
  - stderr: |
      Invalid name server: 'invalid-domain-name'.
  - prompt:
    - message: 'Name server (empty line to finish):  '
    - input: UpperCase.com
  - stderr: |
      Invalid name server: 'UpperCase.com'.
  - prompt:
    - message: 'Name server (empty line to finish):  '
    - input: ns2.com.
  - prompt:
    - message: 'Name server (empty line to finish):  '
    - input: ''
  - stderr: |
      Started 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
      Update in progress for registration [example-interactive-name-servers.com].
- execute:
  - command: |
      domains registrations configure dns example-interactive-google-domains.com --async
  - stderr: |
      Your current DNS settings are:
      googleDomainsDns:
        dsState: DS_RECORDS_UNPUBLISHED
        nameServers:
        - ns1.com
        - ns2.com
  - prompt:
    - message: You can provide your DNS settings by specifying name servers, Cloud
        DNS Managed Zone name or by choosing free name servers provided by Google
        Domains
    - choices: &id001
      - Provide name servers list
      - Provide Cloud DNS Managed Zone name
      - Use free name servers provided by Google Domains
      - cancel
    - input: '3'
  - stderr: |
      Started 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
      Update in progress for registration [example-interactive-google-domains.com].
- execute:
  - command: |
      domains registrations configure dns example.com --use-google-domains-dns --disable-dnssec --validate-only
  - stderr: |
      The command will not have any effect because validate-only flag is present.
- execute:
  - command: |
      domains registrations configure dns example-interactive-cancel.com --async
  - stderr: |
      Your current DNS settings are:
      googleDomainsDns:
        dsState: DS_RECORDS_UNPUBLISHED
        nameServers:
        - ns1.com
        - ns2.com
  - prompt:
    - message: You can provide your DNS settings by specifying name servers, Cloud
        DNS Managed Zone name or by choosing free name servers provided by Google
        Domains
    - choices: *id001
    - input: '4'
  - error: '1: Aborted by user.'
- execute:
  - command: |
      domains registrations configure dns example-dnssec-google-domains.com --disable-dnssec --async
  - error: '1: value for field [operationsId] in collection [domains.projects.locations.operations]
      is required but was not provided'
- execute:
  - command: |
      domains registrations configure dns example-dnssec-custom-dns.com --disable-dnssec --validate-only
  - stderr: |
      Glue records will not be cleared. If you want to clear them, use --dns-settings-from-file flag.
  - stderr: |
      The command will not have any effect because validate-only flag is present.
- execute:
  - command: |
      domains registrations configure dns example.com --name-servers=incorrect,not_a_domain.com
  - error: "1: Invalid name server: 'incorrect'."
actions:
- define_reference:
    reference: api-version
    track_values:
      ALPHA: v1alpha2
      BETA: v1beta1
- execute_command:
    command: |
      domains registrations configure dns example-glue-records-ds-records.com --name-servers=ns-cloud-a1.googledomains.com.,ns-cloud-a2.googledomains.com. --validate-only --disable-dnssec
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-glue-records-ds-records.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-glue-records-ds-records.com",
              "domainName": "example-glue-records-ds-records.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "googleDomainsDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsState": "DS_RECORDS_PUBLISHED",
                  "dsRecords": [{
                    "keyTag": 24,
                    "algorithm": "RSASHA1",
                    "digestType": "SHA256",
                    "digest": "2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d"
                  }]
                },
                "glueRecords": [{
                  "hostName": "ns1.example.com",
                  "ipv4Addresses": ["8.8.8.8"]
                }]
              }
            }
    - expect_stderr: |
        Glue records will not be cleared. If you want to clear them, use --dns-settings-from-file flag.
        WARNING: Name servers should not be changed if DS records are present. Disable DNSSEC first and wait 24 hours before you change name servers. Otherwise your domain may stop serving.
    - expect_prompt_continue:
        message: This operation is not safe.
        user_input: y
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-glue-records-ds-records.com:configureDnsSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              dnsSettings:
                customDns:
                  nameServers:
                  - ns-cloud-a1.googledomains.com
                  - ns-cloud-a2.googledomains.com
              updateMask: custom_dns
              validateOnly: true
        return_response:
          headers:
            status: '200'
          body: |
            {
            }
    - expect_stderr: |
        The command will not have any effect because validate-only flag is present.
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure dns example.com --quiet
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example.com",
              "domainName": "example.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "googleDomainsDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsState": "DS_RECORDS_UNPUBLISHED"
                }
              }
            }
    - expect_stderr: |
        Your current DNS settings are:
        googleDomainsDns:
          dsState: DS_RECORDS_UNPUBLISHED
          nameServers:
          - ns1.com
          - ns2.com
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure dns exported.com
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/exported.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/exported.com",
              "domainName": "exported.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "EXPORTED"
            }
    - expect_exit:
        code: 1
        message: |-
          The registration resource must be in state ACTIVE or SUSPENDED, not 'EXPORTED'.
- execute_command:
    command: |
      domains registrations configure dns not-found.com
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/not-found.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '404'
    - expect_exit:
        code: 1
        message: HTTPError 404
- execute_command:
    command: |
      domains registrations configure dns example-interactive-name-servers.com --async
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-interactive-name-servers.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-interactive-name-servers.com",
              "domainName": "example-interactive-name-servers.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "googleDomainsDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsState": "DS_RECORDS_UNPUBLISHED"
                }
              }
            }

    - expect_stderr: |
        Your current DNS settings are:
        googleDomainsDns:
          dsState: DS_RECORDS_UNPUBLISHED
          nameServers:
          - ns1.com
          - ns2.com
    - expect_prompt_choice:
        message: You can provide your DNS settings by specifying name servers, Cloud
          DNS Managed Zone name or by choosing free name servers provided by Google
          Domains
        choices: *id002
        user_input: '1'
    - expect_prompt_response:
        message: 'Name server (empty line to finish):  '
        user_input: ns1.com
    - expect_prompt_response:
        message: 'Name server (empty line to finish):  '
        user_input: ''
    - expect_stderr: |
        You have to provide at least 2 name servers.
    - expect_prompt_response:
        message: 'Name server (empty line to finish):  '
        user_input: invalid-domain-name
    - expect_stderr: |
        Invalid name server: 'invalid-domain-name'.
    - expect_prompt_response:
        message: 'Name server (empty line to finish):  '
        user_input: UpperCase.com
    - expect_stderr: |
        Invalid name server: 'UpperCase.com'.
    - expect_prompt_response:
        message: 'Name server (empty line to finish):  '
        user_input: ns2.com.
    - expect_prompt_response:
        message: 'Name server (empty line to finish):  '
        user_input: ''
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-interactive-name-servers.com:configureDnsSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              dnsSettings:
                customDns:
                  nameServers:
                  - ns1.com
                  - ns2.com
              updateMask: custom_dns
              validateOnly: false
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/operations/operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86",
              "metadata": {
                "@type": "type.googleapis.com/google.cloud.domains.$$api-version$$.OperationMetadata",
                "createTime": "2019-01-14T13:20:39.218508799Z",
                "target": "projects/fake-project/locations/global/registrations/example-interactive-name-servers.com",
                "verb": "update",
                "apiVersion": "$$api-version$$"
              },
              "done": false
            }
    - expect_stderr: |
        Started 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
        Update in progress for registration [example-interactive-name-servers.com].
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure dns example-interactive-google-domains.com --async
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-interactive-google-domains.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-interactive-google-domains.com",
              "domainName": "example-interactive-google-domains.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "googleDomainsDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsState": "DS_RECORDS_UNPUBLISHED"
                }
              }
            }

    - expect_stderr: |
        Your current DNS settings are:
        googleDomainsDns:
          dsState: DS_RECORDS_UNPUBLISHED
          nameServers:
          - ns1.com
          - ns2.com
    - expect_prompt_choice:
        message: You can provide your DNS settings by specifying name servers, Cloud
          DNS Managed Zone name or by choosing free name servers provided by Google
          Domains
        choices: *id001
        user_input: '3'
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-interactive-google-domains.com:configureDnsSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              dnsSettings:
                googleDomainsDns:
                  dsState: DS_RECORDS_PUBLISHED
              updateMask: google_domains_dns
              validateOnly: false
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/operations/operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86",
              "metadata": {
                "@type": "type.googleapis.com/google.cloud.domains.$$api-version$$.OperationMetadata",
                "createTime": "2019-01-14T13:20:39.218508799Z",
                "target": "projects/fake-project/locations/global/registrations/example-interactive-name-servers.com",
                "verb": "update",
                "apiVersion": "$$api-version$$"
              },
              "done": false
            }

    - expect_stderr: |
        Started 'operation-1547472037425-57f6ae9172fbe-4e8005f1-751b4e86'
        Update in progress for registration [example-interactive-google-domains.com].
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure dns example.com --use-google-domains-dns --disable-dnssec --validate-only
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example.com",
              "domainName": "example.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "customDns": {
                  "nameServers": ["ns1.com", "ns2.com"]
                }
              }
            }
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example.com:configureDnsSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              dnsSettings:
                googleDomainsDns:
                  dsState: DS_RECORDS_UNPUBLISHED
              updateMask: google_domains_dns
              validateOnly: true
        return_response:
          headers:
            status: '200'
          body: |
            {
            }
    - expect_stderr: |
        The command will not have any effect because validate-only flag is present.
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure dns example-interactive-cancel.com --async
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-interactive-cancel.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-interactive-cancel.com",
              "domainName": "example-interactive-cancel.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "googleDomainsDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsState": "DS_RECORDS_UNPUBLISHED"
                }
              }
            }

    - expect_stderr: |
        Your current DNS settings are:
        googleDomainsDns:
          dsState: DS_RECORDS_UNPUBLISHED
          nameServers:
          - ns1.com
          - ns2.com
    - expect_prompt_choice:
        message: You can provide your DNS settings by specifying name servers, Cloud
          DNS Managed Zone name or by choosing free name servers provided by Google
          Domains
        choices: *id001
        user_input: '4'
    - expect_exit:
        code: 1
        message: Aborted by user.
- execute_command:
    command: |
      domains registrations configure dns example-dnssec-google-domains.com --disable-dnssec --async
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-dnssec-google-domains.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-dnssec-google-domains.com",
              "domainName": "example-dnssec-google-domains.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "googleDomainsDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsState": "DS_RECORDS_PUBLISHED",
                  "dsRecords": [{
                    "keyTag": 24,
                    "algorithm": "RSASHA1",
                    "digestType": "SHA256",
                    "digest": "2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d"
                  }]
                }
              }
            }
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-dnssec-google-domains.com:configureDnsSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              dnsSettings:
                googleDomainsDns:
                  dsState: DS_RECORDS_UNPUBLISHED
              updateMask: google_domains_dns.ds_state
              validateOnly: false
        return_response:
          headers:
            status: '200'
          body: null
    - expect_exit:
        code: 1
        message: value for field [operationsId] in collection [domains.projects.locations.operations]
          is required but was not provided
- execute_command:
    command: |
      domains registrations configure dns example-dnssec-custom-dns.com --disable-dnssec --validate-only
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-dnssec-custom-dns.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-dnssec-custom-dns.com",
              "domainName": "example-dnssec-custom-dns.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "customDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsRecords": [{
                    "keyTag": 24,
                    "algorithm": "RSASHA1",
                    "digestType": "SHA256",
                    "digest": "2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d"
                  }]
                },
                "glueRecords": [{
                  "hostName": "ns1.example.com",
                  "ipv4Addresses": ["8.8.8.8"]
                }]
              }
            }
    - expect_stderr: |
        Glue records will not be cleared. If you want to clear them, use --dns-settings-from-file flag.
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example-dnssec-custom-dns.com:configureDnsSettings?alt=json
          method: POST
          headers: {}
          body:
            json:
              dnsSettings:
                customDns: {}
              updateMask: custom_dns.ds_records
              validateOnly: true
        return_response:
          headers:
            status: '200'
          body: |
            {
            }
    - expect_stderr: |
        The command will not have any effect because validate-only flag is present.
    - expect_exit:
        code: 0
- execute_command:
    command: |
      domains registrations configure dns example.com --name-servers=incorrect,not_a_domain.com
    events:
    - api_call:
        expect_request:
          uri: https://domains.googleapis.com/$$api-version$$/projects/fake-project/locations/global/registrations/example.com?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/fake-project/locations/global/registrations/example-dnssec-custom-dns.com",
              "domainName": "example-dnssec-custom-dns.com",
              "createTime": "2019-01-11T14:09:08.068037639Z",
              "expireTime": "2020-01-11T14:09:12Z",
              "state": "ACTIVE",
              "dnsSettings": {
                "customDns": {
                  "nameServers": ["ns1.com", "ns2.com"],
                  "dsRecords": [{
                    "keyTag": 24,
                    "algorithm": "RSASHA1",
                    "digestType": "SHA256",
                    "digest": "2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d"
                  }]
                }
              }
            }
    - expect_exit:
        code: 1
        message: "Invalid name server: 'incorrect'."
