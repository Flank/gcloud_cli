title: privateca subordinates update scenario test
release_tracks: [BETA]
summary:
# This summary is generated by http://go/gcloud-scenario-tests on update and should not be edited.
- execute:
  - command: privateca subordinates update ca --location europe-west1 --publish-ca-cert
      --no-publish-crl
- execute:
  - command: privateca subordinates update ca --location europe-west1 --issuance-policy
      issuance_policy_example_small.yaml
- execute:
  - command: privateca subordinates update ca --location europe-west1 --update-labels
      tls-ca=true,update-date=20200220
- execute:
  - command: privateca subordinates update ca --location europe-west1 --pem-chain
      test_chain.pem
- execute:
  - command: privateca subordinates update ca --location europe-west1 --pem-chain
      test_chain.pem
  - error: '1: Cannot perform subordinates command on Root CA. Please use the `privateca
      roots` command group instead.'
- set_property: privateca/location us-central1
- execute:
  - command: privateca subordinates update ca --publish-ca-cert --no-publish-crl
actions:
- load_resource:
    path: tests/unit/surface/privateca/test_data/issuance_policy_example_small.yaml
- load_resource:
    path: tests/unit/surface/privateca/test_data/test_chain.pem
- execute_command:
    command: privateca subordinates update ca --location europe-west1 --publish-ca-cert
      --no-publish-crl
    events:
    - api_call:
        expect_request:
          uri: https://privateca.googleapis.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body:
            name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
            type: SUBORDINATE
            state: ACTIVE
    - api_call:
        expect_request:
          uri:
            matches: https://privateca\.googleapis\.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca\?alt=json&requestId=[^&]+&updateMask=issuing_options\.include_crl_access_url%2Cissuing_options\.include_ca_cert_url
          method: PATCH
          headers: {}
          body:
            json:
              issuingOptions:
                includeCaCertUrl: true
                includeCrlAccessUrl: false
        return_response:
          headers:
            status: '200'
          body:
            done: true
            response:
              name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
              type: SUBORDINATE
              state: ACTIVE
              issuingOptions:
                includeCaCertUrl: true
                includeCrlAccessUrl: false
    - expect_exit:
        code: 0
- execute_command:
    command: privateca subordinates update ca --location europe-west1 --issuance-policy
      issuance_policy_example_small.yaml
    events:
    - api_call:
        expect_request:
          uri: https://privateca.googleapis.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body:
            name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
            type: SUBORDINATE
            state: ACTIVE
    - api_call:
        expect_request:
          uri:
            matches: https://privateca\.googleapis\.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca\?alt=json&requestId=[^&]+&updateMask=certificate_policy
          method: PATCH
          headers: {}
          body:
            json:
              certificatePolicy:
                allowedLocationsAndOrganizations:
                - countryCode: US
                  locality: Sunnyvale
                  organization: Google, Inc
                  organizationalUnit: Cloud
                  province: CA
                - countryCode: US
                  locality: Mountain View
                  organization: Google, Inc
                  organizationalUnit: Geo
                  province: CA
                maximumLifetime: 825d
        return_response:
          headers:
            status: '200'
          body:
            done: true
            response:
              name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
              type: SUBORDINATE
              state: ACTIVE
              certificatePolicy:
                allowedLocationsAndOrganizations:
                - countryCode: US
                  locality: Sunnyvale
                  organization: Google, Inc
                  organizationalUnit: Cloud
                  province: CA
                - countryCode: US
                  locality: Mountain View
                  organization: Google, Inc
                  organizationalUnit: Geo
                  province: CA
                maximumLifetime: 825d
    - expect_exit:
        code: 0
- execute_command:
    command: privateca subordinates update ca --location europe-west1 --update-labels
      tls-ca=true,update-date=20200220
    events:
    - api_call:
        expect_request:
          uri: https://privateca.googleapis.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body:
            name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
            type: SUBORDINATE
            state: ACTIVE
            labels:
              tls-ca: 'false'
    - api_call:
        expect_request:
          uri:
            matches: https://privateca\.googleapis\.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca\?alt=json&requestId=[^&]+&updateMask=labels
          method: PATCH
          headers: {}
          body:
            json:
              labels:
                tls-ca: 'true'
                update-date: '20200220'
        return_response:
          headers:
            status: '200'
          body:
            done: true
            response:
              name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
              type: SUBORDINATE
              state: ACTIVE
              labels:
                tls-ca: 'true'
                update-date: '20200220'
    - expect_exit:
        code: 0
- execute_command:
    command: privateca subordinates update ca --location europe-west1 --pem-chain
      test_chain.pem
    events:
    - api_call:
        expect_request:
          uri: https://privateca.googleapis.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body:
            name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
            type: SUBORDINATE
            state: ACTIVE
            pem_chain:
            - TEST_CERT
    - api_call:
        expect_request:
          uri:
            matches: https://privateca\.googleapis\.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca\?alt=json&requestId=[^&]+&updateMask=pem_issuer_cert_chain
          method: PATCH
          headers: {}
          body:
            json:
              subordinateConfig:
                pemIssuerChain:
                  pemCertificates:
                  - |
                    -----BEGIN CERTIFICATE-----
                    MIIEiDCCAnACFBIqqUoIQUU5RgXxiua8ISTU9YMcMA0GCSqGSIb3DQEBCwUAMIGM
                    MQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjERMA8GA1UEBwwIS2ly
                    a2xhbmQxHTAbBgNVBAoMFEludGVybWVkaWF0ZSBDQSBJbmMuMRswGQYDVQQLDBJT
                    dGlsbCBVbml0IFRlc3RpbmcxGTAXBgNVBAMMEGludGVybWVkaWF0ZS5jb20wHhcN
                    MTkwOTA0MjMwNTE1WhcNNDcwMTIwMjMwNTE1WjB0MQswCQYDVQQGEwJDQTETMBEG
                    A1UECAwKU29tZS1TdGF0ZTENMAsGA1UEBwwETGVhZjEfMB0GA1UECgwWTGVhZiBD
                    ZXJ0IGluIFVuaXQgVGVzdDENMAsGA1UECwwETGVhZjERMA8GA1UEAwwIbGVhZi5j
                    b20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCwgxbW4gZypGqAHVer
                    aMbHsig7A29xb8FllK2uT0kTIIu869qMsLWVyBVr0TVB+8ubycTQzR49bNQ5QuUL
                    wK19VVWf/r8dSA1COj2ZxeWpV3sWVB1cAPbqYKTSz+afoXWAPM04N47OW18Uu4dp
                    Gqzoj2TW5VKkltagCuCP2jA6Cp+GQOH5sTpQ2d7YCO93Z6QqvdWUqYEMFU/Lo9M7
                    6Vt3sFVpwrOLInQnuhct28T6puOb212kX+mCLsgrQmzf6NmxaElaaNMTHSXL2xRF
                    hBSZFU1M5IzAi2h3AS3E5ulbEVgJkZsgN2yFDjCkV9XvlSWOtxBETrITCQU5fRGh
                    2pxHAgMBAAEwDQYJKoZIhvcNAQELBQADggIBAGr2foGrMdqJlb7Xc7vR1nDP125l
                    pGUdf9W92tFJ2b/sbEw/Xhh5gfqaCcx8bcygBY82PIXnL7Pt5ahfRdihTR4Xkads
                    miePA8Jk5pkNmXzhoNE9EbFAGEFUGKSfUJnngnt6FuHVpmTG5AwHLlkTJcFDuwQN
                    ZfiOUm7lkebHJy8W+Fb7cBDzyxmcr/lHG1qsbYjaqlnTt/WjnRrsOYgSwdFXnP95
                    3DCQvfQg6kvNZ2zj/1iIXDsQ0mYTTjNQzeWzlOF/CLL0mUk6xpSXY1HnW4Y7hREI
                    hEJNcfJX6cLmq0XK+H3MgLtSB+6dTQ5TLISZwYYrAyHGdJDDu9DEsEZXgGZCZCdP
                    mlBvmxoXlW9NFD9TBTD3M/txNg/UySLJjK/wxfaR/XXGnLv5PgYcHc2ajdZmArba
                    aW+svhFsZ2biuAeCloOAOPlISg9Lr3ydTrUMZHQB3a7W42NEkcxdO4ab1FEArsVA
                    uS1zHs1yhoRXtfNgyQ9zykxHlBgjXDZsFxfUuzJZa4t7VqtWgLeUXdewCBSaf63+
                    SKOLgx8l6QnTHnUh5700ApIuoXBuaSqc6BfTl1nkQqUZEoGlcuFZqJXe2sWN1oDP
                    rI7NPXRWJqTdNuSjUznzSMO+AsBcZBcYad1pjhWDNnW4n1UFoMpaIYzb6jZSedo9
                    y4+LpDFE2AxuNZ/x
                    -----END CERTIFICATE-----
                  - |
                    -----BEGIN CERTIFICATE-----
                    MIIGGzCCBAOgAwIBAgIUearOADxVb0UXTUgiRKau+DrZms8wDQYJKoZIhvcNAQEL
                    BQAwgZwxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMREwDwYDVQQH
                    DAhLaXJrbGFuZDEWMBQGA1UECgwNVW5pdCBUZXN0IExMQzEVMBMGA1UECwwMVW5p
                    dCBUZXN0aW5nMRQwEgYDVQQDDAtleGFtcGxlLmNvbTEgMB4GCSqGSIb3DQEJARYR
                    YWRtaW5AZXhtYXBsZS5jb20wHhcNMTkwOTA0MjMwNDI2WhcNNDcwMTIwMjMwNDI2
                    WjCBjDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xETAPBgNVBAcM
                    CEtpcmtsYW5kMR0wGwYDVQQKDBRJbnRlcm1lZGlhdGUgQ0EgSW5jLjEbMBkGA1UE
                    CwwSU3RpbGwgVW5pdCBUZXN0aW5nMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGUuY29t
                    MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAotFFd49Jt3oxermtyvn8
                    EOKCIYMQmSQYdLHbLdOZ9qznypc13CwDwZ8yz8xdx22W4VuOTAE+M23g5xLrc2yf
                    QDl7eDtLP0UfIRwZk2QrBOWjK1941K4Cz3tXXaxOLnA6sYXCiW9MXXGx+d/3jzPq
                    vanaySduvOa4MLgE2SsNefimJAVj+CQZFWJCkEqLd+2kTYl4rtfT7+1Rk7P7nPH/
                    2oVWMa3W5IN3fQgK1MvBQjERFVbXqgFVpLjk2jx4IkQL7dm8m8zyqcL7aLN2POyZ
                    Vk3fQhqbIkVLooE2k9+xJBaOaErc3Ae/7K0617yD6d9W6d/pSxAcFtXArElHtjVq
                    E4kJ7dNvAR7Wr9iOAZe+fzm73MaO3qKJKxonrC4Scg27IFf0LvoCxT+Kgjtdcnqj
                    npeGlrkR4EZ16uCp++QEFsdvyKAV4rf3ZcGQKxyx4jLnWetNjStohzt3LWymUZMx
                    gA9LZ3pVSVYRdxUSlUQQpBh66pcQ+nNNQuZjZFfVWh++FDLqeLw/WcAR9eoKDXNX
                    pTLxKOR2xQHNhRqJbQK9Ul3LGDXpUgXa/8I22lbdq1ZQbofNIALpyFRlFrqqRWou
                    YFJ+PSm6oNcLtpnGw+hWJtVAnbHj5cQ+C9mqv9ovMRHhM1YNM5EyBcpM5RaEfXmc
                    iyQTAlm/1bsbOIEHdlRwFYkCAwEAAaNjMGEwHQYDVR0OBBYEFCt/cXZ8C3e15LRC
                    sZrpJ8DExSdWMB8GA1UdIwQYMBaAFCPoz4s26z5DzQdGsCVG1q3Clc0NMA8GA1Ud
                    EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQCP
                    GITzJMSPMS1dWTWKWTzhn3aHv6HDtOiEiuomApaigckil0WPMIfWuGQCFYC7WWDz
                    DR1QssiwQHnn5MUDG/DCvQHhH1ikxRqYOgQOffM8Dbqt6qD2ua/CNAndAN49tngF
                    VMW3VzV+QKaFcz/BQPRgdX4Tq+1z0lqkSbO5XlIghnoYUZec/KdfirLL2Z+DShf9
                    XE43UnMBZtKUsdxPk2dSUru5oSqAAe5IuuotL0EcpITV7sN9d92OSQi29iuNFGpD
                    0RJzur3/nUPNk00I2fdUD1rDGk6uAINIXM8E8lrOSOr2rm3ZCnUmrIflHzBXm7jo
                    S3ZkTfkaXMiCOa8E4Bfbxpdt+NhViV/ik+FBNvdjF+wZR6Jt8NGNVbN+A4uWanVV
                    ImMyRTtt2QYrTgGmy6cH109Lgo9vt3DT/jxFAftP5aRQThweNERUMuq7v2n2JpA3
                    iuf7qotbpuRALQ+zkgYXssTaYITg1rymC+DQ5RLGrE1J3IoRHyOlMr09eZAHW0i3
                    mcFjx57FiMmRgH7nfl9JvZKhcMSI0/QQYrdyzdR5uAf4IeKcvwblHxNAJM0gonwD
                    AwrA/tI6xv/OxFEgkFVgbB2n5sIQUX21J216nagiDJ7iIUhAcXQQgGQv437lLy+R
                    Qpia3sFMxKU9iaFwty6llwSOEp9zuxkwkU+G/20K2w==
                    -----END CERTIFICATE-----
                  - |
                    -----BEGIN CERTIFICATE-----
                    MIIGGzCCBAOgAwIBAgIUaZtIjugoa6GYNrd5jzZ+cXr6SA0wDQYJKoZIhvcNAQEL
                    BQAwgZwxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMREwDwYDVQQH
                    DAhLaXJrbGFuZDEWMBQGA1UECgwNVW5pdCBUZXN0IExMQzEVMBMGA1UECwwMVW5p
                    dCBUZXN0aW5nMRQwEgYDVQQDDAtleGFtcGxlLmNvbTEgMB4GCSqGSIb3DQEJARYR
                    YWRtaW5AZXhtYXBsZS5jb20wHhcNMTkwOTA0MjIxMTI5WhcNNDcwMTIwMjIxMTI5
                    WjCBnDELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxETAPBgNVBAcM
                    CEtpcmtsYW5kMRYwFAYDVQQKDA1Vbml0IFRlc3QgTExDMRUwEwYDVQQLDAxVbml0
                    IFRlc3RpbmcxFDASBgNVBAMMC2V4YW1wbGUuY29tMSAwHgYJKoZIhvcNAQkBFhFh
                    ZG1pbkBleG1hcGxlLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
                    AMwIItX69IYHvWtAlYQOH2RDcdxmNmPzGkBhJJ6rf/197/8wFzEF9mfV67WpQuql
                    jTn3EUzA3f/mhWRmqGwXJUteVNdqG1qYMjdAOiTuXWHBiIm6Vxu8BZB1hEA9pXOz
                    9Aia7PdXIOfJ4S3YS0nTyYJZYwSP0QP2LivsPEYYoasx2SBQ4OpeXxAVPwS8Aspx
                    eav1FAXUfTy+R902NG52RNRGs4KhoNY7HPR/X9w2zuaP6rThJFPDDO9sFjHm4+Zf
                    u78nqkfrW8HIcXIBCcJw3rofNt6zJ+SkFhf7U8nwbalH7KzKY1xnJnK3P7/vdhgz
                    vP1/xxl9GfKFA2wAxLDCdCj9syjWkqJUJUFjMdSGEQ9VeIixejQFDZ9J+2c20niz
                    ESPRtuZK4Q+TzyuO4pYROanYWqEkH8TaQHQ9kVBwP8XZI4xy/kk3/1zoGZLqzPuB
                    wnWIK66dmZ7FW3VDUW/gJjLTp9+kO1eMZ8ZrRFB3oMnEmltau0Z9p4dpZmTaJMRB
                    1kq1kmysR42Krg0dGrs++zCJMsci55bqvisdcGAVriIL+aR9scwTR5OtsFYWtTML
                    qyNS1E8mbB3LoDMJFS7rJ8hT+wdhCRU/9K5i8vOZx/HjhIad7tOUhqnyosuWcqc3
                    eShtFBN4IGMkkJzs/CpOwY8IQ4Q+nnoXGDJS7S6LSp8pAgMBAAGjUzBRMB0GA1Ud
                    DgQWBBQj6M+LNus+Q80HRrAlRtatwpXNDTAfBgNVHSMEGDAWgBQj6M+LNus+Q80H
                    RrAlRtatwpXNDTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQBt
                    HY5WATKqaAy0DkSNaAa8K4CvgvQCUgh/jjU3BLgtFJ31uaI1qtkCbkxG+MMbQZ0L
                    kEOEyKG21q37bKwMiedaoRKwJ70fmERpDtm3T42csho9sacIVhbhZykGO2TLv4ka
                    C0FuUCSmwk5gjsCquUT3GZMNoHRcyWeDh7cEStm5sXB57Hcbq7BYtLGmlFRsET+0
                    mBnoEJZoIE0gVs0cMOdKNjrcg6IXo819qGgd2fPdX6mNE8Sn9glbL3vPdFfDqYEi
                    3BDhOTCPEcHx1gquX5G0pKsL8DSTquneAIf1w+9JIuITt3WTmkUQzbBGVtH/dxDc
                    5YIhtZu1ALHZvLdw7KDnvEMAmrO53b1YL+WRHRG/3JUiF+TWwPwN2XUcQhwsm2Lw
                    vaGWbdndFKsNKr8Wc0hrzJNMmE4OHP/9enlBDUitVv2E1UV8A/7/L+YY09Mq4pQY
                    j4NU/ckHSyFR/zFGFwRdDALErwegxyvMbULtyS4Jie1TB1hOKnqaHqcC1LzIpGx9
                    5UdbbNaqd8WwEb8IuJm5wv+6JlQT0etyOlER16Z/YSys7ngeCLhTh37t8ATYluMa
                    lpR0m6JSkFj63E/ICUfByYp/ggRgifcvVxvnviYFh6RZqsA5OfNp8Da/GFuFsd5G
                    DoXOHStR9u7xJRPfnmUo7SUohWeLlgpr+DH9iHRjdA==
                    -----END CERTIFICATE-----
        return_response:
          headers:
            status: '200'
          body:
            done: true
            response:
              pemIssuerCertChain:
              - |-
                -----BEGIN CERTIFICATE-----
                MIIEiDCCAnACFBIqqUoIQUU5RgXxiua8ISTU9YMcMA0GCSqGSIb3DQEBCwUAMIGM
                MQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjERMA8GA1UEBwwIS2ly
                a2xhbmQxHTAbBgNVBAoMFEludGVybWVkaWF0ZSBDQSBJbmMuMRswGQYDVQQLDBJT
                dGlsbCBVbml0IFRlc3RpbmcxGTAXBgNVBAMMEGludGVybWVkaWF0ZS5jb20wHhcN
                MTkwOTA0MjMwNTE1WhcNNDcwMTIwMjMwNTE1WjB0MQswCQYDVQQGEwJDQTETMBEG
                A1UECAwKU29tZS1TdGF0ZTENMAsGA1UEBwwETGVhZjEfMB0GA1UECgwWTGVhZiBD
                ZXJ0IGluIFVuaXQgVGVzdDENMAsGA1UECwwETGVhZjERMA8GA1UEAwwIbGVhZi5j
                b20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCwgxbW4gZypGqAHVer
                aMbHsig7A29xb8FllK2uT0kTIIu869qMsLWVyBVr0TVB+8ubycTQzR49bNQ5QuUL
                wK19VVWf/r8dSA1COj2ZxeWpV3sWVB1cAPbqYKTSz+afoXWAPM04N47OW18Uu4dp
                Gqzoj2TW5VKkltagCuCP2jA6Cp+GQOH5sTpQ2d7YCO93Z6QqvdWUqYEMFU/Lo9M7
                6Vt3sFVpwrOLInQnuhct28T6puOb212kX+mCLsgrQmzf6NmxaElaaNMTHSXL2xRF
                hBSZFU1M5IzAi2h3AS3E5ulbEVgJkZsgN2yFDjCkV9XvlSWOtxBETrITCQU5fRGh
                2pxHAgMBAAEwDQYJKoZIhvcNAQELBQADggIBAGr2foGrMdqJlb7Xc7vR1nDP125l
                pGUdf9W92tFJ2b/sbEw/Xhh5gfqaCcx8bcygBY82PIXnL7Pt5ahfRdihTR4Xkads
                miePA8Jk5pkNmXzhoNE9EbFAGEFUGKSfUJnngnt6FuHVpmTG5AwHLlkTJcFDuwQN
                ZfiOUm7lkebHJy8W+Fb7cBDzyxmcr/lHG1qsbYjaqlnTt/WjnRrsOYgSwdFXnP95
                3DCQvfQg6kvNZ2zj/1iIXDsQ0mYTTjNQzeWzlOF/CLL0mUk6xpSXY1HnW4Y7hREI
                hEJNcfJX6cLmq0XK+H3MgLtSB+6dTQ5TLISZwYYrAyHGdJDDu9DEsEZXgGZCZCdP
                mlBvmxoXlW9NFD9TBTD3M/txNg/UySLJjK/wxfaR/XXGnLv5PgYcHc2ajdZmArba
                aW+svhFsZ2biuAeCloOAOPlISg9Lr3ydTrUMZHQB3a7W42NEkcxdO4ab1FEArsVA
                uS1zHs1yhoRXtfNgyQ9zykxHlBgjXDZsFxfUuzJZa4t7VqtWgLeUXdewCBSaf63+
                SKOLgx8l6QnTHnUh5700ApIuoXBuaSqc6BfTl1nkQqUZEoGlcuFZqJXe2sWN1oDP
                rI7NPXRWJqTdNuSjUznzSMO+AsBcZBcYad1pjhWDNnW4n1UFoMpaIYzb6jZSedo9
                y4+LpDFE2AxuNZ/x
                -----END CERTIFICATE-----
              - |-
                -----BEGIN CERTIFICATE-----
                MIIGGzCCBAOgAwIBAgIUearOADxVb0UXTUgiRKau+DrZms8wDQYJKoZIhvcNAQEL
                BQAwgZwxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMREwDwYDVQQH
                DAhLaXJrbGFuZDEWMBQGA1UECgwNVW5pdCBUZXN0IExMQzEVMBMGA1UECwwMVW5p
                dCBUZXN0aW5nMRQwEgYDVQQDDAtleGFtcGxlLmNvbTEgMB4GCSqGSIb3DQEJARYR
                YWRtaW5AZXhtYXBsZS5jb20wHhcNMTkwOTA0MjMwNDI2WhcNNDcwMTIwMjMwNDI2
                WjCBjDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xETAPBgNVBAcM
                CEtpcmtsYW5kMR0wGwYDVQQKDBRJbnRlcm1lZGlhdGUgQ0EgSW5jLjEbMBkGA1UE
                CwwSU3RpbGwgVW5pdCBUZXN0aW5nMRkwFwYDVQQDDBBpbnRlcm1lZGlhdGUuY29t
                MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAotFFd49Jt3oxermtyvn8
                EOKCIYMQmSQYdLHbLdOZ9qznypc13CwDwZ8yz8xdx22W4VuOTAE+M23g5xLrc2yf
                QDl7eDtLP0UfIRwZk2QrBOWjK1941K4Cz3tXXaxOLnA6sYXCiW9MXXGx+d/3jzPq
                vanaySduvOa4MLgE2SsNefimJAVj+CQZFWJCkEqLd+2kTYl4rtfT7+1Rk7P7nPH/
                2oVWMa3W5IN3fQgK1MvBQjERFVbXqgFVpLjk2jx4IkQL7dm8m8zyqcL7aLN2POyZ
                Vk3fQhqbIkVLooE2k9+xJBaOaErc3Ae/7K0617yD6d9W6d/pSxAcFtXArElHtjVq
                E4kJ7dNvAR7Wr9iOAZe+fzm73MaO3qKJKxonrC4Scg27IFf0LvoCxT+Kgjtdcnqj
                npeGlrkR4EZ16uCp++QEFsdvyKAV4rf3ZcGQKxyx4jLnWetNjStohzt3LWymUZMx
                gA9LZ3pVSVYRdxUSlUQQpBh66pcQ+nNNQuZjZFfVWh++FDLqeLw/WcAR9eoKDXNX
                pTLxKOR2xQHNhRqJbQK9Ul3LGDXpUgXa/8I22lbdq1ZQbofNIALpyFRlFrqqRWou
                YFJ+PSm6oNcLtpnGw+hWJtVAnbHj5cQ+C9mqv9ovMRHhM1YNM5EyBcpM5RaEfXmc
                iyQTAlm/1bsbOIEHdlRwFYkCAwEAAaNjMGEwHQYDVR0OBBYEFCt/cXZ8C3e15LRC
                sZrpJ8DExSdWMB8GA1UdIwQYMBaAFCPoz4s26z5DzQdGsCVG1q3Clc0NMA8GA1Ud
                EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQCP
                GITzJMSPMS1dWTWKWTzhn3aHv6HDtOiEiuomApaigckil0WPMIfWuGQCFYC7WWDz
                DR1QssiwQHnn5MUDG/DCvQHhH1ikxRqYOgQOffM8Dbqt6qD2ua/CNAndAN49tngF
                VMW3VzV+QKaFcz/BQPRgdX4Tq+1z0lqkSbO5XlIghnoYUZec/KdfirLL2Z+DShf9
                XE43UnMBZtKUsdxPk2dSUru5oSqAAe5IuuotL0EcpITV7sN9d92OSQi29iuNFGpD
                0RJzur3/nUPNk00I2fdUD1rDGk6uAINIXM8E8lrOSOr2rm3ZCnUmrIflHzBXm7jo
                S3ZkTfkaXMiCOa8E4Bfbxpdt+NhViV/ik+FBNvdjF+wZR6Jt8NGNVbN+A4uWanVV
                ImMyRTtt2QYrTgGmy6cH109Lgo9vt3DT/jxFAftP5aRQThweNERUMuq7v2n2JpA3
                iuf7qotbpuRALQ+zkgYXssTaYITg1rymC+DQ5RLGrE1J3IoRHyOlMr09eZAHW0i3
                mcFjx57FiMmRgH7nfl9JvZKhcMSI0/QQYrdyzdR5uAf4IeKcvwblHxNAJM0gonwD
                AwrA/tI6xv/OxFEgkFVgbB2n5sIQUX21J216nagiDJ7iIUhAcXQQgGQv437lLy+R
                Qpia3sFMxKU9iaFwty6llwSOEp9zuxkwkU+G/20K2w==
                -----END CERTIFICATE-----
              - |-
                -----BEGIN CERTIFICATE-----
                MIIGGzCCBAOgAwIBAgIUaZtIjugoa6GYNrd5jzZ+cXr6SA0wDQYJKoZIhvcNAQEL
                BQAwgZwxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMREwDwYDVQQH
                DAhLaXJrbGFuZDEWMBQGA1UECgwNVW5pdCBUZXN0IExMQzEVMBMGA1UECwwMVW5p
                dCBUZXN0aW5nMRQwEgYDVQQDDAtleGFtcGxlLmNvbTEgMB4GCSqGSIb3DQEJARYR
                YWRtaW5AZXhtYXBsZS5jb20wHhcNMTkwOTA0MjIxMTI5WhcNNDcwMTIwMjIxMTI5
                WjCBnDELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxETAPBgNVBAcM
                CEtpcmtsYW5kMRYwFAYDVQQKDA1Vbml0IFRlc3QgTExDMRUwEwYDVQQLDAxVbml0
                IFRlc3RpbmcxFDASBgNVBAMMC2V4YW1wbGUuY29tMSAwHgYJKoZIhvcNAQkBFhFh
                ZG1pbkBleG1hcGxlLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
                AMwIItX69IYHvWtAlYQOH2RDcdxmNmPzGkBhJJ6rf/197/8wFzEF9mfV67WpQuql
                jTn3EUzA3f/mhWRmqGwXJUteVNdqG1qYMjdAOiTuXWHBiIm6Vxu8BZB1hEA9pXOz
                9Aia7PdXIOfJ4S3YS0nTyYJZYwSP0QP2LivsPEYYoasx2SBQ4OpeXxAVPwS8Aspx
                eav1FAXUfTy+R902NG52RNRGs4KhoNY7HPR/X9w2zuaP6rThJFPDDO9sFjHm4+Zf
                u78nqkfrW8HIcXIBCcJw3rofNt6zJ+SkFhf7U8nwbalH7KzKY1xnJnK3P7/vdhgz
                vP1/xxl9GfKFA2wAxLDCdCj9syjWkqJUJUFjMdSGEQ9VeIixejQFDZ9J+2c20niz
                ESPRtuZK4Q+TzyuO4pYROanYWqEkH8TaQHQ9kVBwP8XZI4xy/kk3/1zoGZLqzPuB
                wnWIK66dmZ7FW3VDUW/gJjLTp9+kO1eMZ8ZrRFB3oMnEmltau0Z9p4dpZmTaJMRB
                1kq1kmysR42Krg0dGrs++zCJMsci55bqvisdcGAVriIL+aR9scwTR5OtsFYWtTML
                qyNS1E8mbB3LoDMJFS7rJ8hT+wdhCRU/9K5i8vOZx/HjhIad7tOUhqnyosuWcqc3
                eShtFBN4IGMkkJzs/CpOwY8IQ4Q+nnoXGDJS7S6LSp8pAgMBAAGjUzBRMB0GA1Ud
                DgQWBBQj6M+LNus+Q80HRrAlRtatwpXNDTAfBgNVHSMEGDAWgBQj6M+LNus+Q80H
                RrAlRtatwpXNDTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQBt
                HY5WATKqaAy0DkSNaAa8K4CvgvQCUgh/jjU3BLgtFJ31uaI1qtkCbkxG+MMbQZ0L
                kEOEyKG21q37bKwMiedaoRKwJ70fmERpDtm3T42csho9sacIVhbhZykGO2TLv4ka
                C0FuUCSmwk5gjsCquUT3GZMNoHRcyWeDh7cEStm5sXB57Hcbq7BYtLGmlFRsET+0
                mBnoEJZoIE0gVs0cMOdKNjrcg6IXo819qGgd2fPdX6mNE8Sn9glbL3vPdFfDqYEi
                3BDhOTCPEcHx1gquX5G0pKsL8DSTquneAIf1w+9JIuITt3WTmkUQzbBGVtH/dxDc
                5YIhtZu1ALHZvLdw7KDnvEMAmrO53b1YL+WRHRG/3JUiF+TWwPwN2XUcQhwsm2Lw
                vaGWbdndFKsNKr8Wc0hrzJNMmE4OHP/9enlBDUitVv2E1UV8A/7/L+YY09Mq4pQY
                j4NU/ckHSyFR/zFGFwRdDALErwegxyvMbULtyS4Jie1TB1hOKnqaHqcC1LzIpGx9
                5UdbbNaqd8WwEb8IuJm5wv+6JlQT0etyOlER16Z/YSys7ngeCLhTh37t8ATYluMa
                lpR0m6JSkFj63E/ICUfByYp/ggRgifcvVxvnviYFh6RZqsA5OfNp8Da/GFuFsd5G
                DoXOHStR9u7xJRPfnmUo7SUohWeLlgpr+DH9iHRjdA==
                -----END CERTIFICATE-----
    - expect_exit:
        code: 0
- execute_command:
    command: privateca subordinates update ca --location europe-west1 --pem-chain
      test_chain.pem
    events:
    - api_call:
        expect_request:
          uri: https://privateca.googleapis.com/v1beta1/projects/fake-project/locations/europe-west1/certificateAuthorities/ca?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body:
            name: projects/fake-project/locations/europe-west1/certificateAuthorities/ca
            type: SELF_SIGNED
            state: ACTIVE
    - expect_exit:
        code: 1
        message: Cannot perform subordinates command on Root CA. Please use the `privateca
          roots` command group instead.
- set_property:
    privateca/location: us-central1
- execute_command:
    command: privateca subordinates update ca --publish-ca-cert --no-publish-crl
    events:
    - api_call:
        expect_request:
          uri: https://privateca.googleapis.com/v1beta1/projects/fake-project/locations/us-central1/certificateAuthorities/ca?alt=json
          method: GET
          body: null
        return_response:
          headers:
            status: '200'
          body:
            name: projects/fake-project/locations/us-central1/certificateAuthorities/ca
            type: SUBORDINATE
            state: ACTIVE
    - api_call:
        expect_request:
          uri:
            matches: https://privateca\.googleapis\.com/v1beta1/projects/fake-project/locations/us-central1/certificateAuthorities/ca\?alt=json&requestId=[^&]+&updateMask=issuing_options\.include_crl_access_url%2Cissuing_options\.include_ca_cert_url
          method: PATCH
          body:
            json: {}
        return_response:
          headers:
            status: '200'
          body:
            done: true
            response:
              name: projects/fake-project/locations/us-central1/certificateAuthorities/ca
              type: SUBORDINATE
              state: ACTIVE
    - expect_exit:
        code: 0
