title: secrets beta create test
release_tracks: [BETA]
summary:
# This summary is generated by http://go/gcloud-scenario-tests on update and should not be edited.
- execute:
  - label: create secret with automatic replication policy and no data
  - command: |
      secrets create my-secret --replication-policy automatic
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create secret with user managed replication policy and no data
  - command: |
      secrets create my-secret --replication-policy user-managed --locations us-central1
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: failed to create secret with automatic policy and locations
  - command: |
      secrets create my-secret --replication-policy automatic --locations us-central1
  - error: '1: Invalid value for [locations]: If --replication-policy is "automatic"
      then --locations are not allowed. Please remove the --locations flag or set
      the --replication-policy to "user-managed".'
- execute:
  - label: failed to create secret with user managed policy and no locations
  - command: |
      secrets create my-secret --replication-policy user-managed
  - error: '1: Missing required argument [locations]: If --replication-policy is user-managed
      then --locations must also be provided. Please set the desired storage regions
      in --locations or the secrets/locations property. For an automatic replication
      policy, please set --replication-policy or the secrets/replication-policy property
      to "automatic".'
- execute:
  - label: no secret given
  - command: |
      secrets create --replication-policy user-managed
  - stderr: |
      ERROR: (gcloud.beta.secrets.create) argument SECRET: Must be specified.
      Usage: gcloud beta secrets create SECRET [optional flags]
        optional flags may be  --data-file | --help | --kms-key-name | --labels |
                               --locations | --replication-policy |
                               --replication-policy-file

      For detailed information on this command and its flags, run:
        gcloud beta secrets create --help
  - error: '1: argument SECRET: Must be specified.'
- execute:
  - label: no policy given defaults to automatic
  - command: |
      secrets create my-secret
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: no policy given with locations returns error
  - command: |
      secrets create my-secret --locations us-central1,europe-west1
  - error: '1: Invalid value for [locations]: Locations are only allowed when creating
      a secret with a "user-managed" replication policy. Please use the --replication-policy
      flag to set it or remove --locations to use an automatic replication policy.'
- execute:
  - label: create secret with data
  - command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
  - stdout: |
      Created version [1] of the secret [my-secret].
- execute:
  - label: no policy given defaults to automatic
  - command: |
      secrets create my-secret
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: no policy given with locations returns error
  - command: |
      secrets create my-secret --locations us-central1,europe-west1
  - error: '1: Invalid value for [locations]: Locations are only allowed when creating
      a secret with a "user-managed" replication policy. Please use the --replication-policy
      flag to set it or remove --locations to use an automatic replication policy.'
- execute:
  - label: no policy given defaults to automatic when creating secret with data
  - command: |
      secrets create my-secret --data-file secret.data
  - stdout: |
      Created version [1] of the secret [my-secret].
- execute:
  - label: create secret fails in backend
  - command: |
      secrets create my-secret --replication-policy automatic
  - error: '1: HTTPError 400: {}'
- execute:
  - label: create secret fails in backend with data given
  - command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
  - error: '1: HTTPError 400: {}'
- execute:
  - label: create version fails in backend
  - command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
  - error: '1: HTTPError 400: {}'
- execute:
  - label: create automatic secret with kms key flag and no data
  - command: |
      secrets create my-secret --replication-policy automatic --kms-key-name=kms-key
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create user managed secret with kms key flag fails
  - command: |
      secrets create my-secret --replication-policy user-managed --locations us-central1 --kms-key-name=kms-key
  - error: '1: Invalid value for [kms-key-name]: The --kms-key-name flag can only
      be set for automatically replicated secrets. To create a user managed secret
      with customer managed encryption keys, please use --replication-policy-file.'
- execute:
  - label: create secret with an empty replication file fails
  - command: |
      secrets create my-secret --replication-policy-file emptyreplication.json
  - error: '1: Invalid value for [replication-policy]: File cannot be empty.'
- execute:
  - label: create a secret with a malformed json file fails
  - command: |
      secrets create my-secret --replication-policy-file nonsense.json
  - error: '1: Expected to find either "userManaged" or "automatic" in replication,
      but found neither.'
- execute:
  - label: create automatic secret without cmek using file
  - command: |
      secrets create my-secret --replication-policy-file automatic-no-cmek.json
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create automatic secret with a cmek key using file
  - command: |
      secrets create my-secret --replication-policy-file automatic-with-cmek.json
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create automatic secret with a cmek key using file with labels
  - command: |
      secrets create my-secret --replication-policy-file automatic-with-cmek.json --labels=foo=bar
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: try to create automatic secret with a cmek without specifying a key using
      a file.
  - command: |
      secrets create my-secret --replication-policy-file bad-automatic-empty-cmek.json
  - error: '1: Failed to find a kmsKeyName in customerManagedEncryption.'
- execute:
  - label: try to create a secret with an invalid replication policy type using a
      file.
  - command: |
      secrets create my-secret --replication-policy-file not-automatic-or-user-managed.json
  - error: '1: Expected to find either "userManaged" or "automatic" in replication,
      but found neither.'
- execute:
  - label: create a ummr secret without cmek using a file
  - command: |
      secrets create my-secret --replication-policy-file ummr-without-cmek.json
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create a ummr secret with cmek using a file
  - command: |
      secrets create my-secret --replication-policy-file ummr-with-cmek.json
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create a ummr secret with cmek using a file
  - command: |
      secrets create my-secret --replication-policy-file bad-ummr-with-cmek-missing-key.json
  - error: '1: Failed to find a kmsKeyName in customerManagedEncryption for replica
      at least one replica.'
- execute:
  - label: create a ummr secret with cmek using a file
  - command: |
      secrets create my-secret --replication-policy-file bad-ummr-with-only-some-regions-cmek.json
  - error: '1: Only some replicas have customerManagedEncryption. Please either
      add the missing field to the remaining replicas or remove it from all replicas.'
- execute:
  - label: create a ummr secret without cmek using a yaml file
  - command: |
      secrets create my-secret --replication-policy-file ummr-without-cmek.yaml
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create automatic secret with a cmek key using yaml file
  - command: |
      secrets create my-secret --replication-policy-file automatic-with-cmek.yaml
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create automatic secret with replication from stdin but nothing there
  - command: |
      secrets create my-secret --replication-policy-file -
  - error: '1: Invalid value for [replication-policy]: File cannot be empty.'
actions:
- write_file:
    path: secret.data
    contents: thisissecretdata
- execute_command:
    label: create secret with automatic replication policy and no data
    command: |
      secrets create my-secret --replication-policy automatic
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: create secret with user managed replication policy and no data
    command: |
      secrets create my-secret --replication-policy user-managed --locations us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - location: us-central1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                    "location":"us-central1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: failed to create secret with automatic policy and locations
    command: |
      secrets create my-secret --replication-policy automatic --locations us-central1
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [locations]: If --replication-policy is "automatic"
          then --locations are not allowed. Please remove the --locations flag or
          set the --replication-policy to "user-managed".'
- execute_command:
    label: failed to create secret with user managed policy and no locations
    command: |
      secrets create my-secret --replication-policy user-managed
    events:
    - expect_exit:
        code: 1
        message: 'Missing required argument [locations]: If --replication-policy is
          user-managed then --locations must also be provided. Please set the desired
          storage regions in --locations or the secrets/locations property. For an
          automatic replication policy, please set --replication-policy or the secrets/replication-policy
          property to "automatic".'
- execute_command:
    label: no secret given
    command: |
      secrets create --replication-policy user-managed
    events:
    - expect_stderr: |
        ERROR: (gcloud.beta.secrets.create) argument SECRET: Must be specified.
        Usage: gcloud beta secrets create SECRET [optional flags]
          optional flags may be  --data-file | --help | --kms-key-name | --labels |
                                 --locations | --replication-policy |
                                 --replication-policy-file

        For detailed information on this command and its flags, run:
          gcloud beta secrets create --help
    - expect_exit:
        code: 1
        message: 'argument SECRET: Must be specified.'
- execute_command:
    label: no policy given defaults to automatic
    command: |
      secrets create my-secret
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication: {}
        return_response:
          headers: {}
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: no policy given with locations returns error
    command: |
      secrets create my-secret --locations us-central1,europe-west1
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [locations]: Locations are only allowed when creating
          a secret with a "user-managed" replication policy. Please use the --replication-policy
          flag to set it or remove --locations to use an automatic replication policy.'
- execute_command:
    label: create secret with data
    command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {
                "foo": "bar"
              }
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret:addVersion?alt=json
          method: POST
          headers: {}
          body:
            json:
              payload:
                data: dGhpc2lzc2VjcmV0ZGF0YQ==
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret/versions/1",
              "createTime": "2019-06-26T17:06:38.425235006Z",
              "state": "ENABLED"
            }
    - expect_stdout: |
        Created version [1] of the secret [my-secret].
    - expect_exit:
        code: 0

- execute_command:
    label: no policy given defaults to automatic
    command: |
      secrets create my-secret
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication: {}
        return_response:
          headers: {}
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: no policy given with locations returns error
    command: |
      secrets create my-secret --locations us-central1,europe-west1
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [locations]: Locations are only allowed when creating
          a secret with a "user-managed" replication policy. Please use the --replication-policy
          flag to set it or remove --locations to use an automatic replication policy.'
- execute_command:
    label: no policy given defaults to automatic when creating secret with data
    command: |
      secrets create my-secret --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication: {}
        return_response:
          headers: {}
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret:addVersion?alt=json
          method: POST
          headers: {}
          body:
            json:
              payload:
                data: dGhpc2lzc2VjcmV0ZGF0YQ==
        return_response:
          headers: {}
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret/versions/1",
              "createTime": "2019-06-26T17:06:38.425235006Z",
              "state": "ENABLED"
            }
    - expect_stdout: |
        Created version [1] of the secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: create secret fails in backend
    command: |
      secrets create my-secret --replication-policy automatic
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '400'
          body: {}
    - expect_exit:
        code: 1
        message: 'HTTPError 400: {}'
- execute_command:
    label: create secret fails in backend with data given
    command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '400'
          body: {}
    - expect_exit:
        code: 1
        message: 'HTTPError 400: {}'
- execute_command:
    label: create version fails in backend
    command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret:addVersion?alt=json
          method: POST
          headers: {}
          body:
            json:
              payload:
                data: dGhpc2lzc2VjcmV0ZGF0YQ==
        return_response:
          headers:
            status: '400'
          body: {}
    - expect_exit:
        code: 1
        message: 'HTTPError 400: {}'
- execute_command:
    label: create automatic secret with kms key flag and no data
    command: |
      secrets create my-secret --replication-policy automatic --kms-key-name=kms-key
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic:
                  customerManagedEncryption:
                    kmsKeyName: kms-key
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "kms-key"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: create user managed secret with kms key flag fails
    command: |
      secrets create my-secret --replication-policy user-managed --locations us-central1 --kms-key-name=kms-key
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [kms-key-name]: The --kms-key-name flag can only
          be set for automatically replicated secrets. To create a user managed secret
          with customer managed encryption keys, please use --replication-policy-file.'
- write_file:
    path: emptyreplication.json
    contents: ''
- execute_command:
    label: create secret with an empty replication file fails
    command: |
      secrets create my-secret --replication-policy-file emptyreplication.json
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [replication-policy]: File cannot be empty.'
- write_file:
    path: nonsense.json
    contents: not real json
- execute_command:
    label: create a secret with a malformed json file fails
    command: |
      secrets create my-secret --replication-policy-file nonsense.json
    events:
    - expect_exit:
        code: 1
        message: Expected to find either "userManaged" or "automatic" in replication,
          but found neither.
- write_file:
    path: automatic-no-cmek.json
    contents: '{"automatic": {}}'
- execute_command:
    label: create automatic secret without cmek using file
    command: |
      secrets create my-secret --replication-policy-file automatic-no-cmek.json
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- write_file:
    path: automatic-with-cmek.json
    contents: |
      {
        "automatic": {
          "customerManagedEncryption": {
            "kmsKeyName": "my-kms-key-name"
          }
        }
      }
- execute_command:
    label: create automatic secret with a cmek key using file
    command: |
      secrets create my-secret --replication-policy-file automatic-with-cmek.json
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic:
                  customerManagedEncryption:
                    kmsKeyName: my-kms-key-name
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "my-kms-key-name"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: create automatic secret with a cmek key using file with labels
    command: |
      secrets create my-secret --replication-policy-file automatic-with-cmek.json --labels=foo=bar
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              labels:
                foo: bar
              replication:
                automatic:
                  customerManagedEncryption:
                    kmsKeyName: my-kms-key-name
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "my-kms-key-name"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- write_file:
    path: bad-automatic-empty-cmek.json
    contents: |
      {
        "automatic": {
          "customerManagedEncryption": {
          }
        }
      }
- execute_command:
    label: try to create automatic secret with a cmek without specifying a key using
      a file.
    command: |
      secrets create my-secret --replication-policy-file bad-automatic-empty-cmek.json
    events:
    - expect_exit:
        code: 1
        message: Failed to find a kmsKeyName in customerManagedEncryption.
- write_file:
    path: not-automatic-or-user-managed.json
    contents: |
      {
        "not-automatic-or-user-managed": {
        }
      }
- execute_command:
    label: try to create a secret with an invalid replication policy type using a
      file.
    command: |
      secrets create my-secret --replication-policy-file not-automatic-or-user-managed.json
    events:
    - expect_exit:
        code: 1
        message: |-
          Expected to find either "userManaged" or "automatic" in replication, but found neither.
- write_file:
    path: ummr-without-cmek.json
    contents: |
      {
        "userManaged": {
          "replicas": [{
            "location": "us-west1"
          }, {
            "location": "us-east1"
          }, {
            "location": "asia-east1"
            }
          ]
        }
      }
- execute_command:
    label: create a ummr secret without cmek using a file
    command: |
      secrets create my-secret --replication-policy-file ummr-without-cmek.json
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - location: us-west1
                  - location: us-east1
                  - location: asia-east1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1"
                    },{
                      "location":"us-east1"
                    },{
                      "location":"asia-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- write_file:
    path: ummr-with-cmek.json
    contents: |
      {
        "userManaged": {
          "replicas": [{
            "location": "us-west1",
            "customerManagedEncryption": {
              "kmsKeyName": "key1"
            }
          }, {
            "location": "us-east1",
            "customerManagedEncryption": {
              "kmsKeyName": "key2"
            }
          }, {
            "location": "asia-east1",
            "customerManagedEncryption": {
              "kmsKeyName": "key3"
            }
          }]
        }
      }
- execute_command:
    label: create a ummr secret with cmek using a file
    command: |
      secrets create my-secret --replication-policy-file ummr-with-cmek.json
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - customerManagedEncryption:
                      kmsKeyName: key1
                    location: us-west1
                  - customerManagedEncryption:
                      kmsKeyName: key2
                    location: us-east1
                  - customerManagedEncryption:
                      kmsKeyName: key3
                    location: asia-east1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "key1"
                      }
                    },{
                      "location":"us-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "key2"
                      }
                    },{
                      "location":"asia-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "key3"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- write_file:
    path: bad-ummr-with-cmek-missing-key.json
    contents: |
      {
        "userManaged": {
          "replicas": [{
            "location": "us-west1",
            "customerManagedEncryption": {
            }
          }, {
            "location": "us-east1",
            "customerManagedEncryption": {
              "kmsKeyName": "key2"
            }
          }, {
            "location": "asia-east1",
            "customerManagedEncryption": {
              "kmsKeyName": "key3"
            }
          }]
        }
      }
- execute_command:
    label: create a ummr secret with cmek using a file
    command: |
      secrets create my-secret --replication-policy-file bad-ummr-with-cmek-missing-key.json
    events:
    - expect_exit:
        code: 1
        message: Failed to find a kmsKeyName in customerManagedEncryption for
          replica at least one replica.
- write_file:
    path: bad-ummr-with-only-some-regions-cmek.json
    contents: |
      {
        "userManaged": {
          "replicas": [{
            "location": "us-west1"
            }, {
            "location": "us-east1",
            "customerManagedEncryption": {
              "kmsKeyName": "key2"
            }
            }, {
            "location": "asia-east1"
            }]
        }
      }
- execute_command:
    label: create a ummr secret with cmek using a file
    command: |
      secrets create my-secret --replication-policy-file bad-ummr-with-only-some-regions-cmek.json
    events:
    - expect_exit:
        code: 1
        message: |-
          Only some replicas have customerManagedEncryption. Please either add the missing field to the remaining replicas or remove it from all replicas.
- write_file:
    path: ummr-without-cmek.yaml
    contents: |
      userManaged:
        replicas:
        - location: us-central1
        - location: us-east1
- execute_command:
    label: create a ummr secret without cmek using a yaml file
    command: |
      secrets create my-secret --replication-policy-file ummr-without-cmek.yaml
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - location: us-central1
                  - location: us-east1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1"
                    },{
                      "location":"us-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- write_file:
    path: automatic-with-cmek.yaml
    contents: |
      automatic:
        customerManagedEncryption:
          kmsKeyName: my-kms-key-name
- execute_command:
    label: create automatic secret with a cmek key using yaml file
    command: |
      secrets create my-secret --replication-policy-file automatic-with-cmek.yaml
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic:
                  customerManagedEncryption:
                    kmsKeyName: my-kms-key-name
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "my-kms-key-name"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: create automatic secret with replication from stdin but nothing there
    command: |
      secrets create my-secret --replication-policy-file -
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [replication-policy]: File cannot be empty.'
