title: secrets beta replication get test
release_tracks: [BETA]
summary:
# This summary is generated by http://go/gcloud-scenario-tests on update and should not be edited.
- execute:
  - label: no arguments given
  - command: secrets replication update
  - stderr: |
      ERROR: (gcloud.beta.secrets.replication.update) argument SECRET: Must be specified.
      Usage: gcloud beta secrets replication update SECRET [optional flags]
        optional flags may be  --help | --location | --remove-cmek | --set-kms-key

      For detailed information on this command and its flags, run:
        gcloud beta secrets replication update --help
  - error: '1: argument SECRET: Must be specified.'
- execute:
  - label: no arguments given besides secret
  - command: secrets replication update my-secret
  - error: '1: One of [--remove-cmek, --set-kms-key] must be supplied.'
- execute:
  - label: only location given
  - command: secrets replication update my-secret --location=us-central1
  - error: '1: One of [--remove-cmek, --set-kms-key] must be supplied.'
- execute:
  - label: attempt to remove cmek while giving a location
  - command: secrets replication update my-secret --remove-cmek --location=us-central1
  - error: '1: arguments not allowed simultaneously: Cannot remove customer managed
      encryption keys for just one location. To use Google managed encryption keys
      for all locations, please remove --locations.'
- execute:
  - label: attempt to remove cmek while setting a kms key
  - command: secrets replication update my-secret --remove-cmek --set-kms-key=my-key
  - error: '1: arguments not allowed simultaneously: Cannot simultaneously set and
      remove a customer managed encryption key.'
- execute:
  - label: remove cmek from an automatic cmek secret
  - command: secrets replication update my-secret --remove-cmek
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: remove cmek from an automatic non-cmek secret
  - command: secrets replication update my-secret --remove-cmek
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: remove cmek from a ummr cmek secret
  - command: secrets replication update my-secret --remove-cmek
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: remove cmek from a ummr non-cmek secret
  - command: secrets replication update my-secret --remove-cmek
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: set key on an automatic non-cmek secret
  - command: secrets replication update my-secret --set-kms-key=my-key
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: set key on an automatic cmek secret
  - command: secrets replication update my-secret --set-kms-key=my-key
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: set key on an automatic secret passing a location
  - command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
  - error: '1: Invalid value for [location]: This secret has an automatic replication
      policy. To set its customer managed encryption key, please omit --locations.'
- execute:
  - label: set key on a single ummr non-cmek secret
  - command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: set key on a single ummr cmek secret
  - command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: set key on a single ummr secret with wrong location
  - command: secrets replication update my-secret --set-kms-key=my-key --location=europe-west1
  - error: '1: Invalid value for [location]: The secret does not have a replica in
      this location.'
- execute:
  - label: set key on a single ummr secret without a location
  - command: secrets replication update my-secret --set-kms-key=my-key
  - error: '1: Missing required argument [location]: This secret has a user managed
      replication polciy. The location in which to set the customer managed encryption
      key must be set with --location.'
- execute:
  - label: set key on a many ummr secret with wrong location
  - command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
  - error: '1: Invalid value for [location]: The secret does not have a replica in
      this location.'
- execute:
  - label: set key on a many ummr cmek secret
  - command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
  - stdout: |
      Updated replication for secret [my-secret].
- execute:
  - label: set key on a many ummr non-cmek secret
  - command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
  - error: '1: Either all replicas must use customer managed encryption or all replicas
      must use Google managed encryption. To add customer managed encryption to all
      replicas, please use the replication set command.'
- execute:
  - label: set key on a many ummr secret without a location
  - command: secrets replication update my-secret --set-kms-key=my-key
  - error: '1: Missing required argument [location]: This secret has a user managed
      replication polciy. The location in which to set the customer managed encryption
      key must be set with --location.'
actions:
- execute_command:
    label: no arguments given
    command: secrets replication update
    events:
    - expect_stderr: |
        ERROR: (gcloud.beta.secrets.replication.update) argument SECRET: Must be specified.
        Usage: gcloud beta secrets replication update SECRET [optional flags]
          optional flags may be  --help | --location | --remove-cmek | --set-kms-key

        For detailed information on this command and its flags, run:
          gcloud beta secrets replication update --help
    - expect_exit:
        code: 1
        message: 'argument SECRET: Must be specified.'
- execute_command:
    label: no arguments given besides secret
    command: secrets replication update my-secret
    events:
    - expect_exit:
        code: 1
        message: One of [--remove-cmek, --set-kms-key] must be supplied.
- execute_command:
    label: only location given
    command: secrets replication update my-secret --location=us-central1
    events:
    - expect_exit:
        code: 1
        message: One of [--remove-cmek, --set-kms-key] must be supplied.
- execute_command:
    label: attempt to remove cmek while giving a location
    command: secrets replication update my-secret --remove-cmek --location=us-central1
    events:
    - expect_exit:
        code: 1
        message: 'arguments not allowed simultaneously: Cannot remove customer managed
          encryption keys for just one location. To use Google managed encryption
          keys for all locations, please remove --locations.'
- execute_command:
    label: attempt to remove cmek while setting a kms key
    command: secrets replication update my-secret --remove-cmek --set-kms-key=my-key
    events:
    - expect_exit:
        code: 1
        message: 'arguments not allowed simultaneously: Cannot simultaneously set
          and remove a customer managed encryption key.'
- execute_command:
    label: remove cmek from an automatic cmek secret
    command: secrets replication update my-secret --remove-cmek
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "my-kms-key-name"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: remove cmek from an automatic non-cmek secret
    command: secrets replication update my-secret --remove-cmek
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: remove cmek from a ummr cmek secret
    command: secrets replication update my-secret --remove-cmek
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "key1"
                      }
                    },{
                      "location":"us-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "key2"
                      }
                    },{
                      "location":"asia-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "key3"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - location: us-west1
                  - location: us-east1
                  - location: asia-east1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1"
                    },{
                      "location":"us-east1"
                    },{
                      "location":"asia-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: remove cmek from a ummr non-cmek secret
    command: secrets replication update my-secret --remove-cmek
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1"
                    },{
                      "location":"us-east1"
                    },{
                      "location":"asia-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - location: us-west1
                  - location: us-east1
                  - location: asia-east1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1"
                    },{
                      "location":"us-east1"
                    },{
                      "location":"asia-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: set key on an automatic non-cmek secret
    command: secrets replication update my-secret --set-kms-key=my-key
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                automatic:
                  customerManagedEncryption:
                    kmsKeyName: my-key
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "my-kms-key-name"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: set key on an automatic cmek secret
    command: secrets replication update my-secret --set-kms-key=my-key
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "your-key"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                automatic:
                  customerManagedEncryption:
                    kmsKeyName: my-key
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {
                  "customerManagedEncryption": {
                    "kmsKeyName": "my-key"
                  }
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: set key on an automatic secret passing a location
    command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_exit:
        code: 1
        message: 'Invalid value for [location]: This secret has an automatic replication
          policy. To set its customer managed encryption key, please omit --locations.'
- execute_command:
    label: set key on a single ummr non-cmek secret
    command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - customerManagedEncryption:
                      kmsKeyName: my-key
                    location: us-central1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                    "location": "us-central1",
                    "customerManagedEncryption": {
                      "kmsKeyName": "my-key"
                    }
                  }]
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: set key on a single ummr cmek secret
    command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "your-key"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - customerManagedEncryption:
                      kmsKeyName: my-key
                    location: us-central1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                    "location": "us-central1",
                    "customerManagedEncryption": {
                      "kmsKeyName": "my-key"
                    }
                  }]
                }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z"
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: set key on a single ummr secret with wrong location
    command: secrets replication update my-secret --set-kms-key=my-key --location=europe-west1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "your-key"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_exit:
        code: 1
        message: 'Invalid value for [location]: The secret does not have a replica
          in this location.'
- execute_command:
    label: set key on a single ummr secret without a location
    command: secrets replication update my-secret --set-kms-key=my-key
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "your-key"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_exit:
        code: 1
        message: 'Missing required argument [location]: This secret has a user managed
          replication polciy. The location in which to set the customer managed encryption
          key must be set with --location.'
- execute_command:
    label: set key on a many ummr secret with wrong location
    command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-west1"
                    },{
                      "location":"us-east1"
                    },{
                      "location":"asia-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_exit:
        code: 1
        message: 'Invalid value for [location]: The secret does not have a replica
          in this location.'
- execute_command:
    label: set key on a many ummr cmek secret
    command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "us-key"
                      }
                    },{
                      "location":"europe-west1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "europe-key"
                      }
                    },{
                      "location":"asia-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "asia-key"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json&updateMask=replication
          method: PATCH
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - customerManagedEncryption:
                      kmsKeyName: my-key
                    location: us-central1
                  - customerManagedEncryption:
                      kmsKeyName: europe-key
                    location: europe-west1
                  - customerManagedEncryption:
                      kmsKeyName: asia-key
                    location: asia-east1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "my-key"
                      }
                    },{
                      "location":"europe-west1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "europe-key"
                      }
                    },{
                      "location":"asia-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "asia-key"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Updated replication for secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: set key on a many ummr non-cmek secret
    command: secrets replication update my-secret --set-kms-key=my-key --location=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1"
                    },{
                      "location":"us-east1"
                    },{
                      "location":"asia-east1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_exit:
        code: 1
        message: Either all replicas must use customer managed encryption or all replicas
          must use Google managed encryption. To add customer managed encryption to
          all replicas, please use the replication set command.
- execute_command:
    label: set key on a many ummr secret without a location
    command: secrets replication update my-secret --set-kms-key=my-key
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                      "location":"us-central1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "my-key"
                      }
                    },{
                      "location":"europe-west1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "europe-key"
                      }
                    },{
                      "location":"asia-east1",
                      "customerManagedEncryption": {
                        "kmsKeyName": "asia-key"
                      }
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_exit:
        code: 1
        message: 'Missing required argument [location]: This secret has a user managed
          replication polciy. The location in which to set the customer managed encryption
          key must be set with --location.'
