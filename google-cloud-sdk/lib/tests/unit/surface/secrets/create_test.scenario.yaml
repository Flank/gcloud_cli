title: secrets create test
release_tracks: [GA]
summary:
# This summary is generated automatically on update and should not be edited.
- execute:
  - label: create secret with automatic replication policy and no data
  - command: |
      secrets create my-secret --replication-policy automatic
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: create secret with user managed replication policy and no data
  - command: |
      secrets create my-secret --replication-policy user-managed --locations us-central1
  - stdout: |
      Created secret [my-secret].
- execute:
  - label: failed to create secret with autoamtic policy and locations
  - command: |
      secrets create my-secret --replication-policy automatic --locations us-central1
  - error: '1: Invalid value for [locations]: If --replication-policy is "automatic"
      then --locations are not allowed. Please remove the --locations flag or set
      the --replication-policy to "user-managed".'
- execute:
  - label: failed to create secret with user managed policy and no locations
  - command: |
      secrets create my-secret --replication-policy user-managed
  - error: '1: Missing required argument [locations]: If --replication-policy is user-managed
      then --locations must also be provided. Please set the desired storage regions
      in --locations or the secrets/locations property. For an automatic replication
      policy, please set --replication-policy or the secrets/replication-policy property
      to "automatic".'
- execute:
  - label: no secret given
  - command: |
      secrets create --replication-policy user-managed
  - stderr: |
      ERROR: (gcloud.secrets.create) argument SECRET: Must be specified.
      Usage: gcloud secrets create SECRET [optional flags]
        optional flags may be  --data-file | --help | --labels | --locations |
                               --replication-policy

      For detailed information on this command and its flags, run:
        gcloud secrets create --help
  - error: '1: argument SECRET: Must be specified.'
- execute:
  - label: no policy given
  - command: |
      secrets create my-secret
  - error: '1: Missing required argument [replication-policy]: The --replication-policy
      flag is required. Valid values are "automatic" and "user-managed".'
- execute:
  - label: create secret with data
  - command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
  - stdout: |
      Created version [1] of the secret [my-secret].
- execute:
  - label: no policy given in attempting to create secret with data
  - command: |
      secrets create my-secret --data-file secret.data
  - error: '1: Missing required argument [replication-policy]: The --replication-policy
      flag is required. Valid values are "automatic" and "user-managed".'
- execute:
  - label: create secret fails in backend
  - command: |
      secrets create my-secret --replication-policy automatic
  - error: '1: HTTPError 400: {}'
- execute:
  - label: create secret fails in backend with data given
  - command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
  - error: '1: HTTPError 400: {}'
- execute:
  - label: create version fails in backend
  - command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
  - error: '1: HTTPError 400: {}'
actions:
- write_file:
    path: secret.data
    contents: thisissecretdata
- execute_command:
    label: create secret with automatic replication policy and no data
    command: |
      secrets create my-secret --replication-policy automatic
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: create secret with user managed replication policy and no data
    command: |
      secrets create my-secret --replication-policy user-managed --locations us-central1
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                userManaged:
                  replicas:
                  - location: us-central1
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "userManaged": {
                  "replicas": [{
                    "location":"us-central1"
                    }]
                  }
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - expect_stdout: |
        Created secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: failed to create secret with autoamtic policy and locations
    command: |
      secrets create my-secret --replication-policy automatic --locations us-central1
    events:
    - expect_exit:
        code: 1
        message: 'Invalid value for [locations]: If --replication-policy is "automatic"
          then --locations are not allowed. Please remove the --locations flag or
          set the --replication-policy to "user-managed".'
- execute_command:
    label: failed to create secret with user managed policy and no locations
    command: |
      secrets create my-secret --replication-policy user-managed
    events:
    - expect_exit:
        code: 1
        message: 'Missing required argument [locations]: If --replication-policy is
          user-managed then --locations must also be provided. Please set the desired
          storage regions in --locations or the secrets/locations property. For an
          automatic replication policy, please set --replication-policy or the secrets/replication-policy
          property to "automatic".'
- execute_command:
    label: no secret given
    command: |
      secrets create --replication-policy user-managed
    events:
    - expect_stderr: |
        ERROR: (gcloud.secrets.create) argument SECRET: Must be specified.
        Usage: gcloud secrets create SECRET [optional flags]
          optional flags may be  --data-file | --help | --labels | --locations |
                                 --replication-policy

        For detailed information on this command and its flags, run:
          gcloud secrets create --help
    - expect_exit:
        code: 1
        message: 'argument SECRET: Must be specified.'
- execute_command:
    label: no policy given
    command: |
      secrets create my-secret
    events:
    - expect_exit:
        code: 1
        message: 'Missing required argument [replication-policy]: The --replication-policy
          flag is required. Valid values are "automatic" and "user-managed".'
- execute_command:
    label: create secret with data
    command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret:addVersion?alt=json
          method: POST
          headers: {}
          body:
            json:
              payload:
                data: dGhpc2lzc2VjcmV0ZGF0YQ==
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret/versions/1",
              "createTime": "2019-06-26T17:06:38.425235006Z",
              "state": "ENABLED"
            }
    - expect_stdout: |
        Created version [1] of the secret [my-secret].
    - expect_exit:
        code: 0
- execute_command:
    label: no policy given in attempting to create secret with data
    command: |
      secrets create my-secret --data-file secret.data
    events:
    - expect_exit:
        code: 1
        message: 'Missing required argument [replication-policy]: The --replication-policy
          flag is required. Valid values are "automatic" and "user-managed".'
- execute_command:
    label: create secret fails in backend
    command: |
      secrets create my-secret --replication-policy automatic
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '400'
          body: {}
    - expect_exit:
        code: 1
        message: 'HTTPError 400: {}'
- execute_command:
    label: create secret fails in backend with data given
    command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '400'
          body: {}
    - expect_exit:
        code: 1
        message: 'HTTPError 400: {}'
- execute_command:
    label: create version fails in backend
    command: |
      secrets create my-secret --replication-policy automatic --data-file secret.data
    events:
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets?alt=json&secretId=my-secret
          method: POST
          headers: {}
          body:
            json:
              replication:
                automatic: {}
        return_response:
          headers:
            status: '200'
          body: |
            {
              "name": "projects/462803083913/secrets/my-secret",
              "replication": {
                "automatic": {}
              },
              "createTime": "2019-07-09T14:15:37.370737171Z",
              "labels": {}
            }
    - api_call:
        expect_request:
          uri: https://secretmanager.googleapis.com/v1/projects/fake-project/secrets/my-secret:addVersion?alt=json
          method: POST
          headers: {}
          body:
            json:
              payload:
                data: dGhpc2lzc2VjcmV0ZGF0YQ==
        return_response:
          headers:
            status: '400'
          body: {}
    - expect_exit:
        code: 1
        message: 'HTTPError 400: {}'
