title: database-migration migration-jobs generate-ssh-script scenario test.
release_tracks: [ALPHA]
summary:
# This summary is generated by http://go/gcloud-scenario-tests on update and should not be edited.
- execute:
  - command: database-migration migration-jobs generate-ssh-script test-job --vm=fake-vm
      --vm-port=1111 --vm-machine-type=n1-standard-1 --vm-zone-create=us-central1-a
      --vpc=fake-vpc --region=us-central1
  - stdout: |
      script: |+
        #!/bin/bash
        set -ex
        export VM_NAME=fake-vm
        export PROJECT_ID=fake-project
        export VM_ZONE=us-central1-a
        export VM_MACHINE_TYPE=n1-standard-1
        export SUBNET_NAME=fake-vpc
        export VM_PORT=1111
        export SOURCE_DB_LOCAL_IP=35.188.150.50
        export SOURCE_DB_LOCAL_PORT=3306

        echo "Creating a virtual machine (VM) instance named '${VM_NAME}' in zone '${VM_ZONE}'"

        gcloud compute instances create "${VM_NAME}" --machine-type "${VM_MACHINE_TYPE}" --zone "${VM_ZONE}" --project="${PROJECT_ID}" --subnet "${SUBNET_NAME}"

        gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- 'echo "GatewayPorts yes" | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart'

        private_ip=$(gcloud compute instances describe "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" --format='get(networkInterfaces[0].networkIP)')

        echo "VM instance '${VM_NAME}' created with private ip ${private_ip}"


        echo "Setting up SSH tunnel between the source and the VM on port '${VM_PORT}'"

        gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- -f -N -R "${VM_PORT}:${SOURCE_DB_LOCAL_IP}:${SOURCE_DB_LOCAL_PORT}"

        if [[ "$?" -eq 0 ]]; then
          echo "SSH tunnel is ready on port ${VM_PORT}"
        fi

      ...
- execute:
  - command: database-migration migration-jobs generate-ssh-script test-job --vm=fake-vm
      --vm-port=1111 --vm-zone=us-central1-a --region=us-central1
  - stdout: |
      script: |+
        #!/bin/bash
        set -ex
        export VM_NAME=fake-vm
        export PROJECT_ID=fake-project
        export VM_ZONE=us-central1-a
        export VM_PORT=1111
        export SOURCE_DB_LOCAL_IP=35.188.150.50
        export SOURCE_DB_LOCAL_PORT=3306

        # For the SSH tunnel to work, the 'GatewayPorts' parameter must be set to 'yes'
        # Uncomment the lines below to update the configuration and restart the SSH service.
        # If you are reusing a VM you already used for a tunnel on a different migration job, there is no need to uncomment.
        # If you do not wish to make this change, create a new VM instead.
        # gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- 'if ! grep -q "^GatewayPorts yes" /etc/ssh/sshd_config; then sudo sed -i "s/GatewayPorts\ no/#GatewayPorts\ no/g" /etc/ssh/sshd_config && echo "GatewayPorts yes" | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart; fi'


        echo "Setting up SSH tunnel between the source and the VM on port '${VM_PORT}'"

        gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- -f -N -R "${VM_PORT}:${SOURCE_DB_LOCAL_IP}:${SOURCE_DB_LOCAL_PORT}"

        if [[ "$?" -eq 0 ]]; then
          echo "SSH tunnel is ready on port ${VM_PORT}"
        fi

      ...
actions:
- execute_command:
    command: database-migration migration-jobs generate-ssh-script test-job --vm=fake-vm
      --vm-port=1111 --vm-machine-type=n1-standard-1 --vm-zone-create=us-central1-a
      --vpc=fake-vpc --region=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://datamigration.googleapis.com/v1alpha2/projects/fake-project/locations/us-central1/migrationJobs/test-job:generateSshScript?alt=json
          method: POST
          headers: {}
          body:
            json:
              vm: fake-vm
              vmCreationConfig:
                vmMachineType: n1-standard-1
                vmZone: us-central1-a
                vpc: fake-vpc
              vmPort: 1111
        return_response:
          status: 200
          headers: {}
          body: |
            {
              "script": "#!/bin/bash\nset -ex\nexport VM_NAME=fake-vm\nexport PROJECT_ID=fake-project\nexport VM_ZONE=us-central1-a\nexport VM_MACHINE_TYPE=n1-standard-1\nexport SUBNET_NAME=fake-vpc\nexport VM_PORT=1111\nexport SOURCE_DB_LOCAL_IP=35.188.150.50\nexport SOURCE_DB_LOCAL_PORT=3306\n\necho \"Creating a virtual machine (VM) instance named '${VM_NAME}' in zone '${VM_ZONE}'\"\n\ngcloud compute instances create \"${VM_NAME}\" --machine-type \"${VM_MACHINE_TYPE}\" --zone \"${VM_ZONE}\" --project=\"${PROJECT_ID}\" --subnet \"${SUBNET_NAME}\"\n\ngcloud compute ssh \"${VM_NAME}\" --zone=\"${VM_ZONE}\" --project=\"${PROJECT_ID}\" -- 'echo \"GatewayPorts yes\" | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart'\n\nprivate_ip=$(gcloud compute instances describe \"${VM_NAME}\" --zone=\"${VM_ZONE}\" --project=\"${PROJECT_ID}\" --format='get(networkInterfaces[0].networkIP)')\n\necho \"VM instance '${VM_NAME}' created with private ip ${private_ip}\"\n\n\necho \"Setting up SSH tunnel between the source and the VM on port '${VM_PORT}'\"\n\ngcloud compute ssh \"${VM_NAME}\" --zone=\"${VM_ZONE}\" --project=\"${PROJECT_ID}\" -- -f -N -R \"${VM_PORT}:${SOURCE_DB_LOCAL_IP}:${SOURCE_DB_LOCAL_PORT}\"\n\nif [[ \"$?\" -eq 0 ]]; then\n  echo \"SSH tunnel is ready on port ${VM_PORT}\"\nfi\n\n"
            }
    - expect_stdout: |
        script: |+
          #!/bin/bash
          set -ex
          export VM_NAME=fake-vm
          export PROJECT_ID=fake-project
          export VM_ZONE=us-central1-a
          export VM_MACHINE_TYPE=n1-standard-1
          export SUBNET_NAME=fake-vpc
          export VM_PORT=1111
          export SOURCE_DB_LOCAL_IP=35.188.150.50
          export SOURCE_DB_LOCAL_PORT=3306

          echo "Creating a virtual machine (VM) instance named '${VM_NAME}' in zone '${VM_ZONE}'"

          gcloud compute instances create "${VM_NAME}" --machine-type "${VM_MACHINE_TYPE}" --zone "${VM_ZONE}" --project="${PROJECT_ID}" --subnet "${SUBNET_NAME}"

          gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- 'echo "GatewayPorts yes" | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart'

          private_ip=$(gcloud compute instances describe "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" --format='get(networkInterfaces[0].networkIP)')

          echo "VM instance '${VM_NAME}' created with private ip ${private_ip}"


          echo "Setting up SSH tunnel between the source and the VM on port '${VM_PORT}'"

          gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- -f -N -R "${VM_PORT}:${SOURCE_DB_LOCAL_IP}:${SOURCE_DB_LOCAL_PORT}"

          if [[ "$?" -eq 0 ]]; then
            echo "SSH tunnel is ready on port ${VM_PORT}"
          fi

        ...
    - expect_exit:
        code: 0

- execute_command:
    command: database-migration migration-jobs generate-ssh-script test-job --vm=fake-vm
      --vm-port=1111 --vm-zone=us-central1-a --region=us-central1
    events:
    - api_call:
        expect_request:
          uri: https://datamigration.googleapis.com/v1alpha2/projects/fake-project/locations/us-central1/migrationJobs/test-job:generateSshScript?alt=json
          method: POST
          headers: {}
          body:
            json:
              vm: fake-vm
              vmPort: 1111
              vmSelectionConfig:
                vmZone: us-central1-a
        return_response:
          status: 200
          headers: {}
          body: |
            {
              "script": "#!/bin/bash\nset -ex\nexport VM_NAME=fake-vm\nexport PROJECT_ID=fake-project\nexport VM_ZONE=us-central1-a\nexport VM_PORT=1111\nexport SOURCE_DB_LOCAL_IP=35.188.150.50\nexport SOURCE_DB_LOCAL_PORT=3306\n\n# For the SSH tunnel to work, the 'GatewayPorts' parameter must be set to 'yes'\n# Uncomment the lines below to update the configuration and restart the SSH service.\n# If you are reusing a VM you already used for a tunnel on a different migration job, there is no need to uncomment.\n# If you do not wish to make this change, create a new VM instead.\n# gcloud compute ssh \"${VM_NAME}\" --zone=\"${VM_ZONE}\" --project=\"${PROJECT_ID}\" -- 'if ! grep -q \"^GatewayPorts yes\" /etc/ssh/sshd_config; then sudo sed -i \"s/GatewayPorts\\ no/#GatewayPorts\\ no/g\" /etc/ssh/sshd_config && echo \"GatewayPorts yes\" | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart; fi'\n\n\necho \"Setting up SSH tunnel between the source and the VM on port '${VM_PORT}'\"\n\ngcloud compute ssh \"${VM_NAME}\" --zone=\"${VM_ZONE}\" --project=\"${PROJECT_ID}\" -- -f -N -R \"${VM_PORT}:${SOURCE_DB_LOCAL_IP}:${SOURCE_DB_LOCAL_PORT}\"\n\nif [[ \"$?\" -eq 0 ]]; then\n  echo \"SSH tunnel is ready on port ${VM_PORT}\"\nfi\n\n"
            }
    - expect_stdout: |
        script: |+
          #!/bin/bash
          set -ex
          export VM_NAME=fake-vm
          export PROJECT_ID=fake-project
          export VM_ZONE=us-central1-a
          export VM_PORT=1111
          export SOURCE_DB_LOCAL_IP=35.188.150.50
          export SOURCE_DB_LOCAL_PORT=3306

          # For the SSH tunnel to work, the 'GatewayPorts' parameter must be set to 'yes'
          # Uncomment the lines below to update the configuration and restart the SSH service.
          # If you are reusing a VM you already used for a tunnel on a different migration job, there is no need to uncomment.
          # If you do not wish to make this change, create a new VM instead.
          # gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- 'if ! grep -q "^GatewayPorts yes" /etc/ssh/sshd_config; then sudo sed -i "s/GatewayPorts\ no/#GatewayPorts\ no/g" /etc/ssh/sshd_config && echo "GatewayPorts yes" | sudo tee -a /etc/ssh/sshd_config && sudo service ssh restart; fi'


          echo "Setting up SSH tunnel between the source and the VM on port '${VM_PORT}'"

          gcloud compute ssh "${VM_NAME}" --zone="${VM_ZONE}" --project="${PROJECT_ID}" -- -f -N -R "${VM_PORT}:${SOURCE_DB_LOCAL_IP}:${SOURCE_DB_LOCAL_PORT}"

          if [[ "$?" -eq 0 ]]; then
            echo "SSH tunnel is ready on port ${VM_PORT}"
          fi

        ...
    - expect_exit:
        code: 0
