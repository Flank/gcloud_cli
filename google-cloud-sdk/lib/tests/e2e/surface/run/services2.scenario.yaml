# Tests for features supported in both the ALPHA and BETA tracks.
# Add tests for ALPHA only features to services_alpha.scenario.yaml
title: serverless services deploy, update describe and delete.
release_tracks: [BETA, GA]  # Will include ALPHA again when v1 is rolled out to both.
summary:
# This summary is generated automatically on update and should not be edited.
- set_property: run/platform managed
- execute:
  - command: run deploy --region us-central1 --image gcr.io/knative-samples/helloworld-nodejs
      $$service-name2$$ --async
  - prompt:
    - prompt_string: Allow unauthenticated invocations to [$$service-name2$$]
    - input: y
  - stderr: |
      Deploying container to Cloud Run service [$$service-name2$$] in project [cloud-sdk-integration-testing] region [us-central1]
  - stderr: |
      Service [$$service-name2$$] is deploying asynchronously.
- execute:
  - command: run services delete $$service-name2$$ --region us-central1 --quiet
  - stderr: |
      Deleted service [$$service-name2$$].
actions:
- set_property:
    run/platform: managed
- generate_resource_id:
    reference: service-name2
    prefix: service-name2
- execute_command:
    # Use the prebuilt image as documented in serverless quickstart page: https://cloud.google.com/serverless-engine/docs/quickstarts/prebuilt-deploy
    command: run deploy --region us-central1 --image gcr.io/knative-samples/helloworld-nodejs
      $$service-name2$$ --async
    events:
    - api_call:
        repeatable: true
        expect_request:
          uri: https://us-central1-run.googleapis.com/apis/serving.knative.dev/v1/namespaces/cloud-sdk-integration-testing/services/$$service-name2$$?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            cache-control: private
            content-length: '1020'
            content-type: application/json; charset=UTF-8
            status: '404'
          body:
            error:
              code: 404
              message: Resource '$$service-name2$$' of kind 'SERVICE' in region 'us-central1'
                in project 'cloud-sdk-integration-testing' does not exist.
              status: NOT_FOUND
              details:
              - '@type': type.googleapis.com/google.rpc.DebugInfo
                detail: |-
                  [ORIGINAL ERROR] generic::not_found: userFacingMessage: Resource '$$service-name2$$' of kind 'SERVICE' in region 'us-central1' in project 'cloud-sdk-integration-testing' does not exist.;
                  com.google.cloud.eventprocessing.serverless.error.NotFoundException: userFacingMessage: Resource '$$service-name2$$' of kind 'SERVICE' in region 'us-central1' in project 'cloud-sdk-integration-testing' does not exist.;  Code: NOT_FOUND [google.rpc.error_details_ext] { message: "Resource \'$$service-name2$$\' of kind \'SERVICE\' in region \'us-central1\' in project \'cloud-sdk-integration-testing\' does not exist." }
    - api_call:
        expect_request:
          uri: https://run.googleapis.com/v1/projects/cloud-sdk-integration-testing/locations/us-central1/services/$$service-name2$$:testIamPermissions?alt=json
          method: POST
          headers: {}
          body:
            json:
              permissions:
              - run.services.setIamPolicy
        return_response:
          headers:
            cache-control: private
            content-length: '59'
            content-type: application/json; charset=UTF-8
            status: '200'
          body:
            permissions:
            - run.services.setIamPolicy
    - expect_prompt_continue:
        prompt_string: Allow unauthenticated invocations to [$$service-name2$$]
        user_input: y
    - expect_stderr: |
        Deploying container to Cloud Run service [$$service-name2$$] in project [cloud-sdk-integration-testing] region [us-central1]
    - api_call:
        expect_request:
          uri: https://us-central1-run.googleapis.com/apis/serving.knative.dev/v1/namespaces/cloud-sdk-integration-testing/services?alt=json
          method: POST
          headers: {}
          body:
            json:
              apiVersion: serving.knative.dev/v1
              kind: Service
              metadata:
                annotations:
                  client.knative.dev/user-image: gcr.io/knative-samples/helloworld-nodejs
                  run.googleapis.com/client-name: gcloud
                labels: {}
                name: $$service-name2$$
                namespace: cloud-sdk-integration-testing
              spec:
                template:
                  metadata:
                    annotations:
                      run.googleapis.com/client-name: gcloud
                  spec:
                    containers:
                    - image: gcr.io/knative-samples/helloworld-nodejs
              status:
                address: {}
        return_response:
          headers:
            cache-control: private
            content-length: '1975'
            content-type: application/json; charset=UTF-8
            status: '200'
          body:
            apiVersion: serving.knative.dev/v1
            kind: Service
            metadata:
              name: $$service-name2$$
              namespace: '462803083913'
              selfLink: /apis/serving.knative.dev/v1/namespaces/462803083913/services/$$service-name2$$
              uid: 21cc295b-e9ad-4465-8308-4c330e9f8dfb
              resourceVersion: AAWpPPKgc/4
              generation: 1
              labels:
                cloud.googleapis.com/location: us-central1
              annotations:
                run.googleapis.com/client-name: gcloud
                serving.knative.dev/creator: 462803083913-lak0k1ette3muh3o3kb3pp2im3urj3e9@developer.gserviceaccount.com
                serving.knative.dev/lastModifier: 462803083913-lak0k1ette3muh3o3kb3pp2im3urj3e9@developer.gserviceaccount.com
                client.knative.dev/user-image: gcr.io/knative-samples/helloworld-nodejs
              creationTimestamp: '2020-06-29T18:08:37.286910Z'
            spec:
              template:
                metadata:
                  name: $$service-name2$$-00001-loz
                  annotations:
                    run.googleapis.com/client-name: gcloud
                    client.knative.dev/user-image: gcr.io/knative-samples/helloworld-nodejs
                    autoscaling.knative.dev/maxScale: '1000'
                spec:
                  containerConcurrency: 80
                  timeoutSeconds: 300
                  containers:
                  - image: gcr.io/knative-samples/helloworld-nodejs
                    resources:
                      limits:
                        memory: 256Mi
                        cpu: 1000m
                    ports:
                    - containerPort: 8080
              traffic:
              - percent: 100
                latestRevision: true
            status: {}
    - api_call:
        expect_request:
          uri: https://run.googleapis.com/v1/projects/cloud-sdk-integration-testing/locations/us-central1/services/$$service-name2$$:getIamPolicy?alt=json
          method: GET
          headers: {}
          body: null
        return_response:
          headers:
            cache-control: private
            content-length: '21'
            content-type: application/json; charset=UTF-8
            status: '200'
          body:
            etag: ACAB
    - api_call:
        expect_request:
          uri: https://run.googleapis.com/v1/projects/cloud-sdk-integration-testing/locations/us-central1/services/$$service-name2$$:setIamPolicy?alt=json
          method: POST
          headers: {}
          body:
            json:
              policy:
                bindings:
                - members:
                  - allUsers
                  role: roles/run.invoker
        return_response:
          headers:
            cache-control: private
            content-length: '159'
            content-type: application/json; charset=UTF-8
            status: '200'
          body:
            version: 1
            etag: BwWpPPKs1rg=
            bindings:
            - role: roles/run.invoker
              members:
              - allUsers
    - expect_stderr: |
        Service [$$service-name2$$] is deploying asynchronously.
    - expect_exit:
        code: 0
- execute_command:
    # Clean up the test service
    command: run services delete $$service-name2$$ --region us-central1 --quiet
    cleanup_for: service-name2
    events:
    - api_call:
        expect_request:
          uri: https://us-central1-run.googleapis.com/apis/serving.knative.dev/v1/namespaces/cloud-sdk-integration-testing/services/$$service-name2$$?alt=json
          method: DELETE
          headers: {}
          body: null
        return_response:
          headers:
            cache-control: private
            content-length: '188'
            content-type: application/json; charset=UTF-8
            status: '200'
          body:
            status: Success
            details:
              name: $$service-name2$$
              group: v1
              kind: service
              uid: 21cc295b-e9ad-4465-8308-4c330e9f8dfb
    - expect_stderr: |
        Deleted service [$$service-name2$$].
    - expect_exit:
        code: 0
